<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fantasy.Net</name>
    </assembly>
    <members>
        <member name="T:Fantasy.CommandLineOptions">
            <summary>
            命令行选项类，用于解析命令行参数。
            </summary>
        </member>
        <member name="P:Fantasy.CommandLineOptions.AppId">
            <summary>
            进程Id，获取或设置进程的唯一标识符。
            </summary>
        </member>
        <member name="P:Fantasy.CommandLineOptions.AppType">
            <summary>
            App类型，获取或设置应用程序的类型。
            Game - 游戏服务器App
            Robot - 机器人（暂未支持该功能）
            </summary>
        </member>
        <member name="P:Fantasy.CommandLineOptions.Mode">
            <summary>
            服务器运行模式，获取或设置服务器的运行模式。
            Develop - 开发模式（所有Server都在一个进程中）
            Release - 发布模式（每个Server都在独立的进程中）
            </summary>
        </member>
        <member name="P:Fantasy.CommandLineOptions.InnerNetwork">
            <summary>
            服务器内部网络协议
            TCP - 服务器内部之间通讯使用TCP协议
            KCP - 服务器内部之间通讯使用KCP协议
            </summary>
        </member>
        <member name="P:Fantasy.CommandLineOptions.ConfigTableBinaryDirectory">
            <summary>
            配置表文件夹路径。
            </summary>
        </member>
        <member name="P:Fantasy.CommandLineOptions.SessionIdleCheckerTimeout">
            <summary>
            会话空闲检查超时时间。
            </summary>
        </member>
        <member name="P:Fantasy.CommandLineOptions.SessionIdleCheckerInterval">
            <summary>
            会话空闲检查间隔。
            </summary>
        </member>
        <member name="T:Fantasy.Entry">
            <summary>
            Fantasy.Net 应用程序入口类型
            </summary>
        </member>
        <member name="M:Fantasy.Entry.Start(System.Reflection.Assembly[])">
            <summary>
            执行 Fantasy 应用程序的初始化操作。
            </summary>
            <exception cref="T:System.Exception">当命令行格式异常时抛出。</exception>
            <exception cref="T:System.NotSupportedException">不支持的 AppType 类型异常。</exception>
        </member>
        <member name="M:Fantasy.Entry.Close">
            <summary>
            关闭 Fantasy 应用程序，释放 SingletonSystem 中的实例和已加载的程序集。
            </summary>
        </member>
        <member name="T:Fantasy.OnServerStartComplete">
            <summary>
            当Server启动完成时触发。
            </summary>
        </member>
        <member name="F:Fantasy.OnServerStartComplete.Server">
            <summary>
            获取启动完成的服务器。
            </summary>
        </member>
        <member name="M:Fantasy.OnServerStartComplete.#ctor(Fantasy.Server)">
            <summary>
            初始化一个新的 OnServerStartComplete 实例。
            </summary>
            <param name="server"></param>
        </member>
        <member name="T:Fantasy.Server">
            <summary>
            代表一个服务器或一个进程、具体看使用情况而定
            如果在同一个服务器上运行多个进程，那么每个进程都是一个服务器
            如果在不同的服务器上运行多个进程，那么每个进程都是一个服务器
            </summary>
        </member>
        <member name="P:Fantasy.Server.Id">
            <summary>
            获取服务器的唯一标识符。
            </summary>
        </member>
        <member name="P:Fantasy.Server.Scene">
            <summary>
            所属于的Scene。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fantasy.Server.Network">
            <summary>
            获取关联的服务端Network网络实例。
            </summary>
        </member>
        <member name="T:Fantasy.Server.ConnectInfo">
            <summary>
            与其他服务器建立的连接信息。
            </summary>
        </member>
        <member name="F:Fantasy.Server.ConnectInfo.Session">
            <summary>
            获取与连接信息关联的会话。
            </summary>
        </member>
        <member name="F:Fantasy.Server.ConnectInfo.AClientNetwork">
            <summary>
            获取与连接信息关联的网络。
            </summary>
        </member>
        <member name="M:Fantasy.Server.ConnectInfo.#ctor(Fantasy.Session,Fantasy.AClientNetwork)">
            <summary>
            初始化 <see cref="T:Fantasy.Server.ConnectInfo"/> 类的新实例。
            </summary>
            <param name="session">要关联的会话。</param>
            <param name="aClientNetwork">要关联的网络。</param>
        </member>
        <member name="M:Fantasy.Server.ConnectInfo.Dispose">
            <summary>
            释放连接信息所持有的资源。
            </summary>
        </member>
        <member name="M:Fantasy.Server.Create(System.UInt32)">
            <summary>
            创建并初始化具有指定服务器配置的服务器。
            </summary>
            <param name="serverConfigId">服务器配置的标识符。</param>
        </member>
        <member name="M:Fantasy.Server.Create(System.UInt32,System.String,System.Int32,System.String,System.Collections.Generic.List{Fantasy.SceneConfig})">
            <summary>
            创建一个新的服务器实例或获取现有服务器实例。
            </summary>
            <param name="serverConfigId"></param>
            <param name="innerBindIp"></param>
            <param name="innerPort"></param>
            <param name="outerBindIp"></param>
            <param name="sceneConfigs"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Server.GetSession(System.UInt32)">
            <summary>
            获取用于与指定目标服务器通信的会话。
            </summary>
            <param name="targetServerId">目标服务器的标识符。</param>
            <returns>与目标服务器的会话。</returns>
        </member>
        <member name="T:Fantasy.AppDefine">
            <summary>
            AppDefine
            </summary>
        </member>
        <member name="F:Fantasy.AppDefine.Options">
            <summary>
            命令行选项
            </summary>
        </member>
        <member name="P:Fantasy.AppDefine.AppId">
            <summary>
            App程序Id
            </summary>
        </member>
        <member name="P:Fantasy.AppDefine.SessionIdleCheckerTimeout">
            <summary>
            会话空闲检查超时时间。
            </summary>
        </member>
        <member name="P:Fantasy.AppDefine.SessionIdleCheckerInterval">
            <summary>
            会话空闲检查间隔。
            </summary>
        </member>
        <member name="P:Fantasy.AppDefine.ConfigTableBinaryDirectory">
            <summary>
            配置表文件夹路径
            </summary>
        </member>
        <member name="F:Fantasy.AppDefine.InnerNetwork">
            <summary>
            内部网络通讯协议类型
            </summary>
        </member>
        <member name="T:Fantasy.AssemblyInfo">
            <summary>
            AssemblyInfo提供有关程序集和类型的信息
            </summary>
        </member>
        <member name="F:Fantasy.AssemblyInfo.AssemblyIdentity">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Fantasy.AssemblyInfo.Assembly">
            <summary>
            获取或设置与此程序集相关联的 <see cref="P:Fantasy.AssemblyInfo.Assembly"/> 实例。
            </summary>
        </member>
        <member name="F:Fantasy.AssemblyInfo.AssemblyTypeList">
            <summary>
            程序集类型集合，获取一个列表，包含从程序集加载的所有类型。
            </summary>
        </member>
        <member name="F:Fantasy.AssemblyInfo.AssemblyTypeGroupList">
            <summary>
            程序集类型分组集合，获取一个分组列表，将接口类型映射到实现这些接口的类型。
            </summary>
        </member>
        <member name="M:Fantasy.AssemblyInfo.#ctor(System.Int64,System.Reflection.Assembly)">
            <summary>
            初始化 <see cref="T:Fantasy.AssemblyInfo"/> 类的新实例。
            </summary>
            <param name="assemblyIdentity"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:Fantasy.AssemblyInfo.Load(System.Reflection.Assembly)">
            <summary>
            从指定的程序集加载类型信息并进行分类。
            </summary>
            <param name="assembly">要加载信息的程序集。</param>
        </member>
        <member name="M:Fantasy.AssemblyInfo.Unload">
            <summary>
            卸载程序集的类型信息。
            </summary>
        </member>
        <member name="T:Fantasy.AssemblySystem">
            <summary>
            管理程序集加载和卸载的帮助类。
            </summary>
        </member>
        <member name="M:Fantasy.AssemblySystem.Initialize(System.Reflection.Assembly[])">
            <summary>
            初始化 AssemblySystem。
            </summary>
        </member>
        <member name="M:Fantasy.AssemblySystem.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            加载指定的程序集，并触发相应的事件。
            </summary>
            <param name="assembly">要加载的程序集。</param>
        </member>
        <member name="M:Fantasy.AssemblySystem.UnLoadAssembly(System.Reflection.Assembly)">
            <summary>
            卸载程序集
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Fantasy.AssemblySystem.Register(System.Object)">
            <summary>
            将AssemblySystem接口的object注册到程序集管理中心
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Fantasy.AssemblySystem.UnRegister(System.Object)">
            <summary>
            程序集管理中心卸载注册的Load、ReLoad、UnLoad的接口
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Fantasy.AssemblySystem.ForEach">
            <summary>
            获取所有已加载程序集中的所有类型。
            </summary>
            <returns>所有已加载程序集中的类型。</returns>
        </member>
        <member name="M:Fantasy.AssemblySystem.ForEach(System.Int64)">
            <summary>
            获取指定程序集中的所有类型。
            </summary>
            <param name="assemblyIdentity">程序集唯一标识。</param>
            <returns>指定程序集中的类型。</returns>
        </member>
        <member name="M:Fantasy.AssemblySystem.ForEach(System.Type)">
            <summary>
            获取所有已加载程序集中实现指定类型的所有类型。
            </summary>
            <param name="findType">要查找的基类或接口类型。</param>
            <returns>所有已加载程序集中实现指定类型的类型。</returns>
        </member>
        <member name="M:Fantasy.AssemblySystem.ForEach(System.Int64,System.Type)">
            <summary>
            获取指定程序集中实现指定类型的所有类型。
            </summary>
            <param name="assemblyIdentity">程序集唯一标识。</param>
            <param name="findType">要查找的基类或接口类型。</param>
            <returns>指定程序集中实现指定类型的类型。</returns>
        </member>
        <member name="M:Fantasy.AssemblySystem.GetAssembly(System.Int64)">
            <summary>
            获取指定程序集的实例。
            </summary>
            <param name="assemblyIdentity">程序集名称。</param>
            <returns>指定程序集的实例，如果未加载则返回 null。</returns>
        </member>
        <member name="M:Fantasy.AssemblySystem.AssemblyIdentity(System.Reflection.Assembly)">
            <summary>
            根据Assembly的强命名计算唯一标识。
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.AssemblySystem.Dispose">
            <summary>
            释放资源，卸载所有加载的程序集。
            </summary>
        </member>
        <member name="T:Fantasy.IAssembly">
            <summary>
            实现这个接口、会再程序集首次加载、卸载、重载的时候调用
            </summary>
        </member>
        <member name="M:Fantasy.IAssembly.Load(System.Int64)">
            <summary>
            程序集加载时调用
            </summary>
            <param name="assemblyIdentity">程序集标识</param>
        </member>
        <member name="M:Fantasy.IAssembly.ReLoad(System.Int64)">
            <summary>
            程序集重新加载的时候调用
            </summary>
            <param name="assemblyIdentity">程序集标识</param>
        </member>
        <member name="M:Fantasy.IAssembly.OnUnLoad(System.Int64)">
            <summary>
            卸载的时候调用
            </summary>
            <param name="assemblyIdentity">程序集标识</param>
        </member>
        <member name="T:Fantasy.ConfigTableHelper">
            <summary>
            配置表帮助类
            </summary>
        </member>
        <member name="M:Fantasy.ConfigTableHelper.Load``1">
            <summary>
            加载配置表数据
            </summary>
            <typeparam name="T">配置表类型</typeparam>
            <returns>配置表数据</returns>
        </member>
        <member name="M:Fantasy.ConfigTableHelper.GetConfigPath(System.String)">
            <summary>
            获取配置表文件路径
            </summary>
            <param name="name">配置表名称</param>
            <returns>配置表文件路径</returns>
        </member>
        <member name="M:Fantasy.ConfigTableHelper.ReLoadConfigTable">
            <summary>
            重新加载配置表数据
            </summary>
        </member>
        <member name="T:Fantasy.IntDictionaryConfig">
            <summary>
            使用 ProtoBuf 序列化的整数字典配置类。
            </summary>
        </member>
        <member name="F:Fantasy.IntDictionaryConfig.Dic">
            <summary>
            使用 ProtoBuf 序列化的字典。
            </summary>
        </member>
        <member name="P:Fantasy.IntDictionaryConfig.Item(System.Int32)">
            <summary>
            获取或设置指定键的整数值。
            </summary>
            <param name="key">键。</param>
            <returns>整数值。</returns>
        </member>
        <member name="M:Fantasy.IntDictionaryConfig.TryGetValue(System.Int32,System.Int32@)">
            <summary>
            尝试获取指定键的整数值。
            </summary>
            <param name="key">键。</param>
            <param name="value">获取到的整数值。</param>
            <returns>如果成功获取到值，则返回 true，否则返回 false。</returns>
        </member>
        <member name="T:Fantasy.StringDictionaryConfig">
            <summary>
            使用 ProtoBuf 序列化的字符串字典配置类。
            </summary>
        </member>
        <member name="F:Fantasy.StringDictionaryConfig.Dic">
            <summary>
            使用 ProtoBuf 序列化的字典。
            </summary>
        </member>
        <member name="P:Fantasy.StringDictionaryConfig.Item(System.Int32)">
            <summary>
            获取或设置指定键的字符串值。
            </summary>
            <param name="key">键。</param>
            <returns>字符串值。</returns>
        </member>
        <member name="M:Fantasy.StringDictionaryConfig.TryGetValue(System.Int32,System.String@)">
            <summary>
            尝试获取指定键的字符串值。
            </summary>
            <param name="key">键。</param>
            <param name="value">获取到的字符串值。</param>
            <returns>如果成功获取到值，则返回 true，否则返回 false。</returns>
        </member>
        <member name="T:Fantasy.IConfigTable">
            <summary>
            表示是一个配置文件
            </summary>
        </member>
        <member name="T:Fantasy.CoroutineLockComponent">
            <summary>
            协程锁组件
            </summary>
        </member>
        <member name="P:Fantasy.CoroutineLockComponent.LockId">
            <summary>
            获取一个锁ID
            </summary>
        </member>
        <member name="M:Fantasy.CoroutineLockComponent.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Fantasy.CoroutineLockComponent.Create(System.Int64)">
            <summary>
            创建一个新的协程锁
            使用这个方法创建的协程锁，需要手动释放CoroutineLockQueueType。
            </summary>
            <param name="coroutineLockType"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.CoroutineLockComponent.Lock(System.Int32,System.Int64,System.String,System.Int32)">
            <summary>
            请求一个协程锁,使用这个方法要注意coroutineLockType的值，不要重复。
            如果保证不了请先使用CoroutineLockComponent.Create创建一个新的协程锁。然后再用Lock传递进去。
            使用这个方法创建的协程锁，会自动释放CoroutineLockQueueType。
            </summary>
            <param name="coroutineLockType">锁类型</param>
            <param name="coroutineLockQueueKey">锁队列Id</param>
            <param name="tag">当某些锁超时，需要一个标记来方便排查问题，正常的情况下这个默认为null就可以。</param>
            <param name="time">设置锁的超时时间，让超过设置的时间会触发超时，保证锁不会因为某一个锁一直不解锁导致卡住的问题。</param>
            <returns>
            返回的WaitCoroutineLock通过Dispose来解除这个锁、建议用using来保住这个锁。
            也可以返回的WaitCoroutineLock通过CoroutineLockComponent.UnLock来解除这个锁。
            </returns>
        </member>
        <member name="M:Fantasy.CoroutineLockComponent.UnLock(Fantasy.CoroutineLockQueue)">
            <summary>
            解除一个协程锁。
            </summary>
            <param name="coroutineLockQueue">锁队列</param>
        </member>
        <member name="M:Fantasy.CoroutineLockComponent.UnLock(System.Int64,System.Int64)">
            <summary>
            解除一个协程锁。
            </summary>
            <param name="coroutineLockType"></param>
            <param name="coroutineLockQueueKey"></param>
        </member>
        <member name="T:Fantasy.CoroutineLockQueue">
            <summary>
            协程锁队列，用于协程等待和释放锁的管理。
            </summary>
        </member>
        <member name="P:Fantasy.CoroutineLockQueue.CoroutineLockType">
            <summary>
            CoroutineLockType
            </summary>
        </member>
        <member name="P:Fantasy.CoroutineLockQueue.CoroutineLockQueueKey">
            <summary>
            获取锁队列的键。
            </summary>
        </member>
        <member name="P:Fantasy.CoroutineLockQueue.CoroutineLockComponent">
            <summary>
            CoroutineLockComponent
            </summary>
        </member>
        <member name="M:Fantasy.CoroutineLockQueue.Create(Fantasy.CoroutineLockComponent,System.Int64,System.Int64)">
            <summary>
            创建一个协程锁队列实例。
            </summary>
            <param name="coroutineLockType">锁的类型</param>
            <param name="coroutineLockQueueKey">锁队列的键。</param>
            <param name="coroutineLockComponent">CoroutineLockComponent。</param>
            <returns>创建的协程锁队列实例。</returns>
        </member>
        <member name="M:Fantasy.CoroutineLockQueue.Dispose">
            <summary>
            释放协程锁队列实例。
            </summary>
        </member>
        <member name="M:Fantasy.CoroutineLockQueue.Lock(System.String,System.Int32)">
            <summary>
            请求协程锁,获取等待协程锁的任务。
            </summary>
            <param name="tag">锁标识。</param>
            <param name="time">等待时间。</param>
            <returns>等待协程锁的任务。</returns>
        </member>
        <member name="M:Fantasy.CoroutineLockQueue.CreateWaitCoroutineLock(System.String,System.Int32)">
            <summary>
            创建一个新的协程锁,前提是这个锁的第一次出现
            </summary>
            <param name="tag">锁标识。</param>
            <param name="time">等待时间。</param>
            <returns>等待协程锁的任务。</returns>
        </member>
        <member name="M:Fantasy.CoroutineLockQueue.Release">
            <summary>
            释放协程锁。
            </summary>
            <returns>是否需要移除CoroutineLockQueue</returns>
        </member>
        <member name="T:Fantasy.CoroutineLockQueueType">
            <summary>
            指定键的协程锁队列类型，用于管理不同类型的协程锁队列。
            </summary>
        </member>
        <member name="M:Fantasy.CoroutineLockQueueType.Create(Fantasy.CoroutineLockComponent,System.Int64)">
            <summary>
            创建一个协程锁队列类型。
            </summary>
            <param name="coroutineLockComponent">CoroutineLockComponent。</param>
            <param name="coroutineLockType">协程锁队列类型的名称。</param>
        </member>
        <member name="M:Fantasy.CoroutineLockQueueType.Lock(System.Int64,System.String,System.Int32)">
            <summary>
            请求协程锁，获取指定键的协程锁。
            </summary>
            <param name="coroutineLockQueueKey">协程锁队列的键。</param>
            <param name="tag">锁标识。</param>
            <param name="time">等待时间。</param>
            <returns>等待协程锁的任务。</returns>
        </member>
        <member name="M:Fantasy.CoroutineLockQueueType.Release(System.Int64)">
            <summary>
            从协程锁队列类型中移除指定键的协程锁队列。
            </summary>
            <param name="coroutineLockQueueKey">要解锁的协程锁队列的键。</param>
            <returns>如果当前锁队列已经是空的就返回True</returns>
        </member>
        <member name="T:Fantasy.CoroutineLockTimeout">
            <summary>
            等待协程锁超时的数据结构
            </summary>
        </member>
        <member name="F:Fantasy.CoroutineLockTimeout.LockId">
            <summary>
            协程锁的唯一标识
            </summary>
        </member>
        <member name="F:Fantasy.CoroutineLockTimeout.WaitCoroutineLock">
            <summary>
            等待的协程锁对象
            </summary>
        </member>
        <member name="T:Fantasy.OnCoroutineLockTimeout">
            <summary>
            协程锁超时时的事件处理类，继承自 EventSystem&lt;CoroutineLockTimeout&gt;
            </summary>
        </member>
        <member name="M:Fantasy.OnCoroutineLockTimeout.Handler(Fantasy.CoroutineLockTimeout)">
            <summary>
            处理协程锁超时时的逻辑
            </summary>
            <param name="self">协程锁超时的信息</param>
        </member>
        <member name="T:Fantasy.WaitCoroutineLock">
            <summary>
            等待协程锁的类，实现了 IDisposable 接口
            </summary>
        </member>
        <member name="F:Fantasy.WaitCoroutineLock._timerId">
            <summary>
            时间任务Id
            </summary>
        </member>
        <member name="P:Fantasy.WaitCoroutineLock.IsDisposed">
            <summary>
            获取当前对象是否已经被释放的标识
            </summary>
        </member>
        <member name="P:Fantasy.WaitCoroutineLock.Tag">
            <summary>
            获取协程锁的标签
            </summary>
        </member>
        <member name="P:Fantasy.WaitCoroutineLock.LockId">
            <summary>
            获取协程锁的唯一标识
            </summary>
        </member>
        <member name="P:Fantasy.WaitCoroutineLock.Tcs">
            <summary>
            获取用于等待协程锁释放的任务
            </summary>
        </member>
        <member name="F:Fantasy.WaitCoroutineLock.CoroutineLockQueue">
            <summary>
            锁当前锁在的队列
            </summary>
        </member>
        <member name="M:Fantasy.WaitCoroutineLock.Dispose">
            <summary>
            释放协程锁对象
            </summary>
        </member>
        <member name="M:Fantasy.WaitCoroutineLock.Create(Fantasy.CoroutineLockQueue,System.String,System.Int32)">
            <summary>
            创建一个等待协程锁对象
            </summary>
            <param name="coroutineLockQueue">协程锁队列</param>
            <param name="tag">协程锁标签</param>
            <param name="timeOut">超时时间（毫秒）</param>
            <returns>等待协程锁对象</returns>
        </member>
        <member name="M:Fantasy.WaitCoroutineLock.SetResult">
            <summary>
            设置等待协程锁的任务结果
            </summary>
        </member>
        <member name="T:Fantasy.IDateBase">
            <summary>
            表示用于执行各种数据库操作的数据库接口。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Initialize(Fantasy.Scene,System.String,System.String)">
            <summary>
            初始化数据库连接。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Count``1(System.String)">
            <summary>
            在指定的集合中检索类型 <typeparamref name="T"/> 的实体数量。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            在指定的集合中检索满足给定筛选条件的类型 <typeparamref name="T"/> 的实体数量。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Exist``1(System.String)">
            <summary>
            检查指定集合中是否存在类型 <typeparamref name="T"/> 的实体。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Exist``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            检查指定集合中是否存在满足给定筛选条件的类型 <typeparamref name="T"/> 的实体。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.QueryNotLock``1(System.Int64,System.String)">
            <summary>
            从指定集合中检索指定 ID 的类型 <typeparamref name="T"/> 的实体，不锁定。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Query``1(System.Int64,System.String)">
            <summary>
            从指定集合中检索指定 ID 的类型 <typeparamref name="T"/> 的实体。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.QueryCountAndDatesByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String)">
            <summary>
            按页查询满足给定筛选条件的类型 <typeparamref name="T"/> 的实体数量和日期。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.QueryCountAndDatesByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String[],System.String)">
            <summary>
            按页查询满足给定筛选条件的类型 <typeparamref name="T"/> 的实体数量和日期。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.QueryByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String)">
            <summary>
            分页查询指定集合中满足给定筛选条件的类型 <typeparamref name="T"/> 的实体列表。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.QueryByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String[],System.String)">
            <summary>
            分页查询指定集合中满足给定筛选条件的类型 <typeparamref name="T"/> 的实体列表，仅返回指定列的数据。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.QueryByPageOrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.String)">
            <summary>
            从指定集合中按页查询满足给定筛选条件的类型 <typeparamref name="T"/> 的实体列表，按指定字段排序。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.First``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            检索满足给定筛选条件的类型 <typeparamref name="T"/> 的第一个实体，从指定集合中。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.First``1(System.String,System.String[],System.String)">
            <summary>
            查询指定集合中满足给定 JSON 查询字符串的类型 <typeparamref name="T"/> 的第一个实体，仅返回指定列的数据。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.QueryOrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.String)">
            <summary>
            从指定集合中按页查询满足给定筛选条件的类型 <typeparamref name="T"/> 的实体列表，按指定字段排序。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            从指定集合中按页查询满足给定筛选条件的类型 <typeparamref name="T"/> 的实体列表。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Query(System.Int64,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Fantasy.Entity})">
            <summary>
            查询指定 ID 的多个集合，将结果存储在给定的实体列表中。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.QueryJson``1(System.String,System.String)">
            <summary>
            根据给定的 JSON 查询字符串查询指定集合中的类型 <typeparamref name="T"/> 实体列表。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.QueryJson``1(System.String,System.String[],System.String)">
            <summary>
            根据给定的 JSON 查询字符串查询指定集合中的类型 <typeparamref name="T"/> 实体列表，仅返回指定列的数据。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.QueryJson``1(System.Int64,System.String,System.String)">
            <summary>
            根据给定的 JSON 查询字符串查询指定集合中的类型 <typeparamref name="T"/> 实体列表，通过指定的任务 ID 进行标识。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[],System.String)">
            <summary>
            查询指定集合中满足给定筛选条件的类型 <typeparamref name="T"/> 实体列表，仅返回指定列的数据。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Save``1(``0,System.String)">
            <summary>
            保存类型 <typeparamref name="T"/> 实体到指定集合中，如果集合不存在将自动创建。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Save(System.Int64,System.Collections.Generic.List{Fantasy.Entity})">
            <summary>
            保存一组实体到数据库中，根据实体列表的 ID 进行区分和存储。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Save``1(System.Object,``0,System.String)">
            <summary>
            通过事务会话将类型 <typeparamref name="T"/> 实体保存到指定集合中，如果集合不存在将自动创建。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Insert``1(``0,System.String)">
            <summary>
            向指定集合中插入一个类型 <typeparamref name="T"/> 实体，如果集合不存在将自动创建。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.InsertBatch``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            批量插入一组类型 <typeparamref name="T"/> 实体到指定集合中，如果集合不存在将自动创建。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.InsertBatch``1(System.Object,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            通过事务会话，批量插入一组类型 <typeparamref name="T"/> 实体到指定集合中，如果集合不存在将自动创建。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Remove``1(System.Object,System.Int64,System.String)">
            <summary>
            通过事务会话，根据指定的 ID 从数据库中删除指定类型 <typeparamref name="T"/> 实体。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Remove``1(System.Int64,System.String)">
            <summary>
            根据指定的 ID 从数据库中删除指定类型 <typeparamref name="T"/> 实体。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Remove``1(System.Int64,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            通过事务会话，根据给定的筛选条件和 ID 从数据库中删除指定类型 <typeparamref name="T"/> 实体。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Remove``1(System.Int64,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            根据给定的筛选条件和 ID 从数据库中删除指定类型 <typeparamref name="T"/> 实体。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            根据给定的筛选条件计算指定集合中类型 <typeparamref name="T"/> 实体某个属性的总和。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.CreateIndex``1(System.String,System.Object[])">
            <summary>
            在指定的集合中创建索引，以提高类型 <typeparamref name="T"/> 实体的查询性能。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.CreateIndex``1(System.Object[])">
            <summary>
            在默认集合中创建索引，以提高类型 <typeparamref name="T"/> 实体的查询性能。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.CreateDB``1">
            <summary>
            创建指定类型 <typeparamref name="T"/> 的数据库，用于存储实体。
            </summary>
        </member>
        <member name="M:Fantasy.IDateBase.CreateDB(System.Type)">
            <summary>
            根据指定类型创建数据库，用于存储实体。
            </summary>
        </member>
        <member name="T:Fantasy.World">
            <summary>
            表示一个游戏世界。
            </summary>
        </member>
        <member name="P:Fantasy.World.Id">
            <summary>
            获取游戏世界的唯一标识。
            </summary>
        </member>
        <member name="P:Fantasy.World.DateBase">
            <summary>
            获取游戏世界的数据库接口。
            </summary>
        </member>
        <member name="P:Fantasy.World.Config">
            <summary>
            获取游戏世界的配置信息。
            </summary>
        </member>
        <member name="F:Fantasy.World.Worlds">
            <summary>
            用于存储已创建的游戏世界实例
            </summary>
        </member>
        <member name="M:Fantasy.World.#ctor(Fantasy.Scene,System.UInt32)">
            <summary>
            使用指定的配置信息创建一个游戏世界实例。
            </summary>
            <param name="scene"></param>
            <param name="worldConfigId"></param>
        </member>
        <member name="M:Fantasy.World.Create(Fantasy.Scene,System.UInt32)">
            <summary>
            创建一个指定唯一标识的游戏世界实例。
            </summary>
            <param name="scene"></param>
            <param name="id">游戏世界的唯一标识。</param>
            <returns>游戏世界实例。</returns>
        </member>
        <member name="T:Fantasy.MongoDataBase">
            <summary>
            使用 MongoDB 数据库的实现。
            </summary>
        </member>
        <member name="M:Fantasy.MongoDataBase.Initialize(Fantasy.Scene,System.String,System.String)">
            <summary>
            初始化 MongoDB 数据库连接并记录所有集合名。
            </summary>
            <param name="scene">所在的Scene。</param>
            <param name="connectionString">数据库连接字符串。</param>
            <param name="dbName">数据库名称。</param>
            <returns>初始化后的数据库实例。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            对满足条件的文档中的某个数值字段进行求和操作。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="filter">用于筛选文档的表达式。</param>
            <param name="sumExpression">要对其进行求和的字段表达式。</param>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>满足条件的文档中指定字段的求和结果。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.GetCollection``1(System.String)">
            <summary>
            获取指定集合中的 MongoDB 文档的 IMongoCollection 对象。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>IMongoCollection 对象。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.GetCollection(System.String)">
            <summary>
            获取指定集合中的 MongoDB 文档的 IMongoCollection 对象，其中实体类型为 Entity。
            </summary>
            <param name="name">集合名称。</param>
            <returns>IMongoCollection 对象。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Count``1(System.String)">
            <summary>
            统计指定集合中满足条件的文档数量。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>满足条件的文档数量。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            统计指定集合中满足条件的文档数量。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="filter">用于筛选文档的表达式。</param>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>满足条件的文档数量。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Exist``1(System.String)">
            <summary>
            判断指定集合中是否存在文档。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>如果存在文档则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Exist``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            判断指定集合中是否存在满足条件的文档。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="filter">用于筛选文档的表达式。</param>
            <param name="collection">集合名称，可选。如果未指定，将使用实体类型的名称。</param>
            <returns>如果存在满足条件的文档则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.QueryNotLock``1(System.Int64,System.String)">
            <summary>
            在不加数据库锁定的情况下，查询指定 ID 的文档。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="id">要查询的文档 ID。</param>
            <param name="collection">集合名称。</param>
            <returns>查询到的文档。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Query``1(System.Int64,System.String)">
            <summary>
            查询指定 ID 的文档，并加数据库锁定以确保数据一致性。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="id">要查询的文档 ID。</param>
            <param name="collection">集合名称。</param>
            <returns>查询到的文档。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.QueryCountAndDatesByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String)">
            <summary>
            通过分页查询并返回满足条件的文档数量和日期列表（不加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">每页大小。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档数量和日期列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.QueryCountAndDatesByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String[],System.String)">
            <summary>
            通过分页查询并返回满足条件的文档数量和日期列表（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">每页大小。</param>
            <param name="cols">要查询的列名称数组。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档数量和日期列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.QueryByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String)">
            <summary>
            通过分页查询并返回满足条件的文档列表（不加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">每页大小。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.QueryByPage``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.String[],System.String)">
            <summary>
            通过分页查询并返回满足条件的文档列表（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">每页大小。</param>
            <param name="cols">要查询的列名称数组。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.QueryByPageOrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.String)">
            <summary>
            通过分页查询并返回满足条件的文档列表，并按指定表达式进行排序（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">每页大小。</param>
            <param name="orderByExpression">排序表达式。</param>
            <param name="isAsc">是否升序排序。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.First``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            通过指定过滤条件查询并返回满足条件的第一个文档（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的第一个文档，如果未找到则为 null。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.First``1(System.String,System.String[],System.String)">
            <summary>
            通过指定 JSON 格式查询并返回满足条件的第一个文档（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="json">JSON 查询条件。</param>
            <param name="cols">要查询的列名称数组。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的第一个文档。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.QueryOrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.String)">
            <summary>
            通过指定过滤条件查询并返回满足条件的文档列表，并按指定表达式进行排序（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="orderByExpression">排序表达式。</param>
            <param name="isAsc">是否升序排序。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            通过指定过滤条件查询并返回满足条件的文档列表（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Query(System.Int64,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Fantasy.Entity})">
            <summary>
            根据指定 ID 加锁查询多个集合中的文档。
            </summary>
            <param name="id">文档 ID。</param>
            <param name="collectionNames">要查询的集合名称列表。</param>
            <param name="result">查询结果存储列表。</param>
        </member>
        <member name="M:Fantasy.MongoDataBase.QueryJson``1(System.String,System.String)">
            <summary>
            根据指定的 JSON 查询条件查询并返回满足条件的文档列表（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="json">JSON 查询条件。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.QueryJson``1(System.String,System.String[],System.String)">
            <summary>
            根据指定的 JSON 查询条件查询并返回满足条件的文档列表，并选择指定的列（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="json">JSON 查询条件。</param>
            <param name="cols">要查询的列名称数组。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.QueryJson``1(System.Int64,System.String,System.String)">
            <summary>
            根据指定的 JSON 查询条件和任务 ID 查询并返回满足条件的文档列表（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="taskId">任务 ID。</param>
            <param name="json">JSON 查询条件。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String[],System.String)">
            <summary>
            根据指定过滤条件查询并返回满足条件的文档列表，选择指定的列（加锁）。
            </summary>
            <typeparam name="T">文档实体类型。</typeparam>
            <param name="filter">查询过滤条件。</param>
            <param name="cols">要查询的列名称数组。</param>
            <param name="collection">集合名称。</param>
            <returns>满足条件的文档列表。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Save``1(System.Object,``0,System.String)">
            <summary>
            保存实体对象到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="transactionSession">事务会话对象。</param>
            <param name="entity">要保存的实体对象。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.MongoDataBase.Save``1(``0,System.String)">
            <summary>
            保存实体对象到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="entity">要保存的实体对象。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.MongoDataBase.SaveBase``1(``0,System.String)">
            <summary>
            保存实体对象到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="entity">要保存的实体对象。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.MongoDataBase.Save(System.Int64,System.Collections.Generic.List{Fantasy.Entity})">
            <summary>
            保存多个实体对象到数据库（加锁）。
            </summary>
            <param name="id">文档 ID。</param>
            <param name="entities">要保存的实体对象列表。</param>
        </member>
        <member name="M:Fantasy.MongoDataBase.Insert``1(``0,System.String)">
            <summary>
            插入单个实体对象到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="entity">要插入的实体对象。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.MongoDataBase.InsertBatch``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            批量插入实体对象列表到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="list">要插入的实体对象列表。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.MongoDataBase.InsertBatch``1(System.Object,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            批量插入实体对象列表到数据库（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="transactionSession">事务会话对象。</param>
            <param name="list">要插入的实体对象列表。</param>
            <param name="collection">集合名称。</param>
        </member>
        <member name="M:Fantasy.MongoDataBase.Remove``1(System.Object,System.Int64,System.String)">
            <summary>
            根据ID删除单个实体对象（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="transactionSession">事务会话对象。</param>
            <param name="id">要删除的实体的ID。</param>
            <param name="collection">集合名称。</param>
            <returns>删除的实体数量。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Remove``1(System.Int64,System.String)">
            <summary>
            根据ID删除单个实体对象（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="id">要删除的实体的ID。</param>
            <param name="collection">集合名称。</param>
            <returns>删除的实体数量。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Remove``1(System.Int64,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            根据ID和筛选条件删除多个实体对象（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="id">要删除的实体的ID。</param>
            <param name="transactionSession">事务会话对象。</param>
            <param name="filter">筛选条件。</param>
            <param name="collection">集合名称。</param>
            <returns>删除的实体数量。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.Remove``1(System.Int64,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            根据ID和筛选条件删除多个实体对象（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="id">要删除的实体的ID。</param>
            <param name="filter">筛选条件。</param>
            <param name="collection">集合名称。</param>
            <returns>删除的实体数量。</returns>
        </member>
        <member name="M:Fantasy.MongoDataBase.CreateIndex``1(System.String,System.Object[])">
            <summary>
            创建数据库索引（加锁）。
            </summary>
            <param name="collection"></param>
            <param name="keys"></param>
            <typeparam name="T"></typeparam>
            <code>
            使用例子(可多个):
            1 : Builders.IndexKeys.Ascending(d=>d.Id)
            2 : Builders.IndexKeys.Descending(d=>d.Id).Ascending(d=>d.Name)
            3 : Builders.IndexKeys.Descending(d=>d.Id),Builders.IndexKeys.Descending(d=>d.Name)
            </code>
        </member>
        <member name="M:Fantasy.MongoDataBase.CreateIndex``1(System.Object[])">
            <summary>
            创建数据库的索引（加锁）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="keys">索引键定义。</param>
        </member>
        <member name="M:Fantasy.MongoDataBase.CreateDB``1">
            <summary>
            创建数据库集合（如果不存在）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
        </member>
        <member name="M:Fantasy.MongoDataBase.CreateDB(System.Type)">
            <summary>
            创建数据库集合（如果不存在）。
            </summary>
            <param name="type">实体类型。</param>
        </member>
        <member name="T:Fantasy.CircularBuffer">
            环形缓存（自增式缓存，自动扩充、不会收缩缓存、所以不要用这个操作过大的IO流）
            1、环大小8192，溢出的会自动增加环的大小。
            2、每个块都是一个环形缓存，当溢出的时候会自动添加到下一个环中。
            3、当读取完成后用过的环会放在缓存中，不会销毁掉。
            <summary>
            自增式缓存类，继承自 Stream 和 IDisposable 接口。
            环形缓存具有自动扩充的特性，但不会收缩，适用于操作不过大的 IO 流。
            </summary>
        </member>
        <member name="F:Fantasy.CircularBuffer.ChunkSize">
            <summary>
            环形缓存块的默认大小
            </summary>
        </member>
        <member name="P:Fantasy.CircularBuffer.FirstIndex">
            <summary>
            获取或设置环形缓存的第一个索引位置
            </summary>
        </member>
        <member name="P:Fantasy.CircularBuffer.LastIndex">
            <summary>
            获取或设置环形缓存的最后一个索引位置
            </summary>
        </member>
        <member name="P:Fantasy.CircularBuffer.Length">
            <summary>
            获取环形缓存的总长度
            </summary>
        </member>
        <member name="P:Fantasy.CircularBuffer.First">
            <summary>
            获取环形缓存的第一个块
            </summary>
        </member>
        <member name="P:Fantasy.CircularBuffer.Last">
            <summary>
            获取环形缓存的最后一个块
            </summary>
        </member>
        <member name="M:Fantasy.CircularBuffer.AddLast">
            <summary>
            向环形缓存中添加一个新的块
            </summary>
        </member>
        <member name="M:Fantasy.CircularBuffer.RemoveFirst">
            <summary>
            从环形缓存中移除第一个块
            </summary>
        </member>
        <member name="M:Fantasy.CircularBuffer.Read(System.IO.Stream,System.Int32)">
            <summary>
            从流中读取指定数量的数据到缓存。
            </summary>
            <param name="stream">源数据流。</param>
            <param name="count">要读取的字节数。</param>
        </member>
        <member name="M:Fantasy.CircularBuffer.Read(System.Memory{System.Byte},System.Int32)">
            <summary>
            从缓存中读取指定数量的数据到内存。
            </summary>
            <param name="memory">目标内存。</param>
            <param name="count">要读取的字节数。</param>
        </member>
        <member name="M:Fantasy.CircularBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从自定义流中读取数据到指定的缓冲区。
            </summary>
            <param name="buffer">目标缓冲区，用于存储读取的数据。</param>
            <param name="offset">目标缓冲区中的起始偏移量。</param>
            <param name="count">要读取的字节数。</param>
            <returns>实际读取的字节数。</returns>
        </member>
        <member name="M:Fantasy.CircularBuffer.Write(System.Byte[])">
            <summary>
            将数据从给定的字节数组写入流中。
            </summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
        </member>
        <member name="M:Fantasy.CircularBuffer.Write(System.IO.Stream)">
            <summary>
            将数据从给定的流写入流中。
            </summary>
            <param name="stream">包含要写入的数据的流。</param>
        </member>
        <member name="M:Fantasy.CircularBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将数据从给定的字节数组写入流中。
            </summary>
            <param name="buffer">包含要写入的数据的字节数组。</param>
            <param name="offset">开始写入的缓冲区中的索引。</param>
            <param name="count">要写入的字节数。</param>
        </member>
        <member name="P:Fantasy.CircularBuffer.CanRead">
            <summary>
            获取一个值，指示流是否支持读取操作。
            </summary>
        </member>
        <member name="P:Fantasy.CircularBuffer.CanSeek">
            <summary>
            获取一个值，指示流是否支持寻找操作。
            </summary>
        </member>
        <member name="P:Fantasy.CircularBuffer.CanWrite">
            <summary>
            获取一个值，指示流是否支持写入操作。
            </summary>
        </member>
        <member name="P:Fantasy.CircularBuffer.Position">
            <summary>
            获取或设置流中的位置。
            </summary>
        </member>
        <member name="M:Fantasy.CircularBuffer.Flush">
            <summary>
            刷新流（在此实现中引发未实现异常）。
            </summary>
        </member>
        <member name="M:Fantasy.CircularBuffer.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            在流中寻找特定位置（在此实现中引发未实现异常）。
            </summary>
        </member>
        <member name="M:Fantasy.CircularBuffer.SetLength(System.Int64)">
            <summary>
            设置流的长度（在此实现中引发未实现异常）。
            </summary>
        </member>
        <member name="M:Fantasy.CircularBuffer.Dispose">
            <summary>
            释放 CustomStream 使用的所有资源。
            </summary>
        </member>
        <member name="T:Fantasy.ConcurrentOneToManyListPool`2">
            <summary>
            并发的一对多列表池，用于维护具有相同键的多个值的关联关系，实现了 <see cref="T:System.IDisposable"/> 接口。
            </summary>
            <typeparam name="TKey">关键字的类型，不能为空。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.ConcurrentOneToManyListPool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyListPool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.ConcurrentOneToManyListPool`2"/> 的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyListPool`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="T:Fantasy.ConcurrentOneToManyList`2">
            <summary>
            并发的一对多列表，用于维护具有相同键的多个值的关联关系。
            </summary>
            <typeparam name="TKey">关键字的类型，不能为空。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyList`2.#ctor">
            <summary>
            初始化 <see cref="T:Fantasy.ConcurrentOneToManyList`2"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyList`2.#ctor(System.Int32)">
            <summary>
            设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyList`2.Contains(`0,`1)">
            <summary>
            判断指定键的列表是否包含指定值。
            </summary>
            <param name="key">要搜索的键。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果列表包含值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyList`2.Add(`0,`1)">
            <summary>
            向指定键的列表中添加一个值。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyList`2.First(`0)">
            <summary>
            获取指定键的列表中的第一个值。
            </summary>
            <param name="key">要获取第一个值的键。</param>
            <returns>指定键的列表中的第一个值，如果不存在则为默认值。</returns>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyList`2.RemoveValue(`0,`1)">
            <summary>
            从指定键的列表中移除一个值。
            </summary>
            <param name="key">要移除值的键。</param>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyList`2.RemoveKey(`0)">
            <summary>
            从字典中移除指定键以及其关联的列表。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyList`2.Fetch">
            <summary>
            从队列中获取一个列表，如果队列为空则创建一个新的列表。
            </summary>
            <returns>获取的列表。</returns>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyList`2.Recycle(System.Collections.Generic.List{`1})">
            <summary>
            将一个列表回收到队列中。
            </summary>
            <param name="list">要回收的列表。</param>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyList`2.Clear">
            <summary>
            清空当前类的数据，包括从基类继承的数据以及自定义的数据队列。
            </summary>
        </member>
        <member name="T:Fantasy.ConcurrentOneToManyQueuePool`2">
            <summary>
            表示一个并发的一对多队列池，用于维护具有相同键的多个值的关联关系，实现了 <see cref="T:System.IDisposable"/> 接口。
            </summary>
            <typeparam name="TKey">关键字的类型，不能为空。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.ConcurrentOneToManyQueuePool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueuePool`2.Create">
            <summary>
            创建并返回一个 <see cref="T:Fantasy.ConcurrentOneToManyQueuePool`2"/> 的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueuePool`2.Dispose">
            <summary>
            释放当前实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="T:Fantasy.ConcurrentOneToManyQueue`2">
            <summary>
            表示一个并发的一对多队列，用于维护具有相同键的多个值的关联关系。
            </summary>
            <typeparam name="TKey">关键字的类型，不能为空。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueue`2.#ctor(System.Int32)">
            <summary>
            设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueue`2.Contains(`0,`1)">
            <summary>
            判断指定键的队列是否包含指定值。
            </summary>
            <param name="key">要搜索的键。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果队列包含值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueue`2.Enqueue(`0,`1)">
            <summary>
            向指定键的队列中添加一个值。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueue`2.Dequeue(`0)">
            <summary>
            从指定键的队列中出队并返回一个值。
            </summary>
            <param name="key">要出队的键。</param>
            <returns>出队的值，如果队列为空则为默认值。</returns>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueue`2.TryDequeue(`0,`1@)">
            <summary>
            尝试从指定键的队列中出队一个值。
            </summary>
            <param name="key">要出队的键。</param>
            <param name="value">出队的值，如果队列为空则为默认值。</param>
            <returns>如果成功出队，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueue`2.RemoveKey(`0)">
            <summary>
            从字典中移除指定键以及其关联的队列。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueue`2.Fetch">
            <summary>
            从队列中获取一个新的队列，如果队列为空则创建一个新的队列。
            </summary>
            <returns>获取的队列。</returns>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueue`2.Recycle(System.Collections.Generic.Queue{`1})">
            <summary>
            将一个队列回收到队列池中。
            </summary>
            <param name="list">要回收的队列。</param>
        </member>
        <member name="M:Fantasy.ConcurrentOneToManyQueue`2.Clear">
            <summary>
            清空当前类的数据，包括从基类继承的键值对字典中的数据以及自定义的队列池。
            </summary>
        </member>
        <member name="T:Fantasy.EntityList`1">
            <summary>
            实体对象列表，继承自 List&lt;T&gt;，并实现 IDisposable 接口，用于创建和管理实体对象的集合。
            </summary>
            <typeparam name="T">实体对象的类型。</typeparam>
        </member>
        <member name="P:Fantasy.EntityList`1.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.EntityList`1.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.EntityList`1"/> 实体对象列表的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.EntityList`1.Clear">
            <summary>
            清空列表，并释放所有实体对象的资源。
            </summary>
        </member>
        <member name="M:Fantasy.EntityList`1.ClearNotDispose">
            <summary>
            清空列表，但不释放实体对象的资源。
            </summary>
        </member>
        <member name="M:Fantasy.EntityList`1.Dispose">
            <summary>
            释放实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="T:Fantasy.HashSetPool`1">
            <summary>
            可释放的哈希集合对象池。
            </summary>
            <typeparam name="T">哈希集合中元素的类型。</typeparam>
        </member>
        <member name="P:Fantasy.HashSetPool`1.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.HashSetPool`1.Dispose">
            <summary>
            释放实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="M:Fantasy.HashSetPool`1.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.HashSetPool`1"/> 哈希集合池的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="T:Fantasy.HashSetBasePool`1">
            <summary>
            基本哈希集合对象池，他自持有实际的哈希集合。
            </summary>
            <typeparam name="T">哈希集合中元素的类型。</typeparam>
        </member>
        <member name="P:Fantasy.HashSetBasePool`1.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="F:Fantasy.HashSetBasePool`1.Set">
            <summary>
            存储实际的哈希集合
            </summary>
        </member>
        <member name="M:Fantasy.HashSetBasePool`1.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.HashSetBasePool`1"/> 基本哈希集合对象池的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.HashSetBasePool`1.Dispose">
            <summary>
            释放实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="T:Fantasy.ListPool`1">
            <summary>
            可释放的列表（List）对象池。
            </summary>
            <typeparam name="T">列表中元素的类型。</typeparam>
        </member>
        <member name="P:Fantasy.ListPool`1.IsPool">
            <summary>
            获取或设置一个值，该值指示当前实例是否为对象池中的实例。
            </summary>
        </member>
        <member name="M:Fantasy.ListPool`1.Dispose">
            <summary>
            释放实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="M:Fantasy.ListPool`1.Create(`0[])">
            <summary>
            使用指定的元素创建一个 <see cref="T:Fantasy.ListPool`1"/> 列表（List）对象池的实例。
            </summary>
            <param name="args">要添加到列表的元素。</param>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.ListPool`1.Create(System.Collections.Generic.List{`0})">
            <summary>
            使用指定的列表创建一个 <see cref="T:Fantasy.ListPool`1"/> 列表（List）对象池的实例。
            </summary>
            <param name="args">要添加到列表的元素列表。</param>
            <returns>创建的实例。</returns>
        </member>
        <member name="T:Fantasy.OneToManyHashSetPool`2">
            <summary>
            一对多哈希集合（OneToManyHashSet）对象池。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.OneToManyHashSetPool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.OneToManyHashSetPool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.OneToManyHashSetPool`2"/> 一对多哈希集合（OneToManyHashSet）对象池的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.OneToManyHashSetPool`2.Dispose">
            <summary>
            释放实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="T:Fantasy.OneToManyHashSet`2">
            <summary>
            一对多哈希集合（OneToManyHashSet），用于创建和管理键对应多个值的集合。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="F:Fantasy.OneToManyHashSet`2._queue">
            用于回收和重用的空闲值集合队列。
        </member>
        <member name="F:Fantasy.OneToManyHashSet`2._recyclingLimit">
            设置最大回收限制，用于控制值集合的最大数量。
        </member>
        <member name="F:Fantasy.OneToManyHashSet`2._empty">
            一个空的、不包含任何元素的哈希集合，用于在查找失败时返回。
        </member>
        <member name="M:Fantasy.OneToManyHashSet`2.#ctor">
            <summary>
            初始化 <see cref="T:Fantasy.OneToManyHashSet`2"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fantasy.OneToManyHashSet`2.#ctor(System.Int32)">
            <summary>
            设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
                1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
                2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.OneToManyHashSet`2.Contains(`0,`1)">
            <summary>
            判断指定的键值对是否存在于集合中。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
            <returns>如果存在则为 true，否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManyHashSet`2.Add(`0,`1)">
            <summary>
            添加指定的键值对到集合中。
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Fantasy.OneToManyHashSet`2.RemoveValue(`0,`1)">
            <summary>
            从集合中移除指定键对应的值。
            </summary>
            <param name="key">键。</param>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.OneToManyHashSet`2.RemoveKey(`0)">
            <summary>
            从集合中移除指定键及其对应的值集合。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="M:Fantasy.OneToManyHashSet`2.GetValue(`0)">
            <summary>
            获取指定键对应的值集合，如果不存在则返回一个空的哈希集合。
            </summary>
            <param name="key">键。</param>
            <returns>对应的值集合或空的哈希集合。</returns>
        </member>
        <member name="M:Fantasy.OneToManyHashSet`2.Fetch">
            <summary>
            从队列中获取一个空闲的值集合，或者创建一个新的。
            </summary>
            <returns>值集合。</returns>
        </member>
        <member name="M:Fantasy.OneToManyHashSet`2.Recycle(System.Collections.Generic.HashSet{`1})">
            <summary>
            回收值集合到队列中，以便重复利用。
            </summary>
            <param name="list">要回收的值集合。</param>
        </member>
        <member name="M:Fantasy.OneToManyHashSet`2.Clear">
            <summary>
            清空集合中的数据并和队列。
            </summary>
        </member>
        <member name="T:Fantasy.OneToManyListPool`2">
            <summary>
            可回收的、一对多关系的列表池。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.OneToManyListPool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.OneToManyListPool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.OneToManyListPool`2"/> 一对多关系的列表池的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.OneToManyListPool`2.Dispose">
            <summary>
            释放当前对象所占用的资源，并将对象回收到对象池中。
            </summary>
        </member>
        <member name="T:Fantasy.OneToManyList`2">
            <summary>
            一对多关系的列表字典。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.OneToManyList`2.#ctor">
            <summary>
            初始化一个新的 <see cref="T:Fantasy.OneToManyList`2"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.OneToManyList`2.#ctor(System.Int32)">
            <summary>
            设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.OneToManyList`2.Contains(`0,`1)">
            <summary>
            判断给定的键和值是否存在于列表中。
            </summary>
            <param name="key">要搜索的键。</param>
            <param name="value">要搜索的值。</param>
            <returns>如果存在则为 <see langword="true"/>，否则为 <see langword="false"/>。</returns>
        </member>
        <member name="M:Fantasy.OneToManyList`2.Add(`0,`1)">
            <summary>
            向列表中添加指定键和值。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.OneToManyList`2.First(`0)">
            <summary>
            获取指定键对应的列表中的第一个值。
            </summary>
            <param name="key">要获取值的键。</param>
            <returns>键对应的列表中的第一个值。</returns>
        </member>
        <member name="M:Fantasy.OneToManyList`2.RemoveValue(`0,`1)">
            <summary>
            从列表中移除指定键和值。
            </summary>
            <param name="key">要移除值的键。</param>
            <param name="value">要移除的值。</param>
            <returns>如果成功移除则为 <see langword="true"/>，否则为 <see langword="false"/>。</returns>
        </member>
        <member name="M:Fantasy.OneToManyList`2.RemoveByKey(`0)">
            <summary>
            从列表中移除指定键及其关联的所有值。
            </summary>
            <param name="key">要移除的键。</param>
            <returns>如果成功移除则为 <see langword="true"/>，否则为 <see langword="false"/>。</returns>
        </member>
        <member name="M:Fantasy.OneToManyList`2.GetValues(`0)">
            <summary>
            获取指定键关联的所有值的列表。
            </summary>
            <param name="key">要获取值的键。</param>
            <returns>键关联的所有值的列表。</returns>
        </member>
        <member name="M:Fantasy.OneToManyList`2.Clear">
            <summary>
            清除字典中的所有键值对，并回收相关的值集合。
            </summary>
        </member>
        <member name="M:Fantasy.OneToManyList`2.Fetch">
            <summary>
            从空闲值集合队列中获取一个值集合，如果队列为空则创建一个新的值集合。
            </summary>
            <returns>从队列中获取的值集合。</returns>
        </member>
        <member name="M:Fantasy.OneToManyList`2.Recycle(System.Collections.Generic.List{`1})">
            <summary>
            回收一个不再使用的值集合到空闲值集合队列中。
            </summary>
            <param name="list">要回收的值集合。</param>
        </member>
        <member name="T:Fantasy.OneToManyQueuePool`2">
            <summary>
            支持一对多关系的队列池，用于存储具有相同键的值的队列集合。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.OneToManyQueuePool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.OneToManyQueuePool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.OneToManyQueuePool`2"/> 一对多关系的队列池的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.OneToManyQueuePool`2.Dispose">
            <summary>
            释放当前实例所占用的资源，并将实例回收到对象池中。
            </summary>
        </member>
        <member name="T:Fantasy.OneToManyQueue`2">
            <summary>
            支持一对多关系的队列，用于存储具有相同键的值的队列集合。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.OneToManyQueue`2.#ctor(System.Int32)">
            <summary>
            创建一个 <see cref="T:Fantasy.OneToManyQueue`2"/> 一对多关系的队列的实例。设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.OneToManyQueue`2.Contains(`0,`1)">
            <summary>
            判断指定键的值队列是否包含指定的值。
            </summary>
            <param name="key">要查找的键。</param>
            <param name="value">要查找的值。</param>
            <returns>如果存在，则为 <c>true</c>；否则为 <c>false</c>。</returns>
        </member>
        <member name="M:Fantasy.OneToManyQueue`2.Enqueue(`0,`1)">
            <summary>
            将指定的值添加到指定键的值队列中。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.OneToManyQueue`2.Dequeue(`0)">
            <summary>
            从指定键的值队列中出队一个值。
            </summary>
            <param name="key">要出队的键。</param>
            <returns>出队的值。</returns>
        </member>
        <member name="M:Fantasy.OneToManyQueue`2.TryDequeue(`0,`1@)">
            <summary>
            尝试从指定键的值队列中出队一个值。
            </summary>
            <param name="key">要出队的键。</param>
            <param name="value">出队的值。</param>
            <returns>如果成功出队，则为 <c>true</c>；否则为 <c>false</c>。</returns>
        </member>
        <member name="M:Fantasy.OneToManyQueue`2.RemoveKey(`0)">
            <summary>
            从字典中移除指定键及其对应的值队列。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.OneToManyQueue`2.Fetch">
            <summary>
            从队列池中获取一个值队列。如果队列池为空，则创建一个新的值队列。
            </summary>
            <returns>获取的值队列。</returns>
        </member>
        <member name="M:Fantasy.OneToManyQueue`2.Recycle(System.Collections.Generic.Queue{`1})">
            <summary>
            回收一个不再使用的值队列到队列池中，以便重用。
            </summary>
            <param name="list">要回收的值队列。</param>
        </member>
        <member name="M:Fantasy.OneToManyQueue`2.Clear">
            <summary>
            清空当前实例的数据，同时回收所有值队列。
            </summary>
        </member>
        <member name="T:Fantasy.ReuseList`1">
            <summary>
            可重用的列表，继承自 <see cref="T:System.Collections.Generic.List`1"/> 类。该类支持通过对象池重用列表实例，以减少对象分配和释放的开销。
            </summary>
            <typeparam name="T">列表中元素的类型。</typeparam>
        </member>
        <member name="P:Fantasy.ReuseList`1.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.ReuseList`1.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.ReuseList`1"/> 可重用的列表的实例。
            </summary>
            <returns>创建的实例。</returns>
        </member>
        <member name="M:Fantasy.ReuseList`1.Dispose">
            <summary>
            释放该实例所占用的资源，并将实例返回到对象池中，以便重用。
            </summary>
        </member>
        <member name="T:Fantasy.SortedConcurrentOneToManyListPool`2">
            <summary>
            基于排序字典和并发集合实现的一对多映射列表的对象池包装类，继承自 <see cref="T:Fantasy.SortedConcurrentOneToManyList`2"/> 类，
            同时实现了 <see cref="T:System.IDisposable"/> 接口，以支持对象的重用和释放。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.SortedConcurrentOneToManyListPool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyListPool`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.SortedConcurrentOneToManyListPool`2"/> 实例，使用默认的参数设置。
            </summary>
            <returns>新创建的 <see cref="T:Fantasy.SortedConcurrentOneToManyListPool`2"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyListPool`2.Dispose">
            <summary>
            释放当前对象池实例，将其返回到对象池以供重用。
            </summary>
        </member>
        <member name="T:Fantasy.SortedConcurrentOneToManyList`2">
            <summary>
            基于排序字典和并发集合实现的一多对映射列表类，继承自 <see cref="T:System.Collections.Generic.SortedDictionary`2"/> 类，
            用于在多个值与一个键关联的情况下进行管理和存储。该类支持并发操作，适用于多线程环境。
            </summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
        </member>
        <member name="F:Fantasy.SortedConcurrentOneToManyList`2._lockObject">
            用于同步操作的锁对象，它确保在多线程环境下对数据的安全访问。
        </member>
        <member name="F:Fantasy.SortedConcurrentOneToManyList`2._queue">
            用于存储缓存的队列。
        </member>
        <member name="F:Fantasy.SortedConcurrentOneToManyList`2._recyclingLimit">
            控制缓存回收的限制。当缓存的数量超过此限制时，旧的缓存将会被回收。
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyList`2.#ctor">
            <summary>
            初始化一个新的 <see cref="T:Fantasy.SortedConcurrentOneToManyList`2"/> 类的实例，使用默认的参数设置。
            </summary>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyList`2.#ctor(System.Int32)">
            <summary>
            初始化一个新的 <see cref="T:Fantasy.SortedConcurrentOneToManyList`2"/> 类的实例，指定最大缓存数量。
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyList`2.Contains(`0,`1)">
            <summary>
            检查指定的键和值是否存在于映射列表中。
            </summary>
            <param name="key">要检查的键。</param>
            <param name="value">要检查的值。</param>
            <returns>如果存在，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyList`2.Add(`0,`1)">
            <summary>
            将指定的值添加到与指定键关联的列表中。
            </summary>
            <param name="key">要关联值的键。</param>
            <param name="value">要添加到列表的值。</param>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyList`2.First(`0)">
            <summary>
            获取与指定键关联的列表中的第一个值。
            如果列表不存在或为空，则返回默认值。
            </summary>
            <param name="key">要获取第一个值的键。</param>
            <returns>第一个值，或默认值。</returns>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyList`2.RemoveValue(`0,`1)">
            <summary>
            从与指定键关联的列表中移除指定的值。
            如果列表不存在或值不存在于列表中，则不执行任何操作。
            </summary>
            <param name="key">要移除值的键。</param>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyList`2.RemoveKey(`0)">
            <summary>
            从映射列表中移除指定的键及其关联的列表。
            如果键不存在于映射列表中，则不执行任何操作。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyList`2.Fetch">
            <summary>
            从缓存中获取一个可重用的列表。如果缓存中不存在列表，则创建一个新的列表并返回。
            </summary>
            <returns>可重用的列表。</returns>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyList`2.Recycle(System.Collections.Generic.List{`1})">
            <summary>
            将不再使用的列表回收到缓存中，以便重复利用。如果缓存数量超过限制，则丢弃列表而不进行回收。
            </summary>
            <param name="list">要回收的列表。</param>
        </member>
        <member name="M:Fantasy.SortedConcurrentOneToManyList`2.Clear">
            <summary>
            清空映射列表以及队列。
            </summary>
        </member>
        <member name="T:Fantasy.SortedOneToManyHashSetPool`2">
            <summary>
            基于排序字典实现的一对多关系的映射哈希集合的对象池包装类，将唯一键映射到多个值的哈希集合。
            同时实现了 <see cref="T:System.IDisposable"/> 接口，以支持对象的重用和释放。
            </summary>
            <typeparam name="TKey">字典中键的类型。</typeparam>
            <typeparam name="TValue">哈希集合中值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.SortedOneToManyHashSetPool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSetPool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.SortedOneToManyHashSetPool`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSetPool`2.Dispose">
            <summary>
            释放当前对象池实例，将其返回到对象池以供重用。
            </summary>
        </member>
        <member name="T:Fantasy.SortedOneToManyHashSet`2">
            <summary>
            基于排序字典实现的一对多关系的映射哈希集合类，将唯一键映射到多个值的哈希集合。
            用于在多个值与一个键关联的情况下进行管理和存储。
            </summary>
            <typeparam name="TKey">字典中键的类型。</typeparam>
            <typeparam name="TValue">集合中值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSet`2.#ctor">
            <summary>
            创建一个新的 <see cref="T:Fantasy.SortedOneToManyHashSet`2"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSet`2.#ctor(System.Int32)">
            <summary>
            创建一个新的 <see cref="T:Fantasy.SortedOneToManyHashSet`2"/> 实例，设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSet`2.Contains(`0,`1)">
            <summary>
            判断哈希集合中是否包含指定的键值对。
            </summary>
            <param name="key">要查找的键。</param>
            <param name="value">要查找的值。</param>
            <returns>如果键值对存在，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSet`2.Add(`0,`1)">
            <summary>
            将指定值添加到给定键关联的哈希集合中。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSet`2.RemoveValue(`0,`1)">
            <summary>
            从指定键关联的哈希集合中移除特定值。
            如果哈希集合不存在或值不存在于集合中，则不执行任何操作。
            </summary>
            <param name="key">要移除值的键。</param>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSet`2.RemoveKey(`0)">
            <summary>
            从字典中移除指定键以及关联的哈希集合，并将集合进行回收。
            如果键不存在于映射列表中，则不执行任何操作。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSet`2.Fetch">
            <summary>
            获取一个空的或回收的哈希集合。
            </summary>
            <returns>获取的哈希集合实例。</returns>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSet`2.Recycle(System.Collections.Generic.HashSet{`1})">
            <summary>
            回收一个哈希集合，将其清空并放入回收队列中。
            </summary>
            <param name="list">要回收的哈希集合。</param>
        </member>
        <member name="M:Fantasy.SortedOneToManyHashSet`2.Clear">
            <summary>
            重写 Clear 方法，清空字典并清空回收队列。
            </summary>
        </member>
        <member name="T:Fantasy.SortedOneToManyListPool`2">
            <summary>
            基于排序字典实现的一对多映射列表的对象池包装类，继承自 <see cref="T:Fantasy.SortedOneToManyList`2"/> 类，
            同时实现了 <see cref="T:System.IDisposable"/> 接口，以支持对象的重用和释放。
            </summary>
            <typeparam name="TKey">字典中键的类型。</typeparam>
            <typeparam name="TValue">列表中值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.SortedOneToManyListPool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.SortedOneToManyListPool`2.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.SortedOneToManyListPool`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.SortedOneToManyListPool`2.Dispose">
            <summary>
            释放当前对象池实例，将其返回到对象池以供重用。
            </summary>
        </member>
        <member name="T:Fantasy.SortedOneToManyList`2">
            <summary>
            基于排序字典实现的一对多关系的映射列表类，将唯一键映射到包含多个值的列表。
            用于在多个值与一个键关联的情况下进行管理和存储。
            </summary>
            <typeparam name="TKey">字典中键的类型。</typeparam>
            <typeparam name="TValue">列表中值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.SortedOneToManyList`2.#ctor">
            <summary>
            创建一个新的 <see cref="T:Fantasy.SortedOneToManyList`2"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.SortedOneToManyList`2.#ctor(System.Int32)">
            <summary>
            创建一个新的 <see cref="T:Fantasy.SortedOneToManyList`2"/> 实例，设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.SortedOneToManyList`2.Contains(`0,`1)">
            <summary>
            判断列表中是否包含指定的键值对。
            </summary>
            <param name="key">要查找的键。</param>
            <param name="value">要查找的值。</param>
            <returns>如果键值对存在，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.SortedOneToManyList`2.Add(`0,`1)">
            <summary>
            将指定值添加到给定键关联的列表中。
            </summary>
            <param name="key">要添加值的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.SortedOneToManyList`2.First(`0)">
            <summary>
            获取指定键关联的列表中的第一个值。
            </summary>
            <param name="key">要查找值的键。</param>
            <returns>指定键关联的列表中的第一个值，如果列表为空则返回默认值。</returns>
        </member>
        <member name="M:Fantasy.SortedOneToManyList`2.RemoveValue(`0,`1)">
            <summary>
            从指定键关联的列表中移除特定值。
            </summary>
            <param name="key">要移除值的键。</param>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.SortedOneToManyList`2.RemoveKey(`0)">
            <summary>
            从字典中移除指定键以及关联的列表，并将列表进行回收。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.SortedOneToManyList`2.Fetch">
            <summary>
            获取一个空的或回收的列表。
            </summary>
            <returns>获取的列表实例。</returns>
        </member>
        <member name="M:Fantasy.SortedOneToManyList`2.Recycle(System.Collections.Generic.List{`1})">
            <summary>
            回收一个列表，将其清空并放入回收队列中。如果缓存数量超过限制，则丢弃列表而不进行回收
            </summary>
            <param name="list">要回收的列表。</param>
        </member>
        <member name="M:Fantasy.SortedOneToManyList`2.Clear">
            <summary>
            重写 Clear 方法，清空字典并清空回收队列。
            </summary>
        </member>
        <member name="T:Fantasy.DictionaryExtensions">
            <summary>
            提供对字典的扩展方法。
            </summary>
        </member>
        <member name="M:Fantasy.DictionaryExtensions.TryRemove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            尝试从字典中移除指定键，并返回相应的值。
            </summary>
            <typeparam name="T">字典中键的类型。</typeparam>
            <typeparam name="TV">字典中值的类型。</typeparam>
            <param name="self">要操作的字典实例。</param>
            <param name="key">要移除的键。</param>
            <param name="value">从字典中移除的值（如果成功移除）。</param>
            <returns>如果成功移除键值对，则为 true；否则为 false。</returns>
        </member>
        <member name="T:Fantasy.DictionaryPool`2">
            <summary>
            提供一个可以使用对象池管理的字典类。
            </summary>
            <typeparam name="TM">字典中键的类型。</typeparam>
            <typeparam name="TN">字典中值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.DictionaryPool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.DictionaryPool`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="M:Fantasy.DictionaryPool`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DictionaryPool`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="T:Fantasy.DoubleMapDictionaryPool`2">
            <summary>
            提供一个双向映射字典对象池类，用于双向键值对映射。
            </summary>
            <typeparam name="TKey">字典中键的类型。</typeparam>
            <typeparam name="TValue">字典中值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.DoubleMapDictionaryPool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.DoubleMapDictionaryPool`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.DoubleMapDictionaryPool`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.DoubleMapDictionaryPool`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="T:Fantasy.DoubleMapDictionary`2">
            <summary>
            可以实现双向映射的字典类，用于将键和值进行双向映射。
            </summary>
            <typeparam name="TK">键的类型，不能为 null。</typeparam>
            <typeparam name="TV">值的类型，不能为 null。</typeparam>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.#ctor">
            <summary>
            创建一个新的空的 <see cref="T:Fantasy.DoubleMapDictionary`2"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.#ctor(System.Int32)">
            <summary>
            创建一个新的具有指定初始容量的 <see cref="T:Fantasy.DoubleMapDictionary`2"/> 实例。
            </summary>
            <param name="capacity">初始容量。</param>
        </member>
        <member name="P:Fantasy.DoubleMapDictionary`2.Keys">
            <summary>
            获取包含字典中所有键的列表。
            </summary>
        </member>
        <member name="P:Fantasy.DoubleMapDictionary`2.Values">
            <summary>
            获取包含字典中所有值的列表。
            </summary>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.ForEach(System.Action{`0,`1})">
            <summary>
            对字典中的每个键值对执行指定的操作。
            </summary>
            <param name="action">要执行的操作。</param>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.Add(`0,`1)">
            <summary>
            将指定的键值对添加到字典中。
            </summary>
            <param name="key">要添加的键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.GetValueByKey(`0)">
            <summary>
            根据指定的键获取相应的值。
            </summary>
            <param name="key">要查找值的键。</param>
            <returns>与指定键关联的值，如果找不到键，则返回默认值。</returns>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.TryGetValueByKey(`0,`1@)">
            <summary>
            尝试根据指定的键获取相应的值。
            </summary>
            <param name="key">要查找值的键。</param>
            <param name="value">如果找到，则为与指定键关联的值；否则为值的默认值。</param>
            <returns>如果找到键，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.GetKeyByValue(`1)">
            <summary>
            根据指定的值获取相应的键。
            </summary>
            <param name="value">要查找键的值。</param>
            <returns>与指定值关联的键，如果找不到值，则返回默认键。</returns>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.TryGetKeyByValue(`1,`0@)">
            <summary>
            尝试根据指定的值获取相应的键。
            </summary>
            <param name="value">要查找键的值。</param>
            <param name="key">如果找到，则为与指定值关联的键；否则为键的默认值。</param>
            <returns>如果找到值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.RemoveByKey(`0)">
            <summary>
            根据指定的键移除键值对。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.RemoveByValue(`1)">
            <summary>
            根据指定的值移除键值对。
            </summary>
            <param name="value">要移除的值。</param>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.Clear">
            <summary>
            清空字典中的所有键值对。
            </summary>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.ContainsKey(`0)">
            <summary>
            判断字典是否包含指定的键。
            </summary>
            <param name="key">要检查的键。</param>
            <returns>如果字典包含指定的键，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.ContainsValue(`1)">
            <summary>
            判断字典是否包含指定的值。
            </summary>
            <param name="value">要检查的值。</param>
            <returns>如果字典包含指定的值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.DoubleMapDictionary`2.Contains(`0,`1)">
            <summary>
            判断字典是否包含指定的键值对。
            </summary>
            <param name="key">要检查的键。</param>
            <param name="value">要检查的值。</param>
            <returns>如果字典包含指定的键值对，则为 true；否则为 false。</returns>
        </member>
        <member name="T:Fantasy.EntityDictionary`2">
            <summary>
            提供一个带资源释放功能的实体字典类，支持使用对象池管理。
            </summary>
            <typeparam name="TM">字典中键的类型。</typeparam>
            <typeparam name="TN">字典中值的类型，必须实现 IDisposable 接口。</typeparam>
        </member>
        <member name="P:Fantasy.EntityDictionary`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.EntityDictionary`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.EntityDictionary`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.EntityDictionary`2.Clear">
            <summary>
            清空字典中的所有键值对，并释放值的资源。
            </summary>
        </member>
        <member name="M:Fantasy.EntityDictionary`2.ClearNotDispose">
            <summary>
            清空字典中的所有键值对，但不释放值的资源。
            </summary>
        </member>
        <member name="M:Fantasy.EntityDictionary`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="T:Fantasy.OneToManyDictionaryPool`3">
            <summary>
            一对多映射关系的字典对象池。
            </summary>
            <typeparam name="TKey">外部字典中的键类型。</typeparam>
            <typeparam name="TValueKey">内部字典中的键类型。</typeparam>
            <typeparam name="TValue">内部字典中的值类型。</typeparam>
        </member>
        <member name="P:Fantasy.OneToManyDictionaryPool`3.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.OneToManyDictionaryPool`3.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.OneToManyDictionaryPool`3"/> 的实例。
            </summary>
            <returns>新创建的 OneToManyDictionaryPool 实例。</returns>
        </member>
        <member name="M:Fantasy.OneToManyDictionaryPool`3.Dispose">
            <summary>
            释放当前实例及其资源。
            </summary>
        </member>
        <member name="T:Fantasy.OneToManyDictionary`3">
            <summary>
            一对多映射关系的字典。每个键都对应一个内部字典，该内部字典将键值映射到相应的值。
            </summary>
            <typeparam name="TKey">外部字典中的键类型。</typeparam>
            <typeparam name="TValueKey">内部字典中的键类型。</typeparam>
            <typeparam name="TValue">内部字典中的值类型。</typeparam>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.#ctor">
            <summary>
            创建一个新的 <see cref="T:Fantasy.OneToManyDictionary`3"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.#ctor(System.Int32)">
            <summary>
            创建一个新的 <see cref="T:Fantasy.OneToManyDictionary`3"/> 实例，并指定最大缓存数量。
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.Contains(`0,`1)">
            <summary>
            检查是否包含指定的键值对。
            </summary>
            <param name="key">外部字典中的键。</param>
            <param name="valueKey">内部字典中的键。</param>
            <returns>如果包含指定的键值对，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            尝试获取指定键值对的值。
            </summary>
            <param name="key">外部字典中的键。</param>
            <param name="valueKey">内部字典中的键。</param>
            <param name="value">获取的值，如果操作成功，则为值；否则为默认值。</param>
            <returns>如果操作成功，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.First(`0)">
            <summary>
            获取指定键的第一个值。
            </summary>
            <param name="key">要获取第一个值的键。</param>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.Add(`0,`1,`2)">
            <summary>
            向字典中添加指定的键值对。
            </summary>
            <param name="key">要添加键值对的键。</param>
            <param name="valueKey">要添加键值对的内部字典键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.Remove(`0,`1)">
            <summary>
            从字典中移除指定的键值对。
            </summary>
            <param name="key">要移除键值对的键。</param>
            <param name="valueKey">要移除键值对的内部字典键。</param>
            <returns>如果成功移除键值对，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.Remove(`0,`1,`2@)">
            <summary>
            从字典中移除指定的键值对。
            </summary>
            <param name="key">要移除键值对的键。</param>
            <param name="valueKey">要移除键值对的内部字典键。</param>
            <param name="value">如果成功移除键值对，则为移除的值；否则为默认值。</param>
            <returns>如果成功移除键值对，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.RemoveKey(`0)">
            <summary>
            移除字典中的指定键及其相关的所有键值对。
            </summary>
            <param name="key">要移除的键。</param>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.Fetch">
            <summary>
            从对象池中获取一个内部字典实例，如果池中没有，则创建一个新实例。
            </summary>
            <returns>获取的内部字典实例。</returns>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.Recycle(System.Collections.Generic.Dictionary{`1,`2})">
            <summary>
            将不再使用的内部字典实例放回对象池中，以便后续重用。
            </summary>
            <param name="dic">要放回对象池的内部字典实例。</param>
        </member>
        <member name="M:Fantasy.OneToManyDictionary`3.Clear">
            <summary>
            清空字典中的所有键值对，并将不再使用的内部字典实例放回对象池中。
            </summary>
        </member>
        <member name="T:Fantasy.OneToManySortedDictionaryPool`3">
            <summary>
            一对多映射关系的排序字典对象池。
            </summary>
            <typeparam name="TKey">外部字典中的键类型。</typeparam>
            <typeparam name="TSortedKey">内部字典中的排序键类型。</typeparam>
            <typeparam name="TValue">内部字典中的值类型。</typeparam>
        </member>
        <member name="P:Fantasy.OneToManySortedDictionaryPool`3.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionaryPool`3.Create">
            <summary>
            创建一个 <see cref="T:Fantasy.OneToManySortedDictionaryPool`3"/> 的实例。
            </summary>
            <returns>新创建的 OneToManySortedDictionaryPool 实例。</returns>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionaryPool`3.Dispose">
            <summary>
            释放当前实例及其资源。
            </summary>
        </member>
        <member name="T:Fantasy.OneToManySortedDictionary`3">
            <summary>
            一对多映射关系的排序字典。每个外部键映射到一个内部排序字典，该内部排序字典将排序键映射到相应的值。
            </summary>
            <typeparam name="TKey">外部字典中的键类型。</typeparam>
            <typeparam name="TSortedKey">内部字典中的排序键类型。</typeparam>
            <typeparam name="TValue">内部字典中的值类型。</typeparam>
        </member>
        <member name="F:Fantasy.OneToManySortedDictionary`3._recyclingLimit">
            缓存队列的回收限制
        </member>
        <member name="F:Fantasy.OneToManySortedDictionary`3._queue">
            缓存队列，用于存储已回收的内部排序字典
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.#ctor">
            <summary>
            创建一个新的 <see cref="T:Fantasy.OneToManySortedDictionary`3"/> 实例。
            </summary>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.#ctor(System.Int32)">
            <summary>
            创建一个新的 <see cref="T:Fantasy.OneToManySortedDictionary`3"/> 实例。设置最大缓存数量
            </summary>
            <param name="recyclingLimit">
            1:防止数据量过大、所以超过recyclingLimit的数据还是走GC.
            2:设置成0不控制数量，全部缓存
            </param>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.Contains(`0)">
            <summary>
            检查字典是否包含指定的外部键。
            </summary>
            <param name="key">要检查的外部键。</param>
            <returns>如果字典包含指定的外部键，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.Contains(`0,`1)">
            <summary>
            检查字典是否包含指定的外部键和排序键。
            </summary>
            <param name="key">要检查的外部键。</param>
            <param name="sortedKey">要检查的排序键。</param>
            <returns>如果字典包含指定的外部键和排序键，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.TryGetValue(`0,System.Collections.Generic.SortedDictionary{`1,`2}@)">
            <summary>
            尝试从字典中获取指定外部键对应的内部排序字典。
            </summary>
            <param name="key">要获取内部排序字典的外部键。</param>
            <param name="dic">获取到的内部排序字典，如果找不到则为 null。</param>
            <returns>如果找到内部排序字典，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.TryGetValueBySortedKey(`0,`1,`2@)">
            <summary>
            尝试从字典中获取指定外部键和排序键对应的值。
            </summary>
            <param name="key">要获取值的外部键。</param>
            <param name="sortedKey">要获取值的排序键。</param>
            <param name="value">获取到的值，如果找不到则为 default。</param>
            <returns>如果找到值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.Add(`0,`1,`2)">
            <summary>
            向字典中添加一个值，关联到指定的外部键和排序键。
            </summary>
            <param name="key">要关联值的外部键。</param>
            <param name="sortedKey">要关联值的排序键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.RemoveSortedKey(`0,`1)">
            <summary>
            从字典中移除指定外部键和排序键关联的值。
            </summary>
            <param name="key">要移除值的外部键。</param>
            <param name="sortedKey">要移除值的排序键。</param>
            <returns>如果成功移除值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.RemoveKey(`0)">
            <summary>
            从字典中移除指定外部键及其关联的所有值。
            </summary>
            <param name="key">要移除的外部键。</param>
            <returns>如果成功移除外部键及其关联的所有值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.Fetch">
            <summary>
            从缓存队列中获取一个内部排序字典。
            </summary>
            <returns>一个内部排序字典。</returns>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.Recycle(System.Collections.Generic.SortedDictionary{`1,`2})">
            <summary>
            回收一个内部排序字典到缓存队列。
            </summary>
            <param name="dic">要回收的内部排序字典。</param>
        </member>
        <member name="M:Fantasy.OneToManySortedDictionary`3.Clear">
            <summary>
            清空字典以及内部排序字典缓存队列，释放所有资源。
            </summary>
        </member>
        <member name="T:Fantasy.ReuseDictionary`2">
            <summary>
            提供一个可以重用的字典类，支持使用对象池管理。
            </summary>
            <typeparam name="TM">字典中键的类型。</typeparam>
            <typeparam name="TN">字典中值的类型。</typeparam>
        </member>
        <member name="P:Fantasy.ReuseDictionary`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.ReuseDictionary`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.ReuseDictionary`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="M:Fantasy.ReuseDictionary`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="T:Fantasy.SortedDictionaryPool`2">
            <summary>
            提供一个可以使用对象池管理的排序字典类。
            </summary>
            <typeparam name="TM"></typeparam>
            <typeparam name="TN"></typeparam>
        </member>
        <member name="P:Fantasy.SortedDictionaryPool`2.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="M:Fantasy.SortedDictionaryPool`2.Dispose">
            <summary>
            释放实例占用的资源。
            </summary>
        </member>
        <member name="M:Fantasy.SortedDictionaryPool`2.Create">
            <summary>
            创建一个新的 <see cref="T:Fantasy.SortedDictionaryPool`2"/> 实例。
            </summary>
            <returns>新创建的实例。</returns>
        </member>
        <member name="T:Fantasy.SkipTable`1">
            <summary>
            跳表数据结构（升序版）
            </summary>
            <typeparam name="TValue">跳表中存储的值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.SkipTable`1.#ctor(System.Int32)">
            <summary>
            创建一个新的跳表实例。
            </summary>
            <param name="maxLayer">跳表的最大层数。</param>
        </member>
        <member name="M:Fantasy.SkipTable`1.Add(System.Int64,System.Int64,System.Int64,`0)">
            <summary>
            向跳表中添加一个新节点。
            </summary>
            <param name="sortKey">节点的主排序键。</param>
            <param name="viceKey">节点的副排序键。</param>
            <param name="key">节点的唯一键。</param>
            <param name="value">要添加的值。</param>
        </member>
        <member name="M:Fantasy.SkipTable`1.Remove(System.Int64,System.Int64,System.Int64,`0@)">
            <summary>
            从跳表中移除一个节点。
            </summary>
            <param name="sortKey">节点的主排序键。</param>
            <param name="viceKey">节点的副排序键。</param>
            <param name="key">节点的唯一键。</param>
            <param name="value">被移除的节点的值。</param>
            <returns>如果成功移除节点，则为 true；否则为 false。</returns>
        </member>
        <member name="T:Fantasy.SkipTableBase`1">
            <summary>
            抽象的跳表基类，提供跳表的基本功能和操作。
            </summary>
            <typeparam name="TValue">跳表中存储的值的类型。</typeparam>
        </member>
        <member name="F:Fantasy.SkipTableBase`1.MaxLayer">
            <summary>
            跳表的最大层数
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableBase`1.TopHeader">
            <summary>
            跳表的顶部头节点
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableBase`1.BottomHeader">
            <summary>
            跳表的底部头节点
            </summary>
        </member>
        <member name="P:Fantasy.SkipTableBase`1.Count">
            <summary>
            跳表中节点的数量，使用了 Node 字典的计数
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableBase`1.Random">
            <summary>
            用于生成随机数的随机数生成器
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableBase`1.Node">
            <summary>
            存储跳表节点的字典
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableBase`1.AntiFindStack">
            <summary>
            用于辅助反向查找的栈
            </summary>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.#ctor(System.Int32)">
            <summary>
            初始化一个新的跳表实例。
            </summary>
            <param name="maxLayer">跳表的最大层数，默认为 8。</param>
        </member>
        <member name="P:Fantasy.SkipTableBase`1.Item(System.Int64)">
            <summary>
            获取指定键的节点的值，若不存在则返回默认值。
            </summary>
            <param name="key">要查找的键。</param>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.GetRanking(System.Int64)">
            <summary>
            获取指定键的节点在跳表中的排名。
            </summary>
            <param name="key">要查找的键。</param>
            <returns>节点的排名。</returns>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.GetAntiRanking(System.Int64)">
            <summary>
            获取指定键的反向排名，即在比该键更大的节点中的排名。
            </summary>
            <param name="key">要查找的键。</param>
            <returns>反向排名。</returns>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.TryGetValueByKey(System.Int64,`0@)">
            <summary>
            尝试通过键获取节点的值。
            </summary>
            <param name="key">要查找的键。</param>
            <param name="value">获取到的节点的值，如果键不存在则为默认值。</param>
            <returns>是否成功获取节点的值。</returns>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.TryGetNodeByKey(System.Int64,Fantasy.SkipTableNode{`0}@)">
            <summary>
            尝试通过键获取节点。
            </summary>
            <param name="key">要查找的键。</param>
            <param name="node">获取到的节点，如果键不存在则为 <c>null</c>。</param>
            <returns>是否成功获取节点。</returns>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.Find(System.Int32,System.Int32,Fantasy.ListPool{Fantasy.SkipTableNode{`0}})">
            <summary>
            在跳表中查找节点，返回从起始位置到结束位置的节点列表。
            </summary>
            <param name="start">起始位置的排名。</param>
            <param name="end">结束位置的排名。</param>
            <param name="list">用于存储节点列表的 <see cref="T:Fantasy.ListPool`1"/> 实例。</param>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.AntiFind(System.Int32,System.Int32,Fantasy.ListPool{Fantasy.SkipTableNode{`0}})">
            <summary>
            在跳表中进行反向查找节点，返回从结束位置到起始位置的节点列表。
            </summary>
            <param name="start">结束位置的排名。</param>
            <param name="end">起始位置的排名。</param>
            <param name="list">用于存储节点列表的 <see cref="T:Fantasy.ListPool`1"/> 实例。</param>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.GetLastValue">
            <summary>
            获取跳表中最后一个节点的值。
            </summary>
            <returns>最后一个节点的值。</returns>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.Remove(System.Int64)">
            <summary>
            移除跳表中指定键的节点。
            </summary>
            <param name="key">要移除的节点的键。</param>
            <returns>移除是否成功。</returns>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.Add(System.Int64,System.Int64,System.Int64,`0)">
            <summary>
            向跳表中添加节点。
            </summary>
            <param name="sortKey">节点的排序键。</param>
            <param name="viceKey">节点的副键。</param>
            <param name="key">节点的键。</param>
            <param name="value">节点的值。</param>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.Remove(System.Int64,System.Int64,System.Int64,`0@)">
            <summary>
            从跳表中移除指定键的节点。
            </summary>
            <param name="sortKey">节点的排序键。</param>
            <param name="viceKey">节点的副键。</param>
            <param name="key">节点的键。</param>
            <param name="value">被移除的节点的值。</param>
            <returns>移除是否成功。</returns>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.GetEnumerator">
            <summary>
            返回一个枚举器，用于遍历跳表中的节点。
            </summary>
            <returns>一个可用于遍历跳表节点的枚举器。</returns>
        </member>
        <member name="M:Fantasy.SkipTableBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个非泛型枚举器，用于遍历跳表中的节点。
            </summary>
            <returns>一个非泛型枚举器，可用于遍历跳表节点。</returns>
        </member>
        <member name="T:Fantasy.SkipTableDesc`1">
            <summary>
            跳表降序版，用于存储降序排列的数据。
            </summary>
            <typeparam name="TValue">存储的值的类型。</typeparam>
        </member>
        <member name="M:Fantasy.SkipTableDesc`1.#ctor(System.Int32)">
            <summary>
            初始化跳表降序版的新实例。
            </summary>
            <param name="maxLayer">跳表的最大层数，默认为 8。</param>
        </member>
        <member name="M:Fantasy.SkipTableDesc`1.Add(System.Int64,System.Int64,System.Int64,`0)">
            <summary>
            向跳表中添加一个节点，根据降序规则进行插入。
            </summary>
            <param name="sortKey">排序主键。</param>
            <param name="viceKey">副键。</param>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Fantasy.SkipTableDesc`1.Remove(System.Int64,System.Int64,System.Int64,`0@)">
            <summary>
            从跳表中移除一个节点，根据降序规则进行移除。
            </summary>
            <param name="sortKey">排序主键。</param>
            <param name="viceKey">副键。</param>
            <param name="key">键。</param>
            <param name="value">移除的节点值。</param>
            <returns>如果成功移除节点，则返回 true，否则返回 false。</returns>
        </member>
        <member name="T:Fantasy.SkipTableNode`1">
            <summary>
            跳跃表节点。
            </summary>
            <typeparam name="TValue">节点的值的类型。</typeparam>
        </member>
        <member name="F:Fantasy.SkipTableNode`1.Index">
            <summary>
            节点在跳跃表中的索引。
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableNode`1.Key">
            <summary>
            节点的主键。
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableNode`1.SortKey">
            <summary>
            节点的排序键。
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableNode`1.ViceKey">
            <summary>
            节点的副键。
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableNode`1.Value">
            <summary>
            节点存储的值。
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableNode`1.Left">
            <summary>
            指向左侧节点的引用。
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableNode`1.Right">
            <summary>
            指向右侧节点的引用。
            </summary>
        </member>
        <member name="F:Fantasy.SkipTableNode`1.Down">
            <summary>
            指向下一层节点的引用。
            </summary>
        </member>
        <member name="M:Fantasy.SkipTableNode`1.#ctor(System.Int64,System.Int64,System.Int64,`0,System.Int32,Fantasy.SkipTableNode{`0},Fantasy.SkipTableNode{`0},Fantasy.SkipTableNode{`0})">
            <summary>
            初始化跳跃表节点的新实例。
            </summary>
            <param name="sortKey">节点的排序键。</param>
            <param name="viceKey">节点的副键。</param>
            <param name="key">节点的主键。</param>
            <param name="value">节点存储的值。</param>
            <param name="index">节点在跳跃表中的索引。</param>
            <param name="l">指向左侧节点的引用。</param>
            <param name="r">指向右侧节点的引用。</param>
            <param name="d">指向下一层节点的引用。</param>
        </member>
        <member name="T:Fantasy.Entity">
            <summary>
            实体基类，用于实体创建、回收、获取，和组件操作
            </summary>
        </member>
        <member name="P:Fantasy.Entity.IsPool">
            <summary>
            获取一个值，表示实体是否支持对象池。
            </summary>
        </member>
        <member name="P:Fantasy.Entity.Id">
            <summary>
            获取或设置实体的唯一ID。
            </summary>
        </member>
        <member name="P:Fantasy.Entity.RuntimeId">
            <summary>
            获取实体的运行时ID。
            </summary>
        </member>
        <member name="P:Fantasy.Entity.IsDisposed">
            <summary>
            获取一个值，表示实体是否已被释放。
            </summary>
        </member>
        <member name="P:Fantasy.Entity.Scene">
            <summary>
            获取或设置实体所属的场景。
            </summary>
        </member>
        <member name="P:Fantasy.Entity.Parent">
            <summary>
            获取或设置实体的父实体。
            </summary>
        </member>
        <member name="M:Fantasy.Entity.GetParent``1">
            <summary>
            获取当前实体的父实体。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entity.Create``1(Fantasy.Scene,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            在指定场景中创建一个具有指定ID的实体对象，并触发相关事件（可选）。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="scene">要创建实体的场景。</param>
            <param name="id">要分配给实体的ID。</param>
            <param name="isPool">是否从对象池创建。</param>
            <param name="isRunEvent">是否触发相关事件。</param>
            <returns>创建的实体对象。</returns>
        </member>
        <member name="M:Fantasy.Entity.Create``1(Fantasy.Scene,System.Boolean,System.Boolean)">
            <summary>
            在指定场景中创建一个实体对象，并触发相关事件（可选）。
            </summary>
            <param name="scene">要创建实体的场景</param>
            <param name="isPool">是否从对象池创建。</param>
            <param name="isRunEvent">是否触发相关事件。</param>
            <typeparam name="T">实体类型。</typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entity.Create``1(Fantasy.Scene,System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            在指定位置中创建一个实体对象，并可选择是否立即触发事件。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="scene">当前的Scene</param>
            <param name="id">要分配给实体的ID。</param>
            <param name="runtimeId">要分配给实体的运行时ID。</param>
            <param name="isPool">是否从对象池创建。</param>
            <param name="isRunEvent">是否立即触发实体事件。</param>
            <returns>创建的实体对象。</returns>
        </member>
        <member name="M:Fantasy.Entity.AddComponent``1(System.Boolean)">
            <summary>
            在当前实体上添加一个指定类型的组件，并立即触发组件事件。
            </summary>
            <typeparam name="T">组件类型。</typeparam>
            <param name="isPool">是否从对象池创建。</param>
            <returns>创建的组件实体。</returns>
        </member>
        <member name="M:Fantasy.Entity.AddComponent``1(System.Int64,System.Boolean)">
            <summary>
            在当前实体上添加一个指定类型的组件，并立即触发组件事件。
            </summary>
            <typeparam name="T">组件类型。</typeparam>
            <param name="id">要分配给组件的ID。</param>
            <param name="isPool">是否从对象池创建。</param>
            <returns>创建的组件实体。</returns>
        </member>
        <member name="M:Fantasy.Entity.AddComponent(Fantasy.Entity)">
            <summary>
            将指定的组件添加到当前实体。
            </summary>
            <param name="component">要添加的组件。</param>
        </member>
        <member name="P:Fantasy.Entity.ForEachSingleCollection">
            <summary>
            获取一个 IEnumerable，用于遍历当前实体上所有实现了 ISupportedSingleCollection 接口的组件。
            </summary>
        </member>
        <member name="P:Fantasy.Entity.ForEachTransfer">
            <summary>
            获取一个 IEnumerable，用于遍历当前实体上所有实现了 ISupportedSingleCollection 或 ISupportedTransfer 接口的组件。
            </summary>
        </member>
        <member name="M:Fantasy.Entity.ForEachMultiEntity">
            <summary>
            获取一个 IEnumerable，用于遍历当前实体上所有实现了ISupportedMultiEntity接口的组件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entity.ForEachEntity">
            <summary>
            获取一个 IEnumerable，用于遍历当前实体上挂载的普通组件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entity.GetComponent``1">
            <summary>
            获取当前实体上的一个指定类型的组件实体。
            </summary>
            <typeparam name="T">要获取的组件类型。</typeparam>
            <returns>找到的组件实体，如果不存在则为 null。</returns>
        </member>
        <member name="M:Fantasy.Entity.GetComponent(System.Type)">
            <summary>
            获取当前实体上的一个指定类型的组件实体。
            </summary>
            <param name="componentType">要获取的组件类型。</param>
            <returns>找到的组件实体，如果不存在则为 null。</returns>
        </member>
        <member name="M:Fantasy.Entity.GetComponent``1(System.Int64)">
            <summary>
            获取当前实体上的一个指定类型的多实体组件。
            </summary>
            <typeparam name="T">要获取的多实体组件类型。</typeparam>
            <param name="id">多实体组件的ID。</param>
            <returns>找到的多实体组件，如果不存在则为 null。</returns>
        </member>
        <member name="M:Fantasy.Entity.GetComponent``1(System.Boolean,System.Boolean)">
            <summary>
            获取当前实体上的一个指定类型的组件实体。
            </summary>
            <param name="isNullAdd">如果没有查找到就创建一个新的并返回</param>
            <param name="isPool">是否从对象池创建。</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Entity.RemoveComponent``1(System.Boolean)">
            <summary>
            从当前实体上移除一个指定类型的组件。
            </summary>
            <typeparam name="T">要移除的组件类型。</typeparam>
            <param name="isDispose">是否同时释放被移除的组件。</param>
        </member>
        <member name="M:Fantasy.Entity.RemoveComponent``1(System.Int64,System.Boolean)">
            <summary>
            从当前实体上移除一个指定类型的多实体组件。
            </summary>
            <typeparam name="T">要移除的多实体组件类型。</typeparam>
            <param name="id">要移除的多实体组件的ID。</param>
            <param name="isDispose">是否同时释放被移除的组件。</param>
        </member>
        <member name="M:Fantasy.Entity.RemoveComponent(Fantasy.Entity,System.Boolean)">
            <summary>
            从当前实体上移除一个指定的组件实体。
            </summary>
            <param name="component">要移除的组件实体。</param>
            <param name="isDispose">是否同时释放被移除的组件。</param>
        </member>
        <member name="M:Fantasy.Entity.Deserialize(Fantasy.Scene,System.Boolean)">
            <summary>
            从序列化数据中恢复当前实体的状态，并将其添加到指定的场景中。
            </summary>
            <param name="scene">要添加到的场景。</param>
            <param name="resetId">是否重置实体的ID。</param>
        </member>
        <member name="M:Fantasy.Entity.Clone">
            <summary>
            克隆当前实体，并返回一个新的实体对象，新对象将具有相同的状态和组件。
            </summary>
            <returns>克隆生成的实体。</returns>
        </member>
        <member name="M:Fantasy.Entity.Dispose">
            <summary>
            释放当前实体及其所有组件。如果实体已释放，则不执行任何操作。
            </summary>
        </member>
        <member name="T:Fantasy.EntityComponent">
            <summary>
            Entity管理组件
            </summary>
        </member>
        <member name="M:Fantasy.EntityComponent.Awake``1(``0)">
            <summary>
            触发实体的唤醒方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Fantasy.EntityComponent.Awake``2(``0,``1)">
            <summary>
            触发实体的唤醒方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="T1">参数类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="ages">参数</param>
        </member>
        <member name="M:Fantasy.EntityComponent.Destroy``1(``0)">
            <summary>
            触发实体的销毁方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Fantasy.EntityComponent.Deserialize``1(``0)">
            <summary>
            触发实体的反序列化方法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Fantasy.EntityComponent.StartUpdate(Fantasy.Entity)">
            <summary>
            将实体加入更新队列，准备进行更新
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Fantasy.EntityComponent.Update">
            <summary>
            执行实体系统的更新逻辑
            </summary>
        </member>
        <member name="M:Fantasy.EntityComponent.FrameUpdate">
            <summary>
            执行实体系统的帧更新逻辑
            </summary>
        </member>
        <member name="M:Fantasy.EntityComponent.Dispose">
            <summary>
            释放实体系统管理器资源
            </summary>
        </member>
        <member name="T:Fantasy.EntityReference`1">
            <summary>
            实体引用只读结构，用作对 Entity 实例的引用。
            </summary>
            <typeparam name="T">Entity 的类型。</typeparam>
        </member>
        <member name="M:Fantasy.EntityReference`1.op_Implicit(`0)~Fantasy.EntityReference{`0}">
            <summary>
            隐式地将 Entity 实例转换为 EntityReference。
            </summary>
            <param name="t">要转换的 Entity 实例。</param>
            <returns>引用同一 Entity 的 EntityReference 实例。</returns>
        </member>
        <member name="M:Fantasy.EntityReference`1.op_Implicit(Fantasy.EntityReference{`0})~`0">
            <summary>
            隐式地将 EntityReference 转换回原始的 Entity 类型。
            </summary>
            <param name="v">要转换的 EntityReference。</param>
            <returns>
            如果运行时 ID 匹配，则返回原始的 Entity 实例，如果不匹配则返回 null，
            或者如果引用为 null，则返回 null。
            </returns>
        </member>
        <member name="T:Fantasy.ISingleCollectionRoot">
            <summary>
            Entity保存到数据库的时候会根据子组件设置分离存储特性分表存储在不同的集合表中
            </summary>
        </member>
        <member name="T:Fantasy.ISupportedDataBase">
            <summary>
            Entity支持数据库
            </summary>
        </member>
        <member name="T:Fantasy.ISupportedMultiEntity">
            <summary>
            支持再一个组件里添加多个同类型组件
            </summary>
        </member>
        <member name="T:Fantasy.ISupportedSingleCollection">
            Entity是单一集合、保存到数据库的时候不会跟随父组件保存在一个集合里、会单独保存在一个集合里
            需要配合SingleCollectionAttribute一起使用、如在Entity类头部定义SingleCollectionAttribute(typeOf(Unit))
            SingleCollectionAttribute用来定义这个Entity是属于哪个Entity的子集
            <summary>
            定义实体支持单一集合存储的接口。当实体需要单独存储在一个集合中，并且在保存到数据库时不会与父组件一起保存在同一个集合中时，应实现此接口。
            </summary>
        </member>
        <member name="T:Fantasy.SingleCollectionAttribute">
            <summary>
            表示用于指定实体的单一集合存储属性。此属性用于配合 <see cref="T:Fantasy.ISupportedSingleCollection"/> 接口使用，
            用于定义实体属于哪个父实体的子集合，以及在数据库中使用的集合名称。
            </summary>
        </member>
        <member name="F:Fantasy.SingleCollectionAttribute.RootType">
            <summary>
            获取父实体的类型，指示此实体是属于哪个父实体的子集合。
            </summary>
        </member>
        <member name="F:Fantasy.SingleCollectionAttribute.CollectionName">
            <summary>
            获取在数据库中使用的集合名称。
            </summary>
        </member>
        <member name="M:Fantasy.SingleCollectionAttribute.#ctor(System.Type,System.String)">
            <summary>
            初始化 <see cref="T:Fantasy.SingleCollectionAttribute"/> 类的新实例，指定父实体类型和集合名称。
            </summary>
            <param name="rootType">父实体的类型。</param>
            <param name="collectionName">在数据库中使用的集合名称。</param>
        </member>
        <member name="T:Fantasy.ISupportedTransfer">
            <summary>
            Entity支持传送
            </summary>
        </member>
        <member name="T:Fantasy.IAwakeSystem">
            <summary>
            定义实体的唤醒系统接口。当需要在实体唤醒时执行特定的逻辑时，应实现此接口。
            </summary>
        </member>
        <member name="T:Fantasy.AwakeSystem`1">
            <summary>
            表示用于实现实体唤醒逻辑的抽象基类。继承此类的子类用于处理特定类型的实体的唤醒操作。
            </summary>
            <typeparam name="T">需要处理唤醒逻辑的实体类型。</typeparam>
        </member>
        <member name="M:Fantasy.AwakeSystem`1.EntitiesType">
            <summary>
            获取需要处理唤醒逻辑的实体类型。
            </summary>
            <returns>实体类型。</returns>
        </member>
        <member name="M:Fantasy.AwakeSystem`1.Awake(`0)">
            <summary>
            在实体唤醒时执行的逻辑。子类应实现此方法以处理特定实体类型的唤醒操作。
            </summary>
            <param name="self">正在唤醒的实体。</param>
        </member>
        <member name="M:Fantasy.AwakeSystem`1.Invoke(Fantasy.Entity)">
            <summary>
            调用实体的唤醒逻辑。在实体唤醒时，会调用此方法来执行相应的唤醒操作。
            </summary>
            <param name="self">正在唤醒的实体。</param>
        </member>
        <member name="T:Fantasy.AwakeSystem`2">
            <summary>
            表示用于实现实体唤醒逻辑的抽象基类。继承此类的子类用于处理特定类型的实体的唤醒操作。
            </summary>
            <typeparam name="T">需要处理唤醒逻辑的实体类型。</typeparam>
            <typeparam name="T1">参数的类型</typeparam>
        </member>
        <member name="M:Fantasy.AwakeSystem`2.EntitiesType">
            <summary>
            获取需要处理唤醒逻辑的实体类型。
            </summary>
            <returns>实体类型。</returns>
        </member>
        <member name="M:Fantasy.AwakeSystem`2.Awake(`0,`1)">
            <summary>
            在实体唤醒时执行的逻辑。子类应实现此方法以处理特定实体类型的唤醒操作。
            </summary>
            <param name="self">正在唤醒的实体。</param>
            <param name="ages">参数</param>
        </member>
        <member name="M:Fantasy.AwakeSystem`2.Invoke(Fantasy.Entity,`1)">
            <summary>
            调用实体的唤醒逻辑。在实体唤醒时，会调用此方法来执行相应的唤醒操作。
            </summary>
            <param name="self">正在唤醒的实体。</param>
            <param name="ages">参数</param>
        </member>
        <member name="M:Fantasy.AwakeSystem`2.Invoke(Fantasy.Entity)">
            <summary>
            调用实体的唤醒逻辑。在实体唤醒时，会调用此方法来执行相应的唤醒操作。
            </summary>
            <param name="entity"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Fantasy.IDeserializeSystem">
            <summary>
            表示一个用于反序列化的系统接口，扩展自 <see cref="T:Fantasy.IEntitiesSystem"/>。
            </summary>
        </member>
        <member name="T:Fantasy.DeserializeSystem`1">
            <summary>
            表示一个用于反序列化特定类型实体的系统抽象类，扩展自 <see cref="T:Fantasy.IDeserializeSystem"/>。
            </summary>
            <typeparam name="T">要反序列化的 Entity 类型。</typeparam>
        </member>
        <member name="M:Fantasy.DeserializeSystem`1.EntitiesType">
            <summary>
            获取此系统用于处理的实体类型。
            </summary>
            <returns>实体类型。</returns>
        </member>
        <member name="M:Fantasy.DeserializeSystem`1.Deserialize(`0)">
            <summary>
            在派生类中实现，用于反序列化指定的实体。
            </summary>
            <param name="self">要反序列化的实体。</param>
        </member>
        <member name="M:Fantasy.DeserializeSystem`1.Invoke(Fantasy.Entity)">
            <summary>
            调用实体的反序列化方法。
            </summary>
            <param name="self">要反序列化的实体。</param>
        </member>
        <member name="T:Fantasy.IDestroySystem">
            <summary>
            定义实体销毁系统接口。当需要在实体销毁时执行特定的逻辑时，应实现此接口。
            </summary>
        </member>
        <member name="T:Fantasy.DestroySystem`1">
            <summary>
            表示用于实现实体销毁逻辑的抽象基类。继承此类的子类用于处理特定类型的实体的销毁操作。
            </summary>
            <typeparam name="T">需要处理销毁逻辑的实体类型。</typeparam>
        </member>
        <member name="M:Fantasy.DestroySystem`1.EntitiesType">
            <summary>
            获取需要处理销毁逻辑的实体类型。
            </summary>
            <returns>实体类型。</returns>
        </member>
        <member name="M:Fantasy.DestroySystem`1.Destroy(`0)">
            <summary>
            在实体销毁时执行的逻辑。子类应实现此方法以处理特定实体类型的销毁操作。
            </summary>
            <param name="self">正在销毁的实体。</param>
        </member>
        <member name="M:Fantasy.DestroySystem`1.Invoke(Fantasy.Entity)">
            <summary>
            调用实体的销毁逻辑。在实体销毁时，会调用此方法来执行相应的销毁操作。
            </summary>
            <param name="self">正在销毁的实体。</param>
        </member>
        <member name="T:Fantasy.IEntitiesSystem">
            <summary>
            定义实体系统的接口。实体系统用于管理特定类型的实体，执行与该类型实体相关的逻辑。
            </summary>
        </member>
        <member name="M:Fantasy.IEntitiesSystem.EntitiesType">
            <summary>
            获取实体系统所管理的实体类型。
            </summary>
            <returns>实体类型。</returns>
        </member>
        <member name="M:Fantasy.IEntitiesSystem.Invoke(Fantasy.Entity)">
            <summary>
            在实体系统中执行特定实体的逻辑。具体的实现应在子类中实现。
            </summary>
            <param name="entity">需要执行逻辑的实体。</param>
        </member>
        <member name="T:Fantasy.IFrameUpdateSystem">
            <summary>
            定义实体帧更新系统的接口。实体帧更新系统用于管理特定类型的实体，在每次帧更新时执行与该类型实体相关的逻辑。
            </summary>
        </member>
        <member name="T:Fantasy.FrameUpdateSystem`1">
            <summary>
            表示实体帧更新系统的抽象基类。继承此类可以定义特定类型实体的更新逻辑。
            </summary>
            <typeparam name="T">实体类型，必须继承自Entity。</typeparam>
        </member>
        <member name="M:Fantasy.FrameUpdateSystem`1.EntitiesType">
            <summary>
            获取实体帧更新系统所管理的实体类型。
            </summary>
            <returns>实体类型。</returns>
        </member>
        <member name="M:Fantasy.FrameUpdateSystem`1.FrameUpdate(`0)">
            <summary>
            在实体帧更新系统中执行特定实体的更新逻辑。具体的实现应在子类中实现。
            </summary>
            <param name="self">需要执行帧更新逻辑的实体。</param>
        </member>
        <member name="M:Fantasy.FrameUpdateSystem`1.Invoke(Fantasy.Entity)">
            <summary>
            在实体帧更新系统中调用更新逻辑。
            </summary>
            <param name="self">需要执行帧更新逻辑的实体。</param>
        </member>
        <member name="T:Fantasy.IUpdateSystem">
            <summary>
            定义实体更新系统的接口。实体更新系统用于管理特定类型的实体，在每次更新时执行与该类型实体相关的逻辑。
            </summary>
        </member>
        <member name="T:Fantasy.UpdateSystem`1">
            <summary>
            表示实体更新系统的抽象基类。继承此类可以定义特定类型实体的更新逻辑。
            </summary>
            <typeparam name="T">实体类型，必须继承自Entity。</typeparam>
        </member>
        <member name="M:Fantasy.UpdateSystem`1.EntitiesType">
            <summary>
            获取实体更新系统所管理的实体类型。
            </summary>
            <returns>实体类型。</returns>
        </member>
        <member name="M:Fantasy.UpdateSystem`1.Update(`0)">
            <summary>
            在实体更新系统中执行特定实体的更新逻辑。具体的实现应在子类中实现。
            </summary>
            <param name="self">需要执行更新逻辑的实体。</param>
        </member>
        <member name="M:Fantasy.UpdateSystem`1.Invoke(Fantasy.Entity)">
            <summary>
            在实体更新系统中调用更新逻辑。
            </summary>
            <param name="self">需要执行更新逻辑的实体。</param>
        </member>
        <member name="T:Fantasy.OnCreateScene">
            <summary>
            表示当创建新场景时引发的事件数据结构。
            </summary>
        </member>
        <member name="F:Fantasy.OnCreateScene.Scene">
            <summary>
            获取与事件关联的场景实体。
            </summary>
        </member>
        <member name="M:Fantasy.OnCreateScene.#ctor(Fantasy.Scene)">
            <summary>
            初始化一个新的 OnCreateScene 实例。
            </summary>
            <param name="scene"></param>
        </member>
        <member name="T:Fantasy.Scene">
            <summary>
            表示一个场景实体，用于创建与管理特定的游戏场景信息。
            </summary>
        </member>
        <member name="M:Fantasy.Scene.Dispose">
            <summary>
            释放场景实体及其资源。
            </summary>
        </member>
        <member name="M:Fantasy.Scene.CreateScene(System.Int64,System.Int64)">
            <summary>
            创建一个空的Scene
            </summary>
            <param name="id"></param>
            <param name="runtimeId"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.Scene.Create(Fantasy.Server,System.String,System.UInt32,System.Int64,Fantasy.Scene,System.Int32,System.UInt32,System.String,System.String,System.Int32)">
            <summary>
            创建一个新的场景实体，并根据提供的参数配置场景属性。
            </summary>
            <param name="server">所属服务器实体。</param>
            <param name="sceneRuntimeType">Scene运行的类型</param>
            <param name="sceneConfigId">SceneConfig表的Id</param>
            <param name="scene">所属于的Scene。</param>
            <param name="sceneType">场景类型。</param>
            <param name="entityId">场景ID。</param>
            <param name="worldId">世界ID。</param>
            <param name="networkProtocol">网络协议。</param>
            <param name="outerBindIp">外部绑定IP。</param>
            <param name="outerPort">外部端口。</param>
            <returns>新创建的场景实体。</returns>
        </member>
        <member name="P:Fantasy.Scene.SchedulerId">
            <summary>
            当前Scene的调度Id
            </summary>
        </member>
        <member name="P:Fantasy.Scene.ProcessId">
            <summary>
            获取场景的位置ID。
            </summary>
        </member>
        <member name="P:Fantasy.Scene.ThreadSynchronizationContext">
            <summary>
            同步上下文
            </summary>
        </member>
        <member name="P:Fantasy.Scene.Pool">
            <summary>
            Scene的对象池
            </summary>
        </member>
        <member name="P:Fantasy.Scene.SceneType">
            <summary>
            获取或设置场景类型。
            </summary>
        </member>
        <member name="P:Fantasy.Scene.World">
            <summary>
            获取或设置所属世界。
            </summary>
        </member>
        <member name="P:Fantasy.Scene.Server">
            <summary>
            获取或设置所属服务器。
            </summary>
        </member>
        <member name="P:Fantasy.Scene.SceneConfigId">
            <summary>
            SceneConfig对应的表Id。
            </summary>
        </member>
        <member name="P:Fantasy.Scene.Network">
            <summary>
            获取关联的服务端Network网络实例。
            </summary>
        </member>
        <member name="M:Fantasy.Scene.GetEntity(System.Int64)">
            <summary>
            获取指定运行时ID的实体对象
            </summary>
            <param name="runTimeId">运行时ID</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Fantasy.Scene.GetEntity``1(System.Int64)">
            <summary>
            获取指定运行时ID的实体对象。
            </summary>
            <typeparam name="T">实体类型。</typeparam>
            <param name="runTimeId">要获取的实体的运行时ID。</param>
            <returns>找到的实体对象，如果不存在则返回默认值。</returns>
        </member>
        <member name="M:Fantasy.Scene.TryGetEntity(System.Int64,Fantasy.Entity@)">
            <summary>
            尝试获取指定运行时ID的实体对象
            </summary>
            <param name="runTimeId">运行时ID</param>
            <param name="entity">输出参数，实体对象</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="T:Fantasy.IThreadScheduler">
            <summary>
            线程调度器接口。
            </summary>
        </member>
        <member name="M:Fantasy.IThreadScheduler.Add(System.Int64)">
            <summary>
            添加一个场景。
            </summary>
            <param name="sceneSchedulerId"></param>
        </member>
        <member name="M:Fantasy.IThreadScheduler.Update">
            <summary>
            更新线程。
            </summary>
        </member>
        <member name="T:Fantasy.ThreadPoolScheduler">
            <summary>
            线程池调度器。
            </summary>
        </member>
        <member name="T:Fantasy.ThreadScheduler">
            <summary>
            线程调度器。
            </summary>
        </member>
        <member name="F:Fantasy.ThreadScheduler.MainThreadScheduler">
            <summary>
            主线程调度器。
            </summary>
        </member>
        <member name="P:Fantasy.ThreadScheduler.MultiThreadScheduler">
            <summary>
            多线程调度器。
            </summary>
        </member>
        <member name="P:Fantasy.ThreadScheduler.ThreadPoolScheduler">
            <summary>
            线程池调度器。
            </summary>
        </member>
        <member name="M:Fantasy.ThreadScheduler.Update">
            <summary>
            更新调度器。
            </summary>
        </member>
        <member name="M:Fantasy.ThreadScheduler.AddToMainThreadScheduler(System.Int64)">
            <summary>
            添加到主线程调度器。
            </summary>
            <param name="sceneSchedulerId"></param>
        </member>
        <member name="M:Fantasy.ThreadScheduler.AddToMultiThreadScheduler(System.Int64)">
            <summary>
            添加到多线程调度器。
            </summary>
            <param name="sceneSchedulerId"></param>
        </member>
        <member name="M:Fantasy.ThreadScheduler.AddToThreadPoolScheduler(System.Int64)">
            <summary>
            添加到线程池调度器。
            </summary>
            <param name="sceneSchedulerId"></param>
        </member>
        <member name="T:Fantasy.EventSystem">
            <summary>
            事件系统类，用于加卸载程序集，发布和订阅事件。
            </summary>
        </member>
        <member name="M:Fantasy.EventSystem.Publish``1(``0)">
            <summary>
            发布一个值类型的事件数据。
            </summary>
            <typeparam name="TEventData">事件数据类型（值类型）。</typeparam>
            <param name="eventData">事件数据实例。</param>
        </member>
        <member name="M:Fantasy.EventSystem.Publish``1(``0,System.Boolean)">
            <summary>
            发布一个继承自 Entity 的事件数据。
            </summary>
            <typeparam name="TEventData">事件数据类型（继承自 Entity）。</typeparam>
            <param name="eventData">事件数据实例。</param>
            <param name="isDisposed">是否释放事件数据。</param>
        </member>
        <member name="M:Fantasy.EventSystem.PublishAsync``1(``0)">
            <summary>
            异步发布一个值类型的事件数据。
            </summary>
            <typeparam name="TEventData">事件数据类型（值类型）。</typeparam>
            <param name="eventData">事件数据实例。</param>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="M:Fantasy.EventSystem.PublishAsync``1(``0,System.Boolean)">
            <summary>
            异步发布一个继承自 Entity 的事件数据。
            </summary>
            <typeparam name="TEventData">事件数据类型（继承自 Entity）。</typeparam>
            <param name="eventData">事件数据实例。</param>
            <param name="isDisposed">是否释放事件数据。</param>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="M:Fantasy.EventSystem.Dispose">
            <summary>
            清理资源和事件订阅
            </summary>
        </member>
        <member name="T:Fantasy.IEvent">
            <summary>
            定义事件的接口。
            </summary>
        </member>
        <member name="M:Fantasy.IEvent.EventType">
            <summary>
            获取事件的类型。
            </summary>
            <returns>事件的类型。</returns>
        </member>
        <member name="M:Fantasy.IEvent.Invoke(System.Object)">
            <summary>
            调用事件处理方法。
            </summary>
            <param name="self">事件的实例。</param>
        </member>
        <member name="T:Fantasy.IAsyncEvent">
            <summary>
            定义异步事件的接口。
            </summary>
        </member>
        <member name="M:Fantasy.IAsyncEvent.EventType">
            <summary>
            获取事件的类型。
            </summary>
            <returns>事件的类型。</returns>
        </member>
        <member name="M:Fantasy.IAsyncEvent.InvokeAsync(System.Object)">
            <summary>
            异步调用事件处理方法。
            </summary>
            <param name="self">事件的实例。</param>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="T:Fantasy.EventSystem`1">
            <summary>
            事件系统的抽象基类。
            </summary>
            <typeparam name="T">事件的类型。</typeparam>
        </member>
        <member name="M:Fantasy.EventSystem`1.EventType">
            <summary>
            获取事件的类型。
            </summary>
            <returns>事件的类型。</returns>
        </member>
        <member name="M:Fantasy.EventSystem`1.Handler(`0)">
            <summary>
            同步处理事件的方法。
            </summary>
            <param name="self">事件的实例。</param>
        </member>
        <member name="M:Fantasy.EventSystem`1.Invoke(System.Object)">
            <summary>
            调用事件处理方法。
            </summary>
            <param name="self">事件的实例。</param>
        </member>
        <member name="T:Fantasy.AsyncEventSystem`1">
            <summary>
            异步事件系统的抽象基类。
            </summary>
            <typeparam name="T">事件的类型。</typeparam>
        </member>
        <member name="M:Fantasy.AsyncEventSystem`1.EventType">
            <summary>
            获取事件的类型。
            </summary>
            <returns>事件的类型。</returns>
        </member>
        <member name="M:Fantasy.AsyncEventSystem`1.Handler(`0)">
            <summary>
            异步处理事件的方法。
            </summary>
            <param name="self">事件的实例。</param>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="M:Fantasy.AsyncEventSystem`1.InvokeAsync(System.Object)">
            <summary>
            异步调用事件处理方法。
            </summary>
            <param name="self">事件的实例。</param>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="T:Fantasy.ByteHelper">
            <summary>
            提供字节操作辅助方法的静态类。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ReadInt64(System.IO.FileStream)">
            <summary>
            从指定的文件流中读取一个 64 位整数。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ReadInt32(System.IO.FileStream)">
            <summary>
            从指定的文件流中读取一个 32 位整数。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ReadInt64(System.IO.MemoryStream)">
            <summary>
            从指定的内存流中读取一个 64 位整数。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ReadInt32(System.IO.MemoryStream)">
            <summary>
            从指定的内存流中读取一个 32 位整数。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ToHex(System.Byte)">
            <summary>
            将字节转换为十六进制字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ToHex(System.Byte[])">
            <summary>
            将字节数组转换为十六进制字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ToHex(System.Byte[],System.String)">
            <summary>
            将字节数组按指定格式转换为十六进制字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ToHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组的指定范围按十六进制格式转换为字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ToStr(System.Byte[])">
            <summary>
            将字节数组转换为默认编码的字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ToStr(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组的指定范围按默认编码转换为字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.Utf8ToStr(System.Byte[])">
            <summary>
            将字节数组转换为 UTF-8 编码的字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.Utf8ToStr(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组的指定范围按 UTF-8 编码转换为字符串表示。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.WriteTo(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            将无符号整数写入字节数组的指定偏移位置。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.WriteTo(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将有符号整数写入字节数组的指定偏移位置。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.WriteTo(System.Byte[],System.Int32,System.Byte)">
            <summary>
            将字节写入字节数组的指定偏移位置。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.WriteTo(System.Byte[],System.Int32,System.Int16)">
            <summary>
            将有符号短整数写入字节数组的指定偏移位置。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.WriteTo(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            将无符号短整数写入字节数组的指定偏移位置。
            </summary>
        </member>
        <member name="M:Fantasy.ByteHelper.ToReadableSpeed(System.Int64)">
            <summary>
            将字节数转换为可读的速度表示。
            </summary>
            <param name="byteCount">字节数</param>
            <returns>可读的速度表示</returns>
        </member>
        <member name="M:Fantasy.ByteHelper.ToReadableSpeed(System.UInt64)">
            <summary>
            将字节数转换为可读的速度表示。
            </summary>
            <param name="byteCount">字节数</param>
            <returns>可读的速度表示</returns>
        </member>
        <member name="M:Fantasy.ByteHelper.MergeBytes(System.Byte[],System.Byte[])">
            <summary>
            合并两个字节数组。
            </summary>
            <param name="bytes">第一个字节数组</param>
            <param name="otherBytes">第二个字节数组</param>
            <returns>合并后的字节数组</returns>
        </member>
        <member name="M:Fantasy.ByteHelper.GetBytes(System.Int32,System.Byte[])">
            <summary>
            根据int值获取字节数组。
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fantasy.ByteHelper.WriteBytes(System.IO.MemoryStream,System.Int32)">
            <summary>
            根据int值获取字节数组。
            </summary>
            <param name="memoryStream"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fantasy.ByteHelper.GetBytes(System.UInt32@,System.Byte[])">
            <summary>
            根据uint值获取字节数组。
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fantasy.ByteHelper.WriteBytes(System.IO.MemoryStream,System.UInt32)">
            <summary>
            根据uint值获取字节数组。
            </summary>
            <param name="memoryStream"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fantasy.ByteHelper.GetBytes(System.Int64,System.Byte[])">
            <summary>
            根据int值获取字节数组。
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Fantasy.ByteHelper.WriteBytes(System.IO.MemoryStream,System.Int64)">
            <summary>
            根据uint值获取字节数组。
            </summary>
            <param name="memoryStream"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Fantasy.EmitHelper">
            <summary>
            Emit帮助类
            </summary>
        </member>
        <member name="M:Fantasy.EmitHelper.CreateDefaultConstructor``1">
            <summary>
            创建默认构造函数
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Fantasy.EncryptHelper">
            <summary>
            提供计算 MD5 散列值的辅助方法。
            </summary>
        </member>
        <member name="M:Fantasy.EncryptHelper.ComputeSha256Hash(System.Byte[])">
            <summary>
            计算指定字节数组的Sha256。
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.EncryptHelper.FileMD5(System.String)">
            <summary>
            计算指定文件的 MD5 散列值。
            </summary>
            <param name="filePath">要计算散列值的文件路径。</param>
            <returns>表示文件的 MD5 散列值的字符串。</returns>
        </member>
        <member name="M:Fantasy.EncryptHelper.FileMD5(System.IO.FileStream)">
            <summary>
            计算给定文件流的 MD5 散列值。
            </summary>
            <param name="fileStream">要计算散列值的文件流。</param>
            <returns>表示文件流的 MD5 散列值的字符串。</returns>
        </member>
        <member name="M:Fantasy.EncryptHelper.BytesMD5(System.Byte[])">
            <summary>
            计算给定字节数组的 MD5 散列值。
            </summary>
            <param name="bytes">要计算散列值的字节数组。</param>
            <returns>表示字节数组的 MD5 散列值的字符串。</returns>
        </member>
        <member name="T:Fantasy.FileHelper">
            <summary>
            文件操作助手类，提供了各种文件操作方法。
            </summary>
        </member>
        <member name="M:Fantasy.FileHelper.GetFullPath(System.String)">
            <summary>
            获取相对路径的完整路径。
            </summary>
            <param name="relativePath">相对路径。</param>
            <returns>完整路径。</returns>
        </member>
        <member name="M:Fantasy.FileHelper.CreateDirectory(System.String)">
            <summary>
            根据文件夹路径创建文件夹，如果文件夹不存在会自动创建文件夹。
            </summary>
            <param name="directoryPath"></param>
        </member>
        <member name="M:Fantasy.FileHelper.Copy(System.String,System.String,System.Boolean)">
            <summary>
            将文件复制到目标路径，如果目标目录不存在会自动创建目录。
            </summary>
            <param name="sourceFile">源文件路径。</param>
            <param name="destinationFile">目标文件路径。</param>
            <param name="overwrite">是否覆盖已存在的目标文件。</param>
        </member>
        <member name="M:Fantasy.FileHelper.GetDirectoriesByFilePath(System.String)">
            <summary>
            获取文件路径内的所有文件夹路径。
            </summary>
            <param name="filePath">文件路径。</param>
            <returns>文件夹路径列表。</returns>
        </member>
        <member name="M:Fantasy.FileHelper.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            将文件夹内的所有内容复制到目标位置。
            </summary>
            <param name="sourceDirectory">源文件夹路径。</param>
            <param name="destinationDirectory">目标文件夹路径。</param>
            <param name="overwrite">是否覆盖已存在的文件。</param>
        </member>
        <member name="M:Fantasy.FileHelper.GetDirectoryFile(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取目录下的所有文件
            </summary>
            <param name="folderPath">文件夹路径。</param>
            <param name="searchPattern">需要查找的文件通配符</param>
            <param name="searchOption">查找的类型</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.FileHelper.ClearDirectoryFile(System.String)">
            <summary>
            清空文件夹内的所有文件。
            </summary>
            <param name="folderPath">文件夹路径。</param>
        </member>
        <member name="T:Fantasy.JsonHelper">
            <summary>
            提供操作 JSON 数据的辅助方法。
            </summary>
        </member>
        <member name="M:Fantasy.JsonHelper.ToJson``1(``0)">
            <summary>
            将对象序列化为 JSON 字符串。
            </summary>
            <typeparam name="T">要序列化的对象类型。</typeparam>
            <param name="t">要序列化的对象。</param>
            <returns>表示序列化对象的 JSON 字符串。</returns>
        </member>
        <member name="M:Fantasy.JsonHelper.Deserialize(System.String,System.Type,System.Boolean)">
            <summary>
            反序列化 JSON 字符串为指定类型的对象。
            </summary>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <param name="type">目标对象的类型。</param>
            <param name="reflection">是否使用反射进行反序列化（默认为 true）。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.JsonHelper.Deserialize``1(System.String)">
            <summary>
            反序列化 JSON 字符串为指定类型的对象。
            </summary>
            <typeparam name="T">目标对象的类型。</typeparam>
            <param name="json">要反序列化的 JSON 字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.JsonHelper.Clone``1(``0)">
            <summary>
            克隆对象，通过将对象序列化为 JSON，然后再进行反序列化。
            </summary>
            <typeparam name="T">要克隆的对象类型。</typeparam>
            <param name="t">要克隆的对象。</param>
            <returns>克隆后的对象。</returns>
        </member>
        <member name="T:Fantasy.MongoHelper">
            <summary>
            提供与MongoDB数据序列化和反序列化相关的帮助方法。
            </summary>
        </member>
        <member name="M:Fantasy.MongoHelper.Deserialize``1(System.Byte[])">
            <summary>
            将字节数组反序列化为指定类型的对象。
            </summary>
            <typeparam name="T">要反序列化的目标类型。</typeparam>
            <param name="bytes">要反序列化的字节数组。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.MongoHelper.Deserialize(System.Byte[],System.Type)">
            <summary>
            将字节数组反序列化为指定类型的对象。
            </summary>
            <param name="bytes">要反序列化的字节数组。</param>
            <param name="type">要反序列化的目标类型。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.MongoHelper.Deserialize(System.Byte[],System.String)">
            <summary>
            将字节数组反序列化为指定类型的对象。
            </summary>
            <param name="bytes">要反序列化的字节数组。</param>
            <param name="type">要反序列化的目标类型的类型名字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.MongoHelper.Deserialize``1(System.IO.Stream)">
            <summary>
            将输入流中的数据反序列化为指定类型的对象。
            </summary>
            <typeparam name="T">要反序列化的目标类型。</typeparam>
            <param name="stream">输入流。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.MongoHelper.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            将输入流中的数据反序列化为指定类型的对象。
            </summary>
            <param name="stream">输入流。</param>
            <param name="type">要反序列化的目标类型。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.MongoHelper.DeserializeFrom(System.Type,System.IO.MemoryStream)">
            <summary>
            将内存流中的数据反序列化为指定类型的对象。
            </summary>
            <param name="type">要反序列化的目标类型。</param>
            <param name="stream">内存流。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.MongoHelper.DeserializeFrom``1(System.IO.MemoryStream)">
            <summary>
            将内存流中的数据反序列化为指定类型的对象。
            </summary>
            <typeparam name="T">要反序列化的目标类型。</typeparam>
            <param name="stream">内存流。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.MongoHelper.DeserializeFrom``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组中指定范围的数据反序列化为指定类型的对象。
            </summary>
            <typeparam name="T">要反序列化的目标类型。</typeparam>
            <param name="bytes">字节数组。</param>
            <param name="index">开始索引。</param>
            <param name="count">数据长度。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:Fantasy.MongoHelper.SerializeTo``1(``0)">
            <summary>
            将对象序列化为字节数组。
            </summary>
            <typeparam name="T">要序列化的对象类型。</typeparam>
            <param name="t">要序列化的对象。</param>
            <returns>序列化后的字节数组。</returns>
        </member>
        <member name="M:Fantasy.MongoHelper.SerializeTo``1(``0,System.IO.MemoryStream)">
            <summary>
            将对象序列化并写入到指定的内存流中。
            </summary>
            <typeparam name="T">要序列化的对象类型。</typeparam>
            <param name="t">要序列化的对象。</param>
            <param name="stream">要写入的内存流。</param>
        </member>
        <member name="M:Fantasy.MongoHelper.Clone``1(``0)">
            <summary>
            克隆一个对象，通过序列化和反序列化的方式实现。
            </summary>
            <typeparam name="T">要克隆的对象类型。</typeparam>
            <param name="t">要克隆的对象。</param>
            <returns>克隆后的对象。</returns>
        </member>
        <member name="T:Fantasy.StructBsonSerialize`1">
            <summary>
            提供对结构体类型进行 BSON 序列化和反序列化的辅助类。
            </summary>
            <typeparam name="TValue">要序列化和反序列化的结构体类型。</typeparam>
        </member>
        <member name="M:Fantasy.StructBsonSerialize`1.Serialize(MongoDB.Bson.Serialization.BsonSerializationContext,MongoDB.Bson.Serialization.BsonSerializationArgs,`0)">
            <summary>
            将结构体对象序列化为 BSON 数据。
            </summary>
            <param name="context">序列化上下文。</param>
            <param name="args">序列化参数。</param>
            <param name="value">要序列化的结构体对象。</param>
        </member>
        <member name="M:Fantasy.StructBsonSerialize`1.Deserialize(MongoDB.Bson.Serialization.BsonDeserializationContext,MongoDB.Bson.Serialization.BsonDeserializationArgs)">
            <summary>
            将 BSON 数据反序列化为结构体对象。
            </summary>
            <param name="context">反序列化上下文。</param>
            <param name="args">反序列化参数。</param>
            <returns>反序列化得到的结构体对象。</returns>
        </member>
        <member name="T:Fantasy.NetworkHelper">
            <summary>
            提供网络操作相关的帮助方法。
            </summary>
        </member>
        <member name="M:Fantasy.NetworkHelper.Clone(System.Net.EndPoint)">
            <summary>
            克隆一个IPEndPoint
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.NetworkHelper.IPEndPointEquals(System.Net.EndPoint,System.Net.IPEndPoint)">
            <summary>
            比较两个IPEndPoint是否相等
            </summary>
            <param name="endPoint"></param>
            <param name="ipEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.NetworkHelper.IPEndPointEquals(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            比较两个IPEndPoint是否相等
            </summary>
            <param name="endPoint"></param>
            <param name="ipEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.NetworkHelper.GetAddressIPs">
            <summary>
            获取本机所有网络适配器的IP地址。
            </summary>
            <returns>IP地址数组。</returns>
        </member>
        <member name="M:Fantasy.NetworkHelper.ToIPEndPoint(System.String,System.Int32)">
            <summary>
            将主机名和端口号转换为 <see cref="T:System.Net.IPEndPoint"/> 实例。
            </summary>
            <param name="host">主机名。</param>
            <param name="port">端口号。</param>
            <returns><see cref="T:System.Net.IPEndPoint"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.NetworkHelper.ToIPEndPoint(System.String)">
            <summary>
            将地址字符串转换为 <see cref="T:System.Net.IPEndPoint"/> 实例。
            </summary>
            <param name="address">地址字符串，格式为 "主机名:端口号"。</param>
            <returns><see cref="T:System.Net.IPEndPoint"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.NetworkHelper.IPEndPointToStr(System.Net.IPEndPoint)">
            <summary>
            将 <see cref="T:System.Net.IPEndPoint"/> 实例转换为字符串表示形式。
            </summary>
            <param name="self"><see cref="T:System.Net.IPEndPoint"/> 实例。</param>
            <returns>表示 <see cref="T:System.Net.IPEndPoint"/> 的字符串。</returns>
        </member>
        <member name="M:Fantasy.NetworkHelper.SetSioUdpConnReset(System.Net.Sockets.Socket)">
            <summary>
            针对 Windows 平台设置UDP连接重置选项。
            </summary>
            <param name="socket">要设置选项的 <see cref="T:System.Net.Sockets.Socket"/> 实例。</param>
        </member>
        <member name="M:Fantasy.NetworkHelper.SetSocketBufferToOsLimit(System.Net.Sockets.Socket)">
            <summary>
            将 Socket 缓冲区大小设置为操作系统限制。
            </summary>
            <param name="socket">要设置缓冲区大小的 Socket。</param>
        </member>
        <member name="M:Fantasy.NetworkHelper.SetReceiveBufferToOSLimit(System.Net.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            将 Socket 接收缓冲区大小设置为操作系统限制。
            尝试增加接收缓冲区大小的次数 = 默认 + 最大增加 100 MB。
            </summary>
            <param name="socket">要设置接收缓冲区大小的 Socket。</param>
            <param name="stepSize">每次增加的步长大小。</param>
            <param name="attempts">尝试增加缓冲区大小的次数。</param>
        </member>
        <member name="M:Fantasy.NetworkHelper.SetSendBufferToOSLimit(System.Net.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            将 Socket 发送缓冲区大小设置为操作系统限制。
            尝试增加发送缓冲区大小的次数 = 默认 + 最大增加 100 MB。
            </summary>
            <param name="socket">要设置发送缓冲区大小的 Socket。</param>
            <param name="stepSize">每次增加的步长大小。</param>
            <param name="attempts">尝试增加缓冲区大小的次数。</param>
        </member>
        <member name="T:Fantasy.IProto">
            <summary>
            提供 ProtoBuff 序列化和反序列化支持的接口。
            </summary>
        </member>
        <member name="T:Fantasy.AProto">
            <summary>
            提供 ProtoBuff 序列化和反序列化支持的抽象基类。
            </summary>
        </member>
        <member name="M:Fantasy.AProto.AfterDeserialization">
            <summary>
            在反序列化完成后执行的操作，可以在子类中重写以完成初始化。
            </summary>
        </member>
        <member name="M:Fantasy.AProto.EndInit">
            <summary>
            在 <see cref="M:Fantasy.AProto.AfterDeserialization"/> 中调用，用于完成子类的初始化操作。
            </summary>
        </member>
        <member name="T:Fantasy.ProtoBuffHelper">
            <summary>
            提供ProtoBuf序列化和反序列化的帮助方法类。
            </summary>
        </member>
        <member name="M:Fantasy.ProtoBuffHelper.Initialize">
            <summary>
            初始化 ProtoBuffHelper。
            </summary>
        </member>
        <member name="M:Fantasy.ProtoBuffHelper.FromBytes``1(System.Byte[])">
            <summary>
            从指定的字节数组中的指定范围反序列化对象。
            </summary>
            <param name="bytes"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.ProtoBuffHelper.FromBytes``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从指定的字节数组中的指定范围反序列化对象。
            </summary>
            <typeparam name="T">要反序列化的对象类型。</typeparam>
            <param name="bytes">包含对象序列化数据的字节数组。</param>
            <param name="index">要反序列化数据的起始索引。</param>
            <param name="count">要反序列化的字节数据长度。</param>
            <returns>反序列化得到的对象。</returns>
        </member>
        <member name="M:Fantasy.ProtoBuffHelper.FromBytes(System.Type,System.Byte[],System.Int32,System.Int32)">
            <summary>
            从指定的字节数组中的指定范围反序列化对象。
            </summary>
            <param name="type">要反序列化的对象类型。</param>
            <param name="bytes">包含对象序列化数据的字节数组。</param>
            <param name="index">要反序列化数据的起始索引。</param>
            <param name="count">要反序列化的字节数据长度。</param>
            <returns>反序列化得到的对象。</returns>
        </member>
        <member name="M:Fantasy.ProtoBuffHelper.ToStream(System.Object,System.IO.MemoryStream)">
            <summary>
            将对象序列化到指定的流中。
            </summary>
            <param name="message">要序列化的对象。</param>
            <param name="stream">目标流。</param>
        </member>
        <member name="M:Fantasy.ProtoBuffHelper.ToBytes(System.Object)">
            <summary>
            将对象序列化为字节数组。
            </summary>
            <param name="message">要序列化的对象。</param>
            <returns>包含序列化数据的字节数组。</returns>
        </member>
        <member name="M:Fantasy.ProtoBuffHelper.FromStream(System.Type,System.IO.MemoryStream)">
            <summary>
            从指定的流中反序列化对象。
            </summary>
            <param name="type">要反序列化的对象类型。</param>
            <param name="stream">包含对象序列化数据的流。</param>
            <returns>反序列化得到的对象。</returns>
        </member>
        <member name="M:Fantasy.ProtoBuffHelper.FromStream``1(System.IO.MemoryStream)">
            <summary>
            从指定的流中反序列化对象。
            </summary>
            <typeparam name="T">要反序列化的对象类型。</typeparam>
            <param name="stream">包含对象序列化数据的流。</param>
            <returns>反序列化得到的对象。</returns>
        </member>
        <member name="M:Fantasy.ProtoBuffHelper.Clone``1(``0)">
            <summary>
            克隆一个对象，通过序列化和反序列化实现深度复制。
            </summary>
            <typeparam name="T">要克隆的对象类型。</typeparam>
            <param name="t">要克隆的对象。</param>
            <returns>克隆后的新对象。</returns>
        </member>
        <member name="T:Fantasy.RandomHelper">
            <summary>
            随机数操作助手类，提供各种随机数生成和操作方法。
            </summary>
        </member>
        <member name="M:Fantasy.RandomHelper.RandUInt64">
            <summary>
            生成一个随机的无符号 64 位整数。
            </summary>
            <returns>无符号 64 位整数。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.RandInt64">
            <summary>
            生成一个随机的 64 位整数。
            </summary>
            <returns>64 位整数。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.RandUInt32">
            <summary>
            生成一个随机的无符号 32 位整数。
            </summary>
            <returns>无符号 32 位整数。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.RandUInt16">
            <summary>
            生成一个随机的无符号 16 位整数。
            </summary>
            <returns>无符号 16 位整数。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.RandomNumber(System.Int32,System.Int32)">
            <summary>
            在指定范围内生成一个随机整数（包含下限，不包含上限）。
            </summary>
            <param name="lower">下限。</param>
            <param name="upper">上限。</param>
            <returns>生成的随机整数。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.RandomBool">
            <summary>
            生成一个随机的布尔值。
            </summary>
            <returns>随机的布尔值。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.RandomArray``1(``0[])">
            <summary>
            从数组中随机选择一个元素。
            </summary>
            <typeparam name="T">数组元素的类型。</typeparam>
            <param name="array">要选择的数组。</param>
            <returns>随机选择的数组元素。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.RandomArray``1(System.Collections.Generic.List{``0})">
            <summary>
            从列表中随机选择一个元素。
            </summary>
            <typeparam name="T">列表元素的类型。</typeparam>
            <param name="array">要选择的列表。</param>
            <returns>随机选择的列表元素。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.BreakRank``1(System.Collections.Generic.List{``0})">
            <summary>
            打乱列表中元素的顺序。
            </summary>
            <typeparam name="T">列表元素的类型。</typeparam>
            <param name="arr">要打乱顺序的列表。</param>
        </member>
        <member name="M:Fantasy.RandomHelper.RandFloat01">
            <summary>
            生成一个介于 0 和 1 之间的随机单精度浮点数。
            </summary>
            <returns>随机单精度浮点数。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.RandomByWeight(System.Int32[])">
            <summary>
            根据权重随机选择一个索引。
            </summary>
            <param name="weights">权重数组，每个元素表示相应索引的权重。</param>
            <returns>随机选择的索引值。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.RandomByFixedProbability(System.Int32[])">
            <summary>
            根据固定概率随机选择一个索引，即某个数值上限内随机多少次。
            </summary>
            <param name="args">概率数组，每个元素表示相应索引的概率。</param>
            <returns>随机选择的索引值。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.NextFloat(System.Boolean)">
            <summary>
            返回随机数。
            </summary>
            <param name="containNegative">是否包含负数。</param>
            <returns>返回一个随机的单精度浮点数。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.NextFloat(System.Single)">
            <summary>
            返回一个小于所指定最大值的非负随机数。
            </summary>
            <param name="maxValue">要生成的随机数的上限（随机数不能取该上限值）。 maxValue 必须大于或等于零。</param>
            <returns>大于等于零且小于 maxValue 的单精度浮点数，即：返回值的范围通常包括零但不包括 maxValue。 不过，如果 maxValue 等于零，则返回 maxValue。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.NextFloat(System.Single,System.Single)">
            <summary>
            返回一个指定范围内的随机数。
            </summary>
            <param name="minValue">返回的随机数的下界（随机数可取该下界值）。</param>
            <param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。 maxValue 必须大于或等于 minValue。</param>
            <returns>一个大于等于 minValue 且小于 maxValue 的单精度浮点数，即：返回的值范围包括 minValue 但不包括 maxValue。 如果 minValue 等于 maxValue，则返回 minValue。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.NextVector2(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            在指定的矩形区域内随机生成一个二维向量位置。
            </summary>
            <param name="minX">X轴最小值。</param>
            <param name="maxX">X轴最大值。</param>
            <param name="minY">Y轴最小值。</param>
            <param name="maxY">Y轴最大值。</param>
            <returns>随机生成的二维向量位置。</returns>
        </member>
        <member name="M:Fantasy.RandomHelper.RandomNumberCode(System.Int32)">
            <summary>
            生成指定长度的随机数字代码。
            </summary>
            <param name="len">数字代码的长度。</param>
            <returns>生成的随机数字代码。</returns>
        </member>
        <member name="T:Fantasy.TimeHelper">
            <summary>
            提供与时间相关的帮助方法。
            </summary>
        </member>
        <member name="F:Fantasy.TimeHelper.Hour">
            <summary>
            一小时的毫秒值。
            </summary>
        </member>
        <member name="F:Fantasy.TimeHelper.Minute">
            <summary>
            一分钟的毫秒值。
            </summary>
        </member>
        <member name="F:Fantasy.TimeHelper.OneDay">
            <summary>
            一天的毫秒值。
            </summary>
        </member>
        <member name="P:Fantasy.TimeHelper.Now">
            <summary>
            获取当前时间的毫秒数，从1970年1月1日开始计算。
            </summary>
        </member>
        <member name="M:Fantasy.TimeHelper.Transition(System.DateTime)">
            <summary>
            将日期时间转换为毫秒数，从1970年1月1日开始计算。
            </summary>
            <param name="d">要转换的日期时间。</param>
            <returns>转换后的毫秒数。</returns>
        </member>
        <member name="M:Fantasy.TimeHelper.Transition(System.Int64)">
            <summary>
            将毫秒数转换为日期时间。
            </summary>
            <param name="timeStamp">要转换的毫秒数。</param>
            <returns>转换后的日期时间。</returns>
        </member>
        <member name="M:Fantasy.TimeHelper.TransitionLocal(System.Int64)">
            <summary>
            将毫秒数转换为本地时间的日期时间。
            </summary>
            <param name="timeStamp">要转换的毫秒数。</param>
            <returns>转换后的本地时间的日期时间。</returns>
        </member>
        <member name="T:Fantasy.WinPeriod">
            <summary>
            精度设置
            </summary>
        </member>
        <member name="M:Fantasy.WinPeriod.Initialize">
            <summary>
            针对Windows平台设置精度
            </summary>
        </member>
        <member name="T:Fantasy.IdFactory">
            <summary>
            提供用于生成不同类型 ID 的工厂类。
            </summary>
        </member>
        <member name="M:Fantasy.IdFactory.NextRunTimeId">
            <summary>
            生成下一个运行时 ID。
            </summary>
            <returns>生成的运行时 ID。</returns>
        </member>
        <member name="M:Fantasy.IdFactory.NextEntityId(System.UInt32)">
            <summary>
            生成下一个实体 ID。
            </summary>
            <param name="processId">进程 ID。</param>
            <returns>生成的实体 ID。</returns>
        </member>
        <member name="M:Fantasy.IdFactory.GetRouteId(System.Int64)">
            <summary>
            获取实体 ID 对应的路由 ID。
            </summary>
            <param name="entityId">实体 ID。</param>
            <returns>路由 ID。</returns>
        </member>
        <member name="M:Fantasy.IdFactory.GetAppId(System.Int64)">
            <summary>
            获取实体 ID 对应的应用 ID。
            </summary>
            <param name="entityId">实体 ID。</param>
            <returns>应用 ID。</returns>
        </member>
        <member name="M:Fantasy.IdFactory.GetWordId(System.Int64)">
            <summary>
            获取实体 ID 对应的世界 ID。
            </summary>
            <param name="entityId">实体 ID。</param>
            <returns>世界 ID。</returns>
        </member>
        <member name="T:Fantasy.EntityIdStruct">
            <summary>
            实体的唯一标识符结构。
            </summary>
        </member>
        <member name="P:Fantasy.EntityIdStruct.Time">
            <summary>
            获取或设置实体的时间戳部分。
            </summary>
        </member>
        <member name="P:Fantasy.EntityIdStruct.Sequence">
            <summary>
            获取或设置实体的序列号部分。
            </summary>
        </member>
        <member name="P:Fantasy.EntityIdStruct.ProcessId">
            <summary>
            获取或设置实体的位置 ID。
            </summary>
        </member>
        <member name="P:Fantasy.EntityIdStruct.AppId">
            <summary>
            获取实体 ID 对应的 AppId。
            </summary>
        </member>
        <member name="P:Fantasy.EntityIdStruct.WordId">
            <summary>
            获取实体 ID 对应的 WordId。
            </summary>
        </member>
        <member name="F:Fantasy.EntityIdStruct.MaskRouteId">
            <summary>
            表示用于掩码的 RouteId。
            </summary>
        </member>
        <member name="F:Fantasy.EntityIdStruct.MaskSequence">
            <summary>
            表示用于掩码的 Sequence。
            </summary>
        </member>
        <member name="M:Fantasy.EntityIdStruct.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            初始化 <see cref="T:Fantasy.EntityIdStruct"/> 结构的新实例。
            </summary>
            <param name="processId">ServerID。</param>
            <param name="time">时间戳。</param>
            <param name="sequence">序列号。</param>
        </member>
        <member name="M:Fantasy.EntityIdStruct.op_Implicit(Fantasy.EntityIdStruct)~System.Int64">
            <summary>
            将 <see cref="T:Fantasy.EntityIdStruct"/> 隐式转换为 <see cref="T:System.Int64"/> 类型。
            </summary>
            <param name="entityIdStruct">要转换的 <see cref="T:Fantasy.EntityIdStruct"/> 实例。</param>
        </member>
        <member name="M:Fantasy.EntityIdStruct.op_Implicit(System.Int64)~Fantasy.EntityIdStruct">
            <summary>
            将 <see cref="T:System.Int64"/> 类型隐式转换为 <see cref="T:Fantasy.EntityIdStruct"/>。
            </summary>
            <param name="id">要转换的 <see cref="T:System.Int64"/> 类型的值。</param>
        </member>
        <member name="T:Fantasy.RouteIdStruct">
            <summary>
            表示一个路由 ID 的结构。
            </summary>
        </member>
        <member name="F:Fantasy.RouteIdStruct.AppId">
            <summary>
            进程 ID
            </summary>
        </member>
        <member name="F:Fantasy.RouteIdStruct.WordId">
            <summary>
            世界 ID
            </summary>
        </member>
        <member name="F:Fantasy.RouteIdStruct.MaskAppId">
            <summary>
            AppId 的掩码。
            </summary>
        </member>
        <member name="F:Fantasy.RouteIdStruct.MaskWordId">
            <summary>
            WordId 的掩码。
            </summary>
        </member>
        <member name="M:Fantasy.RouteIdStruct.#ctor(System.UInt16,System.UInt16)">
            <summary>
            初始化一个新的路由 ID 结构。
            </summary>
            <param name="appId">进程 ID。</param>
            <param name="wordId">世界 ID。</param>
        </member>
        <member name="M:Fantasy.RouteIdStruct.op_Implicit(Fantasy.RouteIdStruct)~System.UInt32">
            <summary>
            将路由 ID 结构隐式转换为无符号整型。
            </summary>
            <param name="routeId">要转换的路由 ID 结构。</param>
        </member>
        <member name="M:Fantasy.RouteIdStruct.op_Implicit(System.UInt32)~Fantasy.RouteIdStruct">
            <summary>
            将无符号整型隐式转换为路由 ID 结构。
            </summary>
            <param name="routeId">要转换的无符号整型路由 ID。</param>
        </member>
        <member name="T:Fantasy.RuntimeIdStruct">
            <summary>
            表示一个运行时 ID 的结构。
            </summary>
        </member>
        <member name="M:Fantasy.RuntimeIdStruct.#ctor(System.UInt32,System.UInt32)">
            <summary>
            初始化一个新的运行时 ID 结构。
            </summary>
            <param name="time">时间部分。</param>
            <param name="sequence">序列号部分。</param>
        </member>
        <member name="M:Fantasy.RuntimeIdStruct.op_Implicit(Fantasy.RuntimeIdStruct)~System.Int64">
            <summary>
            将运行时 ID 结构隐式转换为长整型。
            </summary>
            <param name="runtimeId">要转换的运行时 ID 结构。</param>
        </member>
        <member name="M:Fantasy.RuntimeIdStruct.op_Implicit(System.Int64)~Fantasy.RuntimeIdStruct">
            <summary>
            将长整型隐式转换为运行时 ID 结构。
            </summary>
            <param name="id">要转换的长整型 ID。</param>
        </member>
        <member name="T:Fantasy.InnerErrorCode">
            <summary>
            定义 Fantasy 框架中的内部错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.InnerErrorCode.ErrRpcFail">
            <summary>
            表示 Rpc 消息发送失败的错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.InnerErrorCode.ErrNotFoundRoute">
            <summary>
            表示未找到 Route 消息的错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.InnerErrorCode.ErrRouteTimeout">
            <summary>
            表示发送 Route 消息超时的错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.InnerErrorCode.ErrEntityNotFound">
            <summary>
            表示未找到实体的错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.InnerErrorCode.ErrTransfer">
            <summary>
            表示传送过程中发生错误的错误代码。
            </summary>
        </member>
        <member name="T:Fantasy.ILog">
            <summary>
            定义日志记录功能的接口。
            </summary>
        </member>
        <member name="M:Fantasy.ILog.Trace(System.String)">
            <summary>
            记录跟踪级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ILog.Warning(System.String)">
            <summary>
            记录警告级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ILog.Info(System.String)">
            <summary>
            记录信息级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ILog.Debug(System.String)">
            <summary>
            记录调试级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ILog.Error(System.String)">
            <summary>
            记录错误级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.ILog.Trace(System.String,System.Object[])">
            <summary>
            记录跟踪级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ILog.Warning(System.String,System.Object[])">
            <summary>
            记录警告级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ILog.Info(System.String,System.Object[])">
            <summary>
            记录信息级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ILog.Debug(System.String,System.Object[])">
            <summary>
            记录调试级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.ILog.Error(System.String,System.Object[])">
            <summary>
            记录错误级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="T:Fantasy.Log">
            <summary>
            提供日志记录功能的静态类。
            </summary>
        </member>
        <member name="M:Fantasy.Log.Trace(System.String)">
            <summary>
            记录跟踪级别的日志消息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.Debug(System.String)">
            <summary>
            记录调试级别的日志消息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.Info(System.String)">
            <summary>
            记录信息级别的日志消息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.TraceInfo(System.String)">
            <summary>
            记录跟踪级别的日志消息，并附带调用栈信息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.Warning(System.String)">
            <summary>
            记录警告级别的日志消息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.Error(System.String)">
            <summary>
            记录错误级别的日志消息，并附带调用栈信息。
            </summary>
            <param name="msg">日志消息。</param>
        </member>
        <member name="M:Fantasy.Log.Error(System.Exception)">
            <summary>
            记录异常的错误级别的日志消息，并附带调用栈信息。
            </summary>
            <param name="e">异常对象。</param>
        </member>
        <member name="M:Fantasy.Log.Trace(System.String,System.Object[])">
            <summary>
            记录跟踪级别的格式化日志消息，并附带调用栈信息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.Log.Warning(System.String,System.Object[])">
            <summary>
            记录警告级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.Log.Info(System.String,System.Object[])">
            <summary>
            记录信息级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.Log.Debug(System.String,System.Object[])">
            <summary>
            记录调试级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.Log.Error(System.String,System.Object[])">
            <summary>
            记录错误级别的格式化日志消息，并附带调用栈信息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="T:Fantasy.NLog">
            <summary>
            使用 NLog 实现的日志记录器。
            </summary>
        </member>
        <member name="M:Fantasy.NLog.#ctor(System.String)">
            <summary>
            初始化 NLog 实例。
            </summary>
            <param name="name">日志记录器的名称。</param>
        </member>
        <member name="M:Fantasy.NLog.Trace(System.String)">
            <summary>
            记录跟踪级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.NLog.Warning(System.String)">
            <summary>
            记录警告级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.NLog.Info(System.String)">
            <summary>
            记录信息级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.NLog.Debug(System.String)">
            <summary>
            记录调试级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.NLog.Error(System.String)">
            <summary>
            记录错误级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.NLog.Fatal(System.String)">
            <summary>
            记录严重错误级别的日志消息。
            </summary>
            <param name="message">日志消息。</param>
        </member>
        <member name="M:Fantasy.NLog.Trace(System.String,System.Object[])">
            <summary>
            记录跟踪级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.NLog.Warning(System.String,System.Object[])">
            <summary>
            记录警告级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.NLog.Info(System.String,System.Object[])">
            <summary>
            记录信息级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.NLog.Debug(System.String,System.Object[])">
            <summary>
            记录调试级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.NLog.Error(System.String,System.Object[])">
            <summary>
            记录错误级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="M:Fantasy.NLog.Fatal(System.String,System.Object[])">
            <summary>
            记录严重错误级别的格式化日志消息。
            </summary>
            <param name="message">日志消息模板。</param>
            <param name="args">格式化参数。</param>
        </member>
        <member name="T:Fantasy.AddressableHelper">
            <summary>
            提供操作地址映射的辅助方法。
            </summary>
        </member>
        <member name="M:Fantasy.AddressableHelper.AddAddressable(Fantasy.Scene,System.Int64,System.Int64,System.Boolean)">
            <summary>
            添加地址映射并返回操作结果。
            </summary>
            <param name="scene">场景实例。</param>
            <param name="addressableId">地址映射的唯一标识。</param>
            <param name="routeId">路由 ID。</param>
            <param name="isLock">是否锁定。</param>
        </member>
        <member name="M:Fantasy.AddressableHelper.GetAddressableRouteId(Fantasy.Scene,System.Int64)">
            <summary>
            获取地址映射的路由 ID。
            </summary>
            <param name="scene">场景实例。</param>
            <param name="addressableId">地址映射的唯一标识。</param>
            <returns>地址映射的路由 ID。</returns>
        </member>
        <member name="M:Fantasy.AddressableHelper.RemoveAddressable(Fantasy.Scene,System.Int64)">
            <summary>
            移除指定地址映射。
            </summary>
            <param name="scene">场景实例。</param>
            <param name="addressableId">地址映射的唯一标识。</param>
        </member>
        <member name="M:Fantasy.AddressableHelper.LockAddressable(Fantasy.Scene,System.Int64)">
            <summary>
            锁定指定地址映射。
            </summary>
            <param name="scene">场景实例。</param>
            <param name="addressableId">地址映射的唯一标识。</param>
        </member>
        <member name="M:Fantasy.AddressableHelper.UnLockAddressable(Fantasy.Scene,System.Int64,System.Int64,System.String)">
            <summary>
            解锁指定地址映射。
            </summary>
            <param name="scene">场景实例。</param>
            <param name="addressableId">地址映射的唯一标识。</param>
            <param name="routeId">路由 ID。</param>
            <param name="source">解锁来源。</param>
        </member>
        <member name="M:Fantasy.AddressableManageComponent.Add(System.Int64,System.Int64,System.Boolean)">
            <summary>
            添加地址映射。
            </summary>
            <param name="addressableId">地址映射的唯一标识。</param>
            <param name="routeId">路由 ID。</param>
            <param name="isLock">是否进行锁定。</param>
        </member>
        <member name="M:Fantasy.AddressableManageComponent.Get(System.Int64)">
            <summary>
            获取地址映射的路由 ID。
            </summary>
            <param name="addressableId">地址映射的唯一标识。</param>
            <returns>地址映射的路由 ID。</returns>
        </member>
        <member name="M:Fantasy.AddressableManageComponent.Remove(System.Int64)">
            <summary>
            移除地址映射。
            </summary>
            <param name="addressableId">地址映射的唯一标识。</param>
        </member>
        <member name="M:Fantasy.AddressableManageComponent.Lock(System.Int64)">
            <summary>
            锁定地址映射。
            </summary>
            <param name="addressableId">地址映射的唯一标识。</param>
        </member>
        <member name="M:Fantasy.AddressableManageComponent.UnLock(System.Int64,System.Int64,System.String)">
            <summary>
            解锁地址映射。
            </summary>
            <param name="addressableId">地址映射的唯一标识。</param>
            <param name="routeId">新的路由 ID。</param>
            <param name="source">解锁来源。</param>
        </member>
        <member name="T:Fantasy.AddressableMessageComponent">
            <summary>
            可寻址消息组件、挂载了这个组件可以接收Addressable消息
            </summary>
        </member>
        <member name="F:Fantasy.AddressableMessageComponent.AddressableId">
            <summary>
            可寻址消息组件的唯一标识。
            </summary>
        </member>
        <member name="M:Fantasy.AddressableMessageComponent.Register(System.Boolean)">
            <summary>
            注册可寻址消息组件。
            </summary>
            <param name="isLock">是否进行锁定。</param>
        </member>
        <member name="M:Fantasy.AddressableMessageComponent.Lock">
            <summary>
            锁定可寻址消息组件。
            </summary>
        </member>
        <member name="M:Fantasy.AddressableMessageComponent.UnLock(System.String)">
            <summary>
            解锁可寻址消息组件。
            </summary>
            <param name="source">解锁来源。</param>
        </member>
        <member name="T:Fantasy.AddressableRouteComponent">
            <summary>
            可寻址路由消息组件，挂载了这个组件可以接收和发送 Addressable 消息。
            </summary>
        </member>
        <member name="F:Fantasy.AddressableRouteComponent.RouteId">
            <summary>
            用于存储当前可寻址路由消息的路由 ID
            </summary>
        </member>
        <member name="F:Fantasy.AddressableRouteComponent.AddressableId">
            <summary>
            可寻址路由消息组件的地址映射 ID，只可在类内部设置，外部只可读取
            </summary>
        </member>
        <member name="F:Fantasy.AddressableRouteComponent.AddressableRouteLock">
            <summary>
            用于管理 Addressable 路由消息的锁队列。
            </summary>
        </member>
        <member name="F:Fantasy.AddressableRouteComponent.TimerComponent">
            <summary>
            任务调度器组件。
            </summary>
        </member>
        <member name="F:Fantasy.AddressableRouteComponent.NetworkMessagingComponent">
            <summary>
            网络消息组件。
            </summary>
        </member>
        <member name="F:Fantasy.AddressableRouteComponent.MessageDispatcherComponent">
            <summary>
            网络消息分发组件。
            </summary>
        </member>
        <member name="M:Fantasy.AddressableRouteComponent.Send(Fantasy.IAddressableRouteMessage)">
            <summary>
            发送可寻址路由消息。
            </summary>
            <param name="message">可寻址路由消息。</param>
        </member>
        <member name="M:Fantasy.AddressableRouteComponent.Send(System.Int64,System.Type,System.IO.MemoryStream)">
            <summary>
            发送可寻址路由消息。
            </summary>
            <param name="routeTypeOpCode">路由类型操作码。</param>
            <param name="requestType">请求类型。</param>
            <param name="message">消息数据。</param>
        </member>
        <member name="M:Fantasy.AddressableRouteComponent.Call(System.Int64,System.Type,System.IO.MemoryStream)">
            <summary>
            调用可寻址路由消息并等待响应。
            </summary>
            <param name="routeTypeOpCode">路由类型操作码。</param>
            <param name="requestType">请求类型。</param>
            <param name="request">请求数据。</param>
        </member>
        <member name="M:Fantasy.AddressableRouteComponent.Call(Fantasy.IAddressableRouteMessage)">
            <summary>
            调用可寻址路由消息并等待响应。
            </summary>
            <param name="request">可寻址路由请求。</param>
        </member>
        <member name="T:Fantasy.I_AddressableAddHandler">
            <summary>
            声明一个 sealed 类 I_AddressableAddHandler，继承自 RouteRPC 类，并指定泛型参数
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableAddHandler.Run(Fantasy.Scene,Fantasy.I_AddressableAdd_Request,Fantasy.I_AddressableAdd_Response,System.Action)">
            <summary>
            在收到地址映射添加请求时执行的逻辑。
            </summary>
            <param name="scene">当前场景实例。</param>
            <param name="request">包含请求信息的 I_AddressableAdd_Request 实例。</param>
            <param name="response">用于构建响应的 I_AddressableAdd_Response 实例。</param>
            <param name="reply">执行响应的回调操作。</param>
        </member>
        <member name="T:Fantasy.I_AddressableGetHandler">
            <summary>
            声明一个 sealed 类 I_AddressableGetHandler，继承自 RouteRPC 类，并指定泛型参数
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableGetHandler.Run(Fantasy.Scene,Fantasy.I_AddressableGet_Request,Fantasy.I_AddressableGet_Response,System.Action)">
            <summary>
            在收到地址映射获取请求时执行的逻辑。
            </summary>
            <param name="scene">当前场景实例。</param>
            <param name="request">包含请求信息的 I_AddressableGet_Request 实例。</param>
            <param name="response">用于构建响应的 I_AddressableGet_Response 实例。</param>
            <param name="reply">执行响应的回调操作。</param>
        </member>
        <member name="T:Fantasy.I_AddressableLockHandler">
            <summary>
            声明一个 sealed 类 I_AddressableLockHandler，继承自 RouteRPC 类，并指定泛型参数
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableLockHandler.Run(Fantasy.Scene,Fantasy.I_AddressableLock_Request,Fantasy.I_AddressableLock_Response,System.Action)">
            <summary>
            在收到地址映射锁定请求时执行的逻辑。
            </summary>
            <param name="scene">当前场景实例。</param>
            <param name="request">包含请求信息的 I_AddressableLock_Request 实例。</param>
            <param name="response">用于构建响应的 I_AddressableLock_Response 实例。</param>
            <param name="reply">执行响应的回调操作。</param>
        </member>
        <member name="T:Fantasy.I_AddressableRemoveHandler">
            <summary>
            声明一个 sealed 类 I_AddressableRemoveHandler，继承自 RouteRPC 类，并指定泛型参数 
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableRemoveHandler.Run(Fantasy.Scene,Fantasy.I_AddressableRemove_Request,Fantasy.I_AddressableRemove_Response,System.Action)">
            <summary>
            在收到地址映射移除请求时执行的逻辑。
            </summary>
            <param name="scene">当前场景实例。</param>
            <param name="request">包含请求信息的 I_AddressableRemove_Request 实例。</param>
            <param name="response">用于构建响应的 I_AddressableRemove_Response 实例。</param>
            <param name="reply">执行响应的回调操作。</param>
        </member>
        <member name="T:Fantasy.I_AddressableUnLockHandler">
            <summary>
            声明一个 sealed 类 I_AddressableUnLockHandler，继承自 RouteRPC 类，并指定泛型参数
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableUnLockHandler.Run(Fantasy.Scene,Fantasy.I_AddressableUnLock_Request,Fantasy.I_AddressableUnLock_Response,System.Action)">
            <summary>
            在收到地址映射解锁请求时执行的逻辑。
            </summary>
            <param name="scene">当前场景实例。</param>
            <param name="request">包含请求信息的 I_AddressableUnLock_Request 实例。</param>
            <param name="response">用于构建响应的 I_AddressableUnLock_Response 实例。</param>
            <param name="reply">执行响应的回调操作。</param>
        </member>
        <member name="T:Fantasy.IMessageHandler">
            <summary>
            表示消息处理器的接口，处理特定类型的消息。
            </summary>
        </member>
        <member name="M:Fantasy.IMessageHandler.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.IMessageHandler.Handle(Fantasy.Session,System.UInt32,System.UInt32,System.Object)">
            <summary>
            处理消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="messageTypeCode">消息类型代码。</param>
            <param name="message">要处理的消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.Message`1">
            <summary>
            泛型消息基类，实现了 <see cref="T:Fantasy.IMessageHandler"/> 接口。
            </summary>
        </member>
        <member name="M:Fantasy.Message`1.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Message`1.Handle(Fantasy.Session,System.UInt32,System.UInt32,System.Object)">
            <summary>
            处理消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="messageTypeCode">消息类型代码。</param>
            <param name="message">要处理的消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.Message`1.Run(Fantasy.Session,`0)">
            <summary>
            运行消息处理逻辑。
            </summary>
            <param name="session">会话对象。</param>
            <param name="message">要处理的消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.MessageRPC`2">
            <summary>
            泛型消息RPC基类，实现了 <see cref="T:Fantasy.IMessageHandler"/> 接口，用于处理请求和响应类型的消息。
            </summary>
        </member>
        <member name="M:Fantasy.MessageRPC`2.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.MessageRPC`2.Handle(Fantasy.Session,System.UInt32,System.UInt32,System.Object)">
            <summary>
            处理消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="messageTypeCode">消息类型代码。</param>
            <param name="message">要处理的消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.MessageRPC`2.Run(Fantasy.Session,`0,`1,System.Action)">
            <summary>
            运行消息处理逻辑。
            </summary>
            <param name="session">会话对象。</param>
            <param name="request">请求消息。</param>
            <param name="response">响应消息。</param>
            <param name="reply">发送响应的方法。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.IRouteMessageHandler">
            <summary>
            表示路由消息处理器的接口，处理特定类型的路由消息。
            </summary>
        </member>
        <member name="M:Fantasy.IRouteMessageHandler.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.IRouteMessageHandler.Handle(Fantasy.Session,Fantasy.Entity,System.UInt32,System.Object)">
            <summary>
            处理路由消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="entity">实体对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeMessage">要处理的路由消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.Route`2">
            <summary>
            泛型路由基类，实现了 <see cref="T:Fantasy.IRouteMessageHandler"/> 接口，用于处理特定实体和路由消息类型的路由。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TMessage">路由消息类型。</typeparam>
        </member>
        <member name="M:Fantasy.Route`2.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Route`2.Handle(Fantasy.Session,Fantasy.Entity,System.UInt32,System.Object)">
            <summary>
            处理路由消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="entity">实体对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeMessage">要处理的路由消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.Route`2.Run(`0,`1)">
            <summary>
            运行路由消息处理逻辑。
            </summary>
            <param name="entity">实体对象。</param>
            <param name="message">要处理的路由消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.RouteRPC`3">
            <summary>
            泛型路由RPC基类，实现了 <see cref="T:Fantasy.IRouteMessageHandler"/> 接口，用于处理请求和响应类型的路由。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TRouteRequest">路由请求类型。</typeparam>
            <typeparam name="TRouteResponse">路由响应类型。</typeparam>
        </member>
        <member name="M:Fantasy.RouteRPC`3.Type">
            <summary>
            获取处理的消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.RouteRPC`3.Handle(Fantasy.Session,Fantasy.Entity,System.UInt32,System.Object)">
            <summary>
            处理路由消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="entity">实体对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeMessage">要处理的路由消息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.RouteRPC`3.Run(`0,`1,`2,System.Action)">
            <summary>
            运行路由消息处理逻辑。
            </summary>
            <param name="entity">实体对象。</param>
            <param name="request">请求路由消息。</param>
            <param name="response">响应路由消息。</param>
            <param name="reply">发送响应的方法。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.Addressable`2">
            <summary>
            泛型可寻址路由基类，实现了 <see cref="T:Fantasy.IRouteMessageHandler"/> 接口，用于处理特定实体和可寻址路由消息类型的路由。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TMessage">可寻址路由消息类型。</typeparam>
        </member>
        <member name="M:Fantasy.Addressable`2.Type">
            <summary>
            获取消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.Addressable`2.Handle(Fantasy.Session,Fantasy.Entity,System.UInt32,System.Object)">
            <summary>
            处理可寻址路由消息。
            </summary>
            <param name="session">会话。</param>
            <param name="entity">实体。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeMessage">可寻址路由消息。</param>
        </member>
        <member name="M:Fantasy.Addressable`2.Run(`0,`1)">
            <summary>
            运行处理可寻址路由消息。
            </summary>
            <param name="entity">实体。</param>
            <param name="message">可寻址路由消息。</param>
        </member>
        <member name="T:Fantasy.AddressableRPC`3">
            <summary>
            泛型可寻址RPC路由基类，实现了 <see cref="T:Fantasy.IRouteMessageHandler"/> 接口，用于处理特定实体和可寻址RPC路由请求类型的路由。
            </summary>
            <typeparam name="TEntity">实体类型。</typeparam>
            <typeparam name="TRouteRequest">可寻址RPC路由请求类型。</typeparam>
            <typeparam name="TRouteResponse">可寻址RPC路由响应类型。</typeparam>
        </member>
        <member name="M:Fantasy.AddressableRPC`3.Type">
            <summary>
            获取消息类型。
            </summary>
            <returns>消息类型。</returns>
        </member>
        <member name="M:Fantasy.AddressableRPC`3.Handle(Fantasy.Session,Fantasy.Entity,System.UInt32,System.Object)">
            <summary>
            处理可寻址RPC路由请求。
            </summary>
            <param name="session">会话。</param>
            <param name="entity">实体。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeMessage">可寻址RPC路由请求。</param>
        </member>
        <member name="M:Fantasy.AddressableRPC`3.Run(`0,`1,`2,System.Action)">
            <summary>
            运行处理可寻址RPC路由请求。
            </summary>
            <param name="entity">实体。</param>
            <param name="request">可寻址RPC路由请求。</param>
            <param name="response">可寻址RPC路由响应。</param>
            <param name="reply">回复操作。</param>
        </member>
        <member name="T:Fantasy.HandlerInfo`1">
            <summary>
            用于存储消息处理器的信息，包括类型和对象实例。
            </summary>
            <typeparam name="T">消息处理器的类型</typeparam>
        </member>
        <member name="F:Fantasy.HandlerInfo`1.Obj">
            <summary>
            获取或设置消息处理器对象。
            </summary>
        </member>
        <member name="F:Fantasy.HandlerInfo`1.Type">
            <summary>
            获取或设置消息处理器的类型。
            </summary>
        </member>
        <member name="T:Fantasy.MessageDispatcherComponent">
            <summary>
            网络消息分发组件。
            </summary>
        </member>
        <member name="M:Fantasy.MessageDispatcherComponent.MessageHandler(Fantasy.Session,System.Type,System.Object,System.UInt32,System.UInt32)">
            <summary>
            处理普通消息，将消息分发给相应的消息处理器。
            </summary>
            <param name="session">会话对象</param>
            <param name="type">消息类型</param>
            <param name="message">消息对象</param>
            <param name="rpcId">RPC标识</param>
            <param name="protocolCode">协议码</param>
        </member>
        <member name="M:Fantasy.MessageDispatcherComponent.RouteMessageHandler(Fantasy.Session,System.Type,Fantasy.Entity,System.Object,System.UInt32)">
            <summary>
            处理路由消息，将消息分发给相应的路由消息处理器。
            </summary>
            <param name="session">会话对象</param>
            <param name="type">消息类型</param>
            <param name="entity">实体对象</param>
            <param name="message">消息对象</param>
            <param name="rpcId">RPC标识</param>
        </member>
        <member name="M:Fantasy.MessageDispatcherComponent.FailResponse(Fantasy.Session,Fantasy.IRouteRequest,System.UInt32,System.UInt32)">
            <summary>
            处理失败时，向会话发送失败响应消息。
            </summary>
            <param name="session">会话对象</param>
            <param name="iRouteRequest">路由请求对象</param>
            <param name="error">错误码</param>
            <param name="rpcId">RPC标识</param>
        </member>
        <member name="M:Fantasy.MessageDispatcherComponent.CreateRouteResponse">
            <summary>
            创建一个空的路由响应消息。
            </summary>
            <returns>创建的路由响应消息</returns>
        </member>
        <member name="M:Fantasy.MessageDispatcherComponent.CreateResponse(System.Type,System.UInt32)">
            <summary>
            根据请求类型和错误码，创建普通响应消息。
            </summary>
            <param name="requestType">请求类型</param>
            <param name="error">错误码</param>
            <returns>创建的普通响应消息</returns>
        </member>
        <member name="M:Fantasy.MessageDispatcherComponent.CreateResponse(Fantasy.IRequest,System.UInt32)">
            <summary>
            根据请求对象和错误码，创建普通响应消息。
            </summary>
            <param name="iRequest">请求对象</param>
            <param name="error">错误码</param>
            <returns>创建的普通响应消息</returns>
        </member>
        <member name="M:Fantasy.MessageDispatcherComponent.CreateResponse(Fantasy.IRouteRequest,System.UInt32)">
            <summary>
            根据路由请求对象和错误码，创建路由响应消息。
            </summary>
            <param name="iRouteRequest">路由请求对象</param>
            <param name="error">错误码</param>
            <returns>创建的路由响应消息</returns>
        </member>
        <member name="M:Fantasy.MessageDispatcherComponent.GetOpCode(System.Type)">
            <summary>
            根据消息类型获取对应的OpCode。
            </summary>
            <param name="type">消息类型</param>
            <returns>消息对应的OpCode</returns>
        </member>
        <member name="M:Fantasy.MessageDispatcherComponent.GetOpCodeType(System.UInt32)">
            <summary>
            根据OpCode获取对应的消息类型。
            </summary>
            <param name="code">OpCode</param>
            <returns>OpCode对应的消息类型</returns>
        </member>
        <member name="T:Fantasy.IPoolMessage">
            <summary>
            继承这个的Message协议会在序列化后回收到对象池中
            创建消息请使用Pool.Rent来创建消息、否则会造成内存泄露
            </summary>
        </member>
        <member name="T:Fantasy.IMessage">
            <summary>
            表示通用消息接口。
            </summary>
        </member>
        <member name="M:Fantasy.IMessage.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="T:Fantasy.IRequest">
            <summary>
            表示请求消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IResponse">
            <summary>
            表示响应消息接口。
            </summary>
        </member>
        <member name="P:Fantasy.IResponse.ErrorCode">
            <summary>
            获取或设置错误代码。
            </summary>
        </member>
        <member name="T:Fantasy.IBsonMessage">
            <summary>
            表示可以序列化为 BSON 格式的消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IBsonRequest">
            <summary>
            表示可以序列化为 BSON 格式的请求消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IBsonResponse">
            <summary>
            表示可以序列化为 BSON 格式的响应消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IRouteMessage">
            <summary>
            表示普通路由消息的接口，继承自请求接口。
            </summary>
        </member>
        <member name="M:Fantasy.IRouteMessage.RouteTypeOpCode">
            <summary>
            获取路由消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="T:Fantasy.IRouteRequest">
            <summary>
            普通路由请求接口，继承自普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IRouteResponse">
            <summary>
            普通路由响应接口，继承自响应接口。
            </summary>
        </member>
        <member name="T:Fantasy.IBsonRouteMessage">
            <summary>
            表示普通路由Bson消息的接口，继承自Bson消息和普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IBsonRouteRequest">
            <summary>
            普通路由Bson请求接口，继承自普通路由Bson消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IBsonRouteResponse">
            <summary>
            普通路由Bson响应接口，继承自Bson响应接口。
            </summary>
        </member>
        <member name="T:Fantasy.IAddressableRouteMessage">
            <summary>
            表示可寻址协议的普通路由消息接口，继承自普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IAddressableRouteRequest">
            <summary>
            可寻址协议的普通路由请求接口，继承自可寻址协议的普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IAddressableRouteResponse">
            <summary>
            可寻址协议的普通路由响应接口，继承自普通路由响应接口。
            </summary>
        </member>
        <member name="T:Fantasy.IBsonAddressableRouteMessage">
            <summary>
            表示可寻址Bson协议的普通路由消息接口，继承自Bson消息和可寻址协议的普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IBsonAddressableRouteRequest">
            <summary>
            可寻址Bson协议的普通路由请求接口，继承自可寻址Bson协议的普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.IBsonAddressableRouteResponse">
            <summary>
            可寻址Bson协议的普通路由响应接口，继承自Bson响应接口。
            </summary>
        </member>
        <member name="T:Fantasy.ICustomRouteMessage">
            <summary>
            表示自定义Route协议的普通路由消息接口，继承自普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.ICustomRouteRequest">
            <summary>
            自定义Route协议的普通路由请求接口，继承自自定义Route协议的普通路由消息接口。
            </summary>
        </member>
        <member name="T:Fantasy.ICustomRouteResponse">
            <summary>
            自定义Route协议的普通路由响应接口，继承自普通路由响应接口。
            </summary>
        </member>
        <member name="T:Fantasy.Response">
            <summary>
            表示响应消息的基类，实现了 <see cref="T:Fantasy.IResponse"/> 接口。
            </summary>
        </member>
        <member name="M:Fantasy.Response.OpCode">
            <summary>
            获取当前消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="P:Fantasy.Response.RpcId">
            <summary>
            获取或设置RPC标识。
            </summary>
        </member>
        <member name="P:Fantasy.Response.ErrorCode">
            <summary>
            获取或设置错误代码。
            </summary>
        </member>
        <member name="T:Fantasy.RouteResponse">
            <summary>
            表示路由响应消息的类，实现了 <see cref="T:Fantasy.IRouteResponse"/> 接口。
            </summary>
        </member>
        <member name="M:Fantasy.RouteResponse.OpCode">
            <summary>
            获取当前消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="P:Fantasy.RouteResponse.RpcId">
            <summary>
            获取或设置RPC标识。
            </summary>
        </member>
        <member name="P:Fantasy.RouteResponse.ErrorCode">
            <summary>
            获取或设置错误代码。
            </summary>
        </member>
        <member name="T:Fantasy.PingRequest">
            <summary>
            表示Ping请求消息的类，实现了 <see cref="T:Fantasy.IRequest"/> 接口。
            </summary>
        </member>
        <member name="M:Fantasy.PingRequest.OpCode">
            <summary>
            获取当前消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="P:Fantasy.PingRequest.ResponseType">
            <summary>
            获取或设置Ping响应类型。
            </summary>
        </member>
        <member name="P:Fantasy.PingRequest.RpcId">
            <summary>
            获取或设置RPC标识。
            </summary>
        </member>
        <member name="T:Fantasy.PingResponse">
            <summary>
            表示Ping响应消息的类，实现了 <see cref="T:Fantasy.IResponse"/> 接口。
            </summary>
        </member>
        <member name="M:Fantasy.PingResponse.OpCode">
            <summary>
            获取当前消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="P:Fantasy.PingResponse.RpcId">
            <summary>
            获取或设置RPC标识。
            </summary>
        </member>
        <member name="P:Fantasy.PingResponse.ErrorCode">
            <summary>
            获取或设置错误代码。
            </summary>
        </member>
        <member name="F:Fantasy.PingResponse.Now">
            <summary>
            获取或设置时间戳。
            </summary>
        </member>
        <member name="T:Fantasy.I_AddressableAdd_Request">
            <summary>
            添加一个可寻址地址请求
            </summary>
        </member>
        <member name="P:Fantasy.I_AddressableAdd_Request.ResponseType">
            <summary>
            获取或设置响应类型。
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableAdd_Request.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="M:Fantasy.I_AddressableAdd_Request.RouteTypeOpCode">
            <summary>
            获取消息的路由类型操作代码。
            </summary>
            <returns>路由类型操作代码。</returns>
        </member>
        <member name="P:Fantasy.I_AddressableAdd_Request.AddressableId">
            <summary>
            可寻址地址的标识。
            </summary>
        </member>
        <member name="P:Fantasy.I_AddressableAdd_Request.RouteId">
            <summary>
            路由的标识。
            </summary>
        </member>
        <member name="P:Fantasy.I_AddressableAdd_Request.IsLock">
            <summary>
            是否锁定可寻址。
            </summary>
        </member>
        <member name="T:Fantasy.I_AddressableAdd_Response">
            <summary>
            添加一个可寻址地址响应
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableAdd_Response.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="P:Fantasy.I_AddressableAdd_Response.ErrorCode">
            <summary>
            错误代码。
            </summary>
        </member>
        <member name="T:Fantasy.I_AddressableGet_Request">
            <summary>
            查询一个可寻址请求
            </summary>
        </member>
        <member name="P:Fantasy.I_AddressableGet_Request.ResponseType">
            <summary>
            获取或设置响应类型。
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableGet_Request.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="M:Fantasy.I_AddressableGet_Request.RouteTypeOpCode">
            <summary>
            获取消息的路由类型操作代码。
            </summary>
            <returns>路由类型操作代码。</returns>
        </member>
        <member name="P:Fantasy.I_AddressableGet_Request.AddressableId">
            <summary>
            可寻址地址的标识。
            </summary>
        </member>
        <member name="T:Fantasy.I_AddressableGet_Response">
            <summary>
            查询一个可寻址响应
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableGet_Response.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="P:Fantasy.I_AddressableGet_Response.ErrorCode">
            <summary>
            错误代码。
            </summary>
        </member>
        <member name="P:Fantasy.I_AddressableGet_Response.RouteId">
            <summary>
            路由的标识。
            </summary>
        </member>
        <member name="T:Fantasy.I_AddressableRemove_Request">
            <summary>
            删除一个可寻址请求
            </summary>
        </member>
        <member name="P:Fantasy.I_AddressableRemove_Request.ResponseType">
            <summary>
            获取或设置响应类型。
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableRemove_Request.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="M:Fantasy.I_AddressableRemove_Request.RouteTypeOpCode">
            <summary>
            获取消息的路由类型操作代码。
            </summary>
            <returns>路由类型操作代码。</returns>
        </member>
        <member name="P:Fantasy.I_AddressableRemove_Request.AddressableId">
            <summary>
            可寻址地址的标识。
            </summary>
        </member>
        <member name="T:Fantasy.I_AddressableRemove_Response">
            <summary>
            删除一个可寻址响应
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableRemove_Response.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="P:Fantasy.I_AddressableRemove_Response.ErrorCode">
            <summary>
            错误代码。
            </summary>
        </member>
        <member name="T:Fantasy.I_AddressableLock_Request">
            <summary>
            锁定一个可寻址请求。
            </summary>
        </member>
        <member name="P:Fantasy.I_AddressableLock_Request.ResponseType">
            <summary>
            获取或设置响应类型。
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableLock_Request.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="M:Fantasy.I_AddressableLock_Request.RouteTypeOpCode">
            <summary>
            获取消息的路由类型操作代码。
            </summary>
            <returns>路由类型操作代码。</returns>
        </member>
        <member name="P:Fantasy.I_AddressableLock_Request.AddressableId">
            <summary>
            可寻址地址的标识。
            </summary>
        </member>
        <member name="T:Fantasy.I_AddressableLock_Response">
            <summary>
            锁定一个可寻址响应。
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableLock_Response.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="P:Fantasy.I_AddressableLock_Response.ErrorCode">
            <summary>
            获取或设置错误代码。
            </summary>
        </member>
        <member name="T:Fantasy.I_AddressableUnLock_Request">
            <summary>
            解锁一个可寻址地址请求。
            </summary>
        </member>
        <member name="P:Fantasy.I_AddressableUnLock_Request.ResponseType">
            <summary>
            获取或设置响应类型。
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableUnLock_Request.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="M:Fantasy.I_AddressableUnLock_Request.RouteTypeOpCode">
            <summary>
            获取消息的路由类型操作代码。
            </summary>
            <returns>路由类型操作代码。</returns>
        </member>
        <member name="P:Fantasy.I_AddressableUnLock_Request.AddressableId">
            <summary>
            可寻址地址的标识。
            </summary>
        </member>
        <member name="P:Fantasy.I_AddressableUnLock_Request.RouteId">
            <summary>
            路由的标识。
            </summary>
        </member>
        <member name="P:Fantasy.I_AddressableUnLock_Request.Source">
            <summary>
            请求解锁的源。
            </summary>
        </member>
        <member name="T:Fantasy.I_AddressableUnLock_Response">
            <summary>
            解锁一个可寻址地址响应。
            </summary>
        </member>
        <member name="M:Fantasy.I_AddressableUnLock_Response.OpCode">
            <summary>
            获取消息的操作代码。
            </summary>
            <returns>操作代码。</returns>
        </member>
        <member name="P:Fantasy.I_AddressableUnLock_Response.ErrorCode">
            <summary>
            获取或设置错误代码。
            </summary>
        </member>
        <member name="T:Fantasy.LinkEntity_Request">
            <summary>
            连接Entity到目标进程、目标进程可以通过EntityType、发送消息给这个Entity
            </summary>
        </member>
        <member name="P:Fantasy.LinkEntity_Request.EntityType">
            <summary>
            EntityType
            </summary>
        </member>
        <member name="P:Fantasy.LinkEntity_Request.RuntimeId">
            <summary>
            RuntimeId。
            </summary>
        </member>
        <member name="P:Fantasy.LinkEntity_Request.LinkGateSessionRuntimeId">
            <summary>
            Gate服务器的Session.RuntimeId
            </summary>
        </member>
        <member name="T:Fantasy.InnerPackInfo">
            <summary>
            用于处理内部网络数据包信息的类。
            </summary>
        </member>
        <member name="M:Fantasy.InnerPackInfo.Dispose">
            <summary>
            释放当前 <see cref="T:Fantasy.InnerPackInfo"/> 实例及其关联的资源。
            </summary>
        </member>
        <member name="M:Fantasy.InnerPackInfo.Create(System.IO.MemoryStream)">
            <summary>
            创建一个 <see cref="T:Fantasy.InnerPackInfo"/> 实例，并将其与内存资源关联。
            </summary>
            <param name="memoryStream">用于存储数据的内存资源。</param>
            <returns>创建的 <see cref="T:Fantasy.InnerPackInfo"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.InnerPackInfo.CreateMemoryStream">
            <summary>
            创建一个 <see cref="T:System.IO.MemoryStream"/> 实例，用于存储内存数据，并返回该实例。
            </summary>
            <returns>创建的 <see cref="T:System.IO.MemoryStream"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.InnerPackInfo.Deserialize(System.Type)">
            <summary>
            将消息数据从内存反序列化为指定的消息类型实例。
            </summary>
            <param name="messageType">目标消息类型。</param>
            <returns>反序列化后的消息类型实例。</returns>
        </member>
        <member name="T:Fantasy.InnerPacketParser">
            <summary>
            用于解析内部网络数据包的类。
            </summary>
        </member>
        <member name="M:Fantasy.InnerPacketParser.UnPack(Fantasy.CircularBuffer,Fantasy.APackInfo@)">
            <summary>
            尝试解析循环缓冲区中的数据为一个数据包信息。
            </summary>
            <param name="buffer">待解析的循环缓冲区。</param>
            <param name="packInfo">解析后的数据包信息。</param>
            <returns>如果成功解析并获取数据包信息，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Fantasy.InnerPacketParser.UnPack(System.Byte[],System.Int32@,Fantasy.APackInfo@)">
            <summary>
            尝试从内存资源中解析数据为一个内部数据包信息。
            </summary>
            <param name="buffer">需要解包的buffer。</param>
            <param name="count">解包的总长度。</param>
            <param name="packInfo">解析得到的数据包信息。</param>
            <returns>如果成功解析并获取内部数据包信息，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:Fantasy.InnerPacketParser.Pack(System.UInt32,System.Int64,System.IO.MemoryStream)">
            <summary>
            将数据打包成一个内部数据包的内存流。
            </summary>
            <param name="rpcId">RPC ID。</param>
            <param name="routeId">Route ID。</param>
            <param name="memoryStream">要打包的数据内存流。</param>
            <returns>打包后的内存流。</returns>
        </member>
        <member name="M:Fantasy.InnerPacketParser.MessagePack(System.UInt32,System.Int64,System.IO.MemoryStream)">
            <summary>
            打包内网消息到内存流中。
            </summary>
            <param name="rpcId"></param>
            <param name="routeId"></param>
            <param name="memoryStream"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.InnerPacketParser.MessagePack(Fantasy.Scene,System.UInt32,System.Int64,System.Object)">
            <summary>
            打包内网消息到内存流中。
            </summary>
            <param name="scene"></param>
            <param name="rpcId"></param>
            <param name="routeId"></param>
            <param name="message"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Fantasy.InnerPacketParser.Pack(System.UInt32,System.Int64,System.Object)">
            <summary>
            将数据打包成一个内部数据包的内存流。
            </summary>
            <param name="rpcId">RPC ID。</param>
            <param name="routeId">Route ID。</param>
            <param name="message">要打包的数据对象。</param>
            <returns>打包后的内存流。</returns>
        </member>
        <member name="M:Fantasy.InnerPacketParser.Dispose">
            <summary>
            释放资源并进行清理操作。
            </summary>
        </member>
        <member name="T:Fantasy.APacketParser">
            <summary>
            抽象的包解析器基类，用于解析网络通信数据包。
            </summary>
        </member>
        <member name="F:Fantasy.APacketParser.Scene">
            <summary>
            当前Scene。
            </summary>
        </member>
        <member name="P:Fantasy.APacketParser.IsDisposed">
            <summary>
            获取一个值，表示是否已经被释放。
            </summary>
        </member>
        <member name="F:Fantasy.APacketParser.MessageDispatcherComponent">
            <summary>
            消息分发组件。
            </summary>
        </member>
        <member name="M:Fantasy.APacketParser.CreatePacketParser(Fantasy.Scene,Fantasy.NetworkTarget)">
            <summary>
            根据网络目标创建相应的包解析器实例。
            </summary>
            <param name="scene">当前Scene</param>
            <param name="networkTarget">网络目标，指示是内部网络通信还是外部网络通信。</param>
            <returns>创建的包解析器实例。</returns>
        </member>
        <member name="M:Fantasy.APacketParser.UnPack(Fantasy.CircularBuffer,Fantasy.APackInfo@)">
            <summary>
            从循环缓冲区解析数据包。
            </summary>
            <param name="buffer">循环缓冲区。</param>
            <param name="packInfo">解析得到的数据包信息。</param>
            <returns>如果成功解析数据包，则返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Fantasy.APacketParser.UnPack(System.Byte[],System.Int32@,Fantasy.APackInfo@)">
            <summary>
            从内存块解析数据包。
            </summary>
            <param name="buffer">需要解包的buffer。</param>
            <param name="count">解包的总长度。</param>
            <param name="packInfo">解析得到的数据包信息。</param>
            <returns>如果成功解析数据包，则返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Fantasy.APacketParser.Pack(System.UInt32,System.Int64,System.Int64,System.IO.MemoryStream,System.Object)">
            <summary>
            消息打包。
            </summary>
            <param name="rpcId">RPC ID。</param>
            <param name="routeTypeOpCode">路由类型与操作码。</param>
            <param name="routeId">路由 ID。</param>
            <param name="memoryStream">内存流，用于消息数据。</param>
            <param name="message">消息对象。</param>
            <returns>打包后的内存流。</returns>
        </member>
        <member name="M:Fantasy.APacketParser.Dispose">
            <summary>
            释放资源，包括内存池等。
            </summary>
        </member>
        <member name="T:Fantasy.APackInfo">
            <summary>
            抽象的数据包信息基类，用于存储解析得到的数据包信息。
            </summary>
        </member>
        <member name="F:Fantasy.APackInfo.RpcId">
            <summary>
            数据包的 RPC ID。
            </summary>
        </member>
        <member name="F:Fantasy.APackInfo.RouteId">
            <summary>
            数据包的路由 ID。
            </summary>
        </member>
        <member name="F:Fantasy.APackInfo.ProtocolCode">
            <summary>
            数据包的协议编号。
            </summary>
        </member>
        <member name="F:Fantasy.APackInfo.RouteTypeCode">
            <summary>
            数据包的路由类型编码。
            </summary>
        </member>
        <member name="F:Fantasy.APackInfo.MessagePacketLength">
            <summary>
            数据包消息体的长度。
            </summary>
        </member>
        <member name="F:Fantasy.APackInfo.MemoryStream">
            <summary>
            内存块的所有者，用于存储数据包的内存数据。
            </summary>
        </member>
        <member name="F:Fantasy.APackInfo.IsDisposed">
            <summary>
            获取一个值，表示是否已经被释放。
            </summary>
        </member>
        <member name="M:Fantasy.APackInfo.Deserialize(System.Type)">
            <summary>
            根据指定类型反序列化消息体。
            </summary>
            <param name="messageType">要反序列化成的类型。</param>
            <returns>反序列化得到的消息体。</returns>
        </member>
        <member name="M:Fantasy.APackInfo.CreateMemoryStream">
            <summary>
            创建用于写入数据包消息体的内存流。
            </summary>
            <returns>创建的内存流。</returns>
        </member>
        <member name="M:Fantasy.APackInfo.Dispose">
            <summary>
            释放资源，包括内存块等。
            </summary>
        </member>
        <member name="T:Fantasy.OuterPackInfo">
            <summary>
            用于解析外部网络消息的数据包信息。
            </summary>
        </member>
        <member name="M:Fantasy.OuterPackInfo.Dispose">
            <summary>
            释放当前 <see cref="T:Fantasy.OuterPackInfo"/> 实例及其关联的资源。
            </summary>
        </member>
        <member name="M:Fantasy.OuterPackInfo.Create(System.IO.MemoryStream)">
            <summary>
            创建一个 <see cref="T:Fantasy.OuterPackInfo"/> 实例，并将其与给定的内存资源关联。
            </summary>
            <param name="memoryStream">内存资源的所有者。</param>
            <returns>创建的 <see cref="T:Fantasy.OuterPackInfo"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.OuterPackInfo.CreateMemoryStream">
            <summary>
            创建一个 <see cref="T:System.IO.MemoryStream"/> 实例，用于存储内存数据，并返回该实例。
            </summary>
            <returns>创建的 <see cref="T:System.IO.MemoryStream"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.OuterPackInfo.Deserialize(System.Type)">
            <summary>
            将消息数据从内存反序列化为指定的消息类型实例。
            </summary>
            <param name="messageType">目标消息类型。</param>
            <returns>反序列化后的消息类型实例。</returns>
        </member>
        <member name="T:Fantasy.OuterPacketParser">
            <summary>
            用于解析外部网络消息的数据包解析器。
            </summary>
        </member>
        <member name="M:Fantasy.OuterPacketParser.UnPack(Fantasy.CircularBuffer,Fantasy.APackInfo@)">
            <summary>
            用于解析外部网络消息的数据包解析器。
            </summary>
            <param name="buffer">循环缓冲区，用于存储接收到的数据。</param>
            <param name="packInfo">解析后的数据包信息。</param>
            <returns>如果成功解析数据包，则返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Fantasy.OuterPacketParser.UnPack(System.Byte[],System.Int32@,Fantasy.APackInfo@)">
            <summary>
            从内存中解析数据包。
            </summary>
            <param name="buffer">需要解包的buffer。</param>
            <param name="count">解包的总长度。</param>
            <param name="packInfo">解析得到的数据包信息。</param>
            <returns>如果成功解析数据包，则返回 true；否则返回 false。</returns>
        </member>
        <member name="M:Fantasy.OuterPacketParser.Pack(System.UInt32,System.Int64,System.IO.MemoryStream)">
            <summary>
            封装数据包。
            </summary>
            <param name="rpcId">RPC标识。</param>
            <param name="routeTypeOpCode">路由类型和操作码。</param>
            <param name="memoryStream">要封装的内存流。</param>
            <returns>封装后的内存流。</returns>
        </member>
        <member name="M:Fantasy.OuterPacketParser.Pack(System.UInt32,System.Int64,System.Object)">
            <summary>
            封装数据包。
            </summary>
            <param name="rpcId">RPC标识。</param>
            <param name="routeTypeOpCode">路由类型和操作码。</param>
            <param name="message">要封装的消息对象。</param>
            <returns>封装后的内存流。</returns>
        </member>
        <member name="M:Fantasy.OuterPacketParser.Dispose">
            <summary>
            释放资源并重置状态。
            </summary>
        </member>
        <member name="T:Fantasy.Packet">
            <summary>
            提供关于消息包的常量定义。
            </summary>
        </member>
        <member name="F:Fantasy.Packet.PacketBodyMaxLength">
            <summary>
            消息体最大长度
            </summary>
        </member>
        <member name="F:Fantasy.Packet.PacketLength">
            <summary>
            消息体长度在消息头占用的长度
            </summary>
        </member>
        <member name="F:Fantasy.Packet.ProtocolCodeLength">
            <summary>
            协议编号在消息头占用的长度
            </summary>
        </member>
        <member name="F:Fantasy.Packet.PacketRouteIdLength">
            <summary>
            RouteId长度
            </summary>
        </member>
        <member name="F:Fantasy.Packet.RpcIdLength">
            <summary>
            RpcId在消息头占用的长度
            </summary>
        </member>
        <member name="F:Fantasy.Packet.RouteTypeOpCodeLength">
            <summary>
            RouteTypeOpCode在消息头占用的长度
            </summary>
        </member>
        <member name="F:Fantasy.Packet.OuterPacketRpcIdLocation">
            <summary>
            OuterRPCId所在的位置
            </summary>
        </member>
        <member name="F:Fantasy.Packet.InnerPacketRpcIdLocation">
            <summary>
            InnerRPCId所在的位置
            </summary>
        </member>
        <member name="F:Fantasy.Packet.OuterPacketRouteTypeOpCodeLocation">
            <summary>
            RouteTypeOpCode所在的位置
            </summary>
        </member>
        <member name="F:Fantasy.Packet.InnerPacketRouteRouteIdLocation">
            <summary>
            RouteId所在的位置
            </summary>
        </member>
        <member name="F:Fantasy.Packet.OuterPacketHeadLength">
            <summary>
            外网消息头长度（消息体长度在消息头占用的长度 + 协议编号在消息头占用的长度 + RPCId长度 + RouteTypeOpCode长度）
            </summary>
        </member>
        <member name="F:Fantasy.Packet.InnerPacketHeadLength">
            <summary>
            内网消息头长度（消息体长度在消息头占用的长度 + 协议编号在消息头占用的长度 + RPCId长度 + RouteId长度）
            </summary>
        </member>
        <member name="T:Fantasy.ClientMessageScheduler">
            <summary>
            提供了一个用于客户端网络消息调度和处理的抽象基类。
            </summary>
        </member>
        <member name="M:Fantasy.ClientMessageScheduler.Handler(Fantasy.Session,System.Type,Fantasy.APackInfo)">
            <summary>
            处理客户端外部消息的方法。
            </summary>
            <param name="session">客户端会话。</param>
            <param name="messageType">消息类型。</param>
            <param name="packInfo">消息包信息。</param>
        </member>
        <member name="M:Fantasy.ClientMessageScheduler.InnerHandler(Fantasy.Session,System.UInt32,System.Int64,System.UInt32,System.Int64,System.Type,System.Object)">
            <summary>
            处理客户端内部消息的方法。
            </summary>
            <param name="session">客户端会话。</param>
            <param name="rpcId">远程过程调用ID。</param>
            <param name="routeId">路由ID。</param>
            <param name="protocolCode">协议编码。</param>
            <param name="routeTypeCode">路由类型编码。</param>
            <param name="messageType">消息类型。</param>
            <param name="message">消息实例。</param>
        </member>
        <member name="T:Fantasy.InnerMessageScheduler">
            <summary>
            提供了一个机制来调度和处理内部网络消息。
            </summary>
        </member>
        <member name="M:Fantasy.InnerMessageScheduler.Handler(Fantasy.Session,System.Type,Fantasy.APackInfo)">
            <summary>
            在FantasyNet环境下，处理外部消息的方法。
            </summary>
            <param name="session">网络会话。</param>
            <param name="messageType">消息类型。</param>
            <param name="packInfo">消息封包信息。</param>
        </member>
        <member name="M:Fantasy.InnerMessageScheduler.InnerHandler(Fantasy.Session,System.UInt32,System.Int64,System.UInt32,System.Int64,System.Type,System.Object)">
            <summary>
            在FantasyNet环境下，处理内部消息的方法。
            </summary>
            <param name="session">网络会话。</param>
            <param name="rpcId">RPC请求ID。</param>
            <param name="routeId">消息路由ID。</param>
            <param name="protocolCode">协议码。</param>
            <param name="routeTypeCode">路由类型码。</param>
            <param name="messageType">消息类型。</param>
            <param name="message">消息对象。</param>
        </member>
        <member name="T:Fantasy.InnerRouteType">
            <summary>
            提供了一组框架内置的核心路由类型。
            </summary>
        </member>
        <member name="F:Fantasy.InnerRouteType.Route">
            <summary>
            基础Route协议、框架内置千万不要删除
            </summary>
        </member>
        <member name="F:Fantasy.InnerRouteType.BsonRoute">
            <summary>
            基础BsonRoute协议、框架内置千万不要删除
            </summary>
        </member>
        <member name="F:Fantasy.InnerRouteType.Addressable">
            <summary>
            基础Addressable协议、框架内置千万不要删除
            </summary>
        </member>
        <member name="F:Fantasy.InnerRouteType.CustomRouteType">
            <summary>
            自定义RouteType、框架内置千万不要删除
            </summary>
        </member>
        <member name="T:Fantasy.ANetworkMessageScheduler">
            <summary>
            抽象网络消息调度器基类，用于处理网络消息的调度和处理逻辑。
            </summary>
        </member>
        <member name="F:Fantasy.ANetworkMessageScheduler.MessageDispatcherComponent">
            <summary>
            消息分发组件。
            </summary>
        </member>
        <member name="F:Fantasy.ANetworkMessageScheduler.NetworkMessagingComponent">
            <summary>
            消息发送组件。
            </summary>
        </member>
        <member name="F:Fantasy.ANetworkMessageScheduler._pingResponse">
            <summary>
            用于回复Ping消息的响应实例。
            </summary>
        </member>
        <member name="M:Fantasy.ANetworkMessageScheduler.#ctor(Fantasy.MessageDispatcherComponent,Fantasy.NetworkMessagingComponent)">
            <summary>
            构造函数
            </summary>
            <param name="messageDispatcherComponent">消息分发组件。</param>
            <param name="networkMessagingComponent">消息发送组件。</param>
        </member>
        <member name="M:Fantasy.ANetworkMessageScheduler.Scheduler(Fantasy.Session,Fantasy.APackInfo)">
            <summary>
            调度网络消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="packInfo">消息包信息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.ANetworkMessageScheduler.InnerScheduler(Fantasy.Session,System.UInt32,System.Int64,System.UInt32,System.Int64,System.Object)">
            <summary>
            内部调度网络消息的方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeId">路由标识。</param>
            <param name="protocolCode">协议代码。</param>
            <param name="routeTypeCode">路由类型代码。</param>
            <param name="message">要处理的消息对象。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.ANetworkMessageScheduler.Handler(Fantasy.Session,System.Type,Fantasy.APackInfo)">
            <summary>
            处理外部网络消息的抽象方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="messageType">消息类型。</param>
            <param name="packInfo">消息包信息。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:Fantasy.ANetworkMessageScheduler.InnerHandler(Fantasy.Session,System.UInt32,System.Int64,System.UInt32,System.Int64,System.Type,System.Object)">
            <summary>
            处理内部网络消息的抽象方法。
            </summary>
            <param name="session">会话对象。</param>
            <param name="rpcId">RPC标识。</param>
            <param name="routeId">路由标识。</param>
            <param name="protocolCode">协议代码。</param>
            <param name="routeTypeCode">路由类型代码。</param>
            <param name="messageType">消息类型。</param>
            <param name="message">要处理的消息对象。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="T:Fantasy.MessageSender">
            <summary>
            网络消息发送者的类。
            </summary>
        </member>
        <member name="P:Fantasy.MessageSender.RpcId">
            <summary>
            获取或设置 RPC ID。
            </summary>
        </member>
        <member name="P:Fantasy.MessageSender.RouteId">
            <summary>
            获取或设置路由 ID。
            </summary>
        </member>
        <member name="P:Fantasy.MessageSender.CreateTime">
            <summary>
            获取或设置创建时间。
            </summary>
        </member>
        <member name="P:Fantasy.MessageSender.MessageType">
            <summary>
            获取或设置消息类型。
            </summary>
        </member>
        <member name="P:Fantasy.MessageSender.Request">
            <summary>
            获取或设置请求消息。
            </summary>
        </member>
        <member name="P:Fantasy.MessageSender.Tcs">
            <summary>
            获取或设置任务。
            </summary>
        </member>
        <member name="M:Fantasy.MessageSender.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:Fantasy.MessageSender.Create(System.UInt32,System.Type,Fantasy.FTask{Fantasy.IResponse})">
            <summary>
            创建一个 <see cref="T:Fantasy.MessageSender"/> 实例。
            </summary>
            <param name="rpcId">RPC ID。</param>
            <param name="requestType">请求消息类型。</param>
            <param name="tcs">任务。</param>
            <returns>创建的 <see cref="T:Fantasy.MessageSender"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.MessageSender.Create(System.UInt32,Fantasy.IRequest,Fantasy.FTask{Fantasy.IResponse})">
            <summary>
            创建一个 <see cref="T:Fantasy.MessageSender"/> 实例。
            </summary>
            <param name="rpcId">RPC ID。</param>
            <param name="request">请求消息。</param>
            <param name="tcs">任务。</param>
            <returns>创建的 <see cref="T:Fantasy.MessageSender"/> 实例。</returns>
        </member>
        <member name="M:Fantasy.MessageSender.Create(System.UInt32,System.Int64,Fantasy.IRouteMessage,Fantasy.FTask{Fantasy.IResponse})">
            <summary>
            创建一个 <see cref="T:Fantasy.MessageSender"/> 实例。
            </summary>
            <param name="rpcId">RPC ID。</param>
            <param name="routeId">路由 ID。</param>
            <param name="request">路由消息请求。</param>
            <param name="tcs">任务。</param>
            <returns>创建的 <see cref="T:Fantasy.MessageSender"/> 实例。</returns>
        </member>
        <member name="T:Fantasy.NetworkMessageUpdate">
            <summary>
            定时检查过期的Call消息事件。
            </summary>
        </member>
        <member name="T:Fantasy.NetworkMessagingComponent">
            <summary>
            网络消息组件。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkMessagingComponent.TimerId">
            <summary>
            TimerId。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkMessagingComponent._rpcId">
            <summary>
            RPC ID。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkMessagingComponent.AddressableRouteMessageLock">
            <summary>
            Address消息所需的锁队列。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkMessagingComponent.Server">
            <summary>
            缓存一下方便后面使用。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkMessagingComponent.RequestCallback">
            <summary>
            存储请求回调的字典。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkMessagingComponent.TimeoutRouteMessageSenders">
            <summary>
            存储超时路由消息发送者的字典。
            </summary>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.SendInnerServer(System.UInt32,Fantasy.IMessage)">
            <summary>
            将消息发送给内部服务器。
            </summary>
            <param name="targetServerId">目标服务器ID</param>
            <param name="message">消息</param>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.SendInnerRoute(System.Int64,Fantasy.IRouteMessage)">
            <summary>
            将消息发送给内部路由。
            </summary>
            <param name="entityId">实体ID</param>
            <param name="message">消息</param>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.SendInnerRoute(System.Int64,System.Int64,System.IO.MemoryStream)">
            <summary>
            将消息发送给内部路由，并指定路由类型操作码和消息数据流。
            </summary>
            <param name="entityId">实体ID</param>
            <param name="routeTypeOpCode">路由类型操作码</param>
            <param name="memoryStream">消息数据流</param>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.SendInnerRoute(System.Collections.Generic.ICollection{System.Int64},Fantasy.IRouteMessage)">
            <summary>
            将消息发送给一组内部路由。
            </summary>
            <param name="routeIdCollection">路由ID集合</param>
            <param name="message">消息</param>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.SendAddressable(System.Int64,Fantasy.IRouteMessage)">
            <summary>
            将消息发送给可寻址对象，并在协程中执行。
            </summary>
            <param name="addressableId">可寻址对象ID</param>
            <param name="message">消息</param>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.CallInnerRoute(System.Int64,System.Int64,System.Type,System.IO.MemoryStream)">
            <summary>
            异步调用内部路由，并指定路由类型操作码、请求类型和请求数据流。
            </summary>
            <param name="entityId">实体ID</param>
            <param name="routeTypeOpCode">路由类型操作码</param>
            <param name="requestType">请求类型</param>
            <param name="request">请求数据流</param>
            <returns>异步任务，返回响应</returns>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.CallInnerRoute(System.Int64,Fantasy.IRouteMessage)">
            <summary>
            异步调用内部路由，并传递路由消息。
            </summary>
            <param name="entityId">实体ID</param>
            <param name="request">路由消息</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.CallInnerServer(System.UInt32,Fantasy.IRequest)">
            <summary>
            异步调用内部服务器路由，并传递请求消息。
            </summary>
            <param name="targetServerId">目标服务器ID</param>
            <param name="request">请求消息</param>
            <returns>异步任务，返回响应</returns>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.CallAddressable(System.Int64,Fantasy.IRouteMessage)">
            <summary>
            异步调用可寻址对象，并传递路由消息。
            </summary>
            <param name="addressableId">可寻址对象ID</param>
            <param name="request">路由消息</param>
            <returns>异步任务，返回响应</returns>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.ResponseHandler(System.UInt32,Fantasy.IResponse)">
            <summary>
            处理响应消息的方法。
            </summary>
            <param name="rpcId">RPC ID</param>
            <param name="response">响应消息</param>
        </member>
        <member name="M:Fantasy.NetworkMessagingComponent.ResponseHandler(Fantasy.MessageSender,Fantasy.IResponse)">
            <summary>
            处理响应消息的私有方法。
            </summary>
            <param name="messageSender">消息发送者</param>
            <param name="response">响应消息</param>
        </member>
        <member name="T:Fantasy.OnNetworkMessageUpdateCheckTimeout">
            <summary>
            网络消息更新检查超时。
            </summary>
        </member>
        <member name="F:Fantasy.OnNetworkMessageUpdateCheckTimeout.Timeout">
            <summary>
            超时时间（毫秒）。
            </summary>
        </member>
        <member name="M:Fantasy.OnNetworkMessageUpdateCheckTimeout.Handler(Fantasy.NetworkMessageUpdate)">
            <summary>
            处理网络消息更新检查超时。
            </summary>
            <param name="self"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Fantasy.OuterMessageScheduler">
            <summary>
            提供了一个机制来调度和处理外部网络消息。
            </summary>
        </member>
        <member name="M:Fantasy.OuterMessageScheduler.Handler(Fantasy.Session,System.Type,Fantasy.APackInfo)">
            <summary>
            在FantasyNet环境下，处理外部消息的方法。
            </summary>
            <param name="session">网络会话。</param>
            <param name="messageType">消息类型。</param>
            <param name="packInfo">消息封包信息。</param>
        </member>
        <member name="M:Fantasy.OuterMessageScheduler.InnerHandler(Fantasy.Session,System.UInt32,System.Int64,System.UInt32,System.Int64,System.Type,System.Object)">
            <summary>
            在FantasyNet环境下，处理内部消息的方法。
            </summary>
            <param name="session">网络会话。</param>
            <param name="rpcId">RPC请求ID。</param>
            <param name="routeId">消息路由ID。</param>
            <param name="protocolCode">协议码。</param>
            <param name="routeTypeCode">路由类型码。</param>
            <param name="messageType">消息类型。</param>
            <param name="message">消息对象。</param>
        </member>
        <member name="T:Fantasy.Opcode">
            <summary>
            定义了各种消息操作码，用于标识不同类型的消息和请求。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.OuterMessage">
            <summary>
            外网消息操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.OuterRequest">
            <summary>
            外网请求操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerMessage">
            <summary>
            内网消息操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerRequest">
            <summary>
            内网请求操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerBsonMessage">
            <summary>
            内网Bson消息操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerBsonRequest">
            <summary>
            内网Bson请求操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.OuterResponse">
            <summary>
            外网回复操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerResponse">
            <summary>
            内网回复操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerBsonResponse">
            <summary>
            内网Bson回复操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.OuterRouteMessage">
            <summary>
            外网路由消息操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.OuterRouteRequest">
            <summary>
            外网路由请求操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerRouteMessage">
            <summary>
            内网路由消息操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerRouteRequest">
            <summary>
            内网路由请求操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerBsonRouteMessage">
            <summary>
            内网Bson路由消息操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerBsonRouteRequest">
            <summary>
            内网Bson路由请求操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.OuterRouteResponse">
            <summary>
            外网路由回复操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerRouteResponse">
            <summary>
            内网路由回复操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.InnerBsonRouteResponse">
            <summary>
            内网Bson路由回复操作码的基准值。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.PingRequest">
            <summary>
            心跳消息请求操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.PingResponse">
            <summary>
            心跳消息回复操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.DefaultResponse">
            <summary>
            默认回复操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.AddressableAddRequest">
            <summary>
            可寻址消息：添加请求操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.AddressableAddResponse">
            <summary>
            可寻址消息：添加回复操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.AddressableGetRequest">
            <summary>
            可寻址消息：获取请求操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.AddressableGetResponse">
            <summary>
            可寻址消息：获取回复操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.AddressableRemoveRequest">
            <summary>
            可寻址消息：移除请求操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.AddressableRemoveResponse">
            <summary>
            可寻址消息：移除回复操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.AddressableLockRequest">
            <summary>
            可寻址消息：锁定请求操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.AddressableLockResponse">
            <summary>
            可寻址消息：锁定回复操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.AddressableUnLockRequest">
            <summary>
            可寻址消息：解锁请求操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.AddressableUnLockResponse">
            <summary>
            可寻址消息：解锁回复操作码。
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.LinkEntityRequest">
            <summary>
            连接Entity到目标进程、目标进程可以通过EntityType、发送消息给这个Entity
            </summary>
        </member>
        <member name="F:Fantasy.Opcode.DefaultRouteResponse">
            <summary>
            默认的Route返回操作码。
            </summary>
        </member>
        <member name="T:Fantasy.ScanException">
            <summary>
            在扫描过程中发生的异常。
            </summary>
        </member>
        <member name="M:Fantasy.ScanException.#ctor">
            <summary>
            初始化 <see cref="T:Fantasy.ScanException"/> 类的新实例。
            </summary>
        </member>
        <member name="M:Fantasy.ScanException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 <see cref="T:Fantasy.ScanException"/> 类的新实例。
            </summary>
            <param name="msg">错误消息。</param>
        </member>
        <member name="T:Fantasy.AClientNetwork">
            <summary>
            抽象客户端网络基类。
            </summary>
        </member>
        <member name="T:Fantasy.ANetwork">
            <summary>
            抽象网络基类。
            </summary>
        </member>
        <member name="P:Fantasy.ANetwork.Id">
            <summary>
            获取网络的唯一ID。
            </summary>
        </member>
        <member name="P:Fantasy.ANetwork.Scene">
            <summary>
            获取或设置网络所在的场景。
            </summary>
        </member>
        <member name="P:Fantasy.ANetwork.IsDisposed">
            <summary>
            获取或设置网络是否已被释放。
            </summary>
        </member>
        <member name="P:Fantasy.ANetwork.NetworkType">
            <summary>
            获取网络类型。
            </summary>
        </member>
        <member name="P:Fantasy.ANetwork.NetworkTarget">
            <summary>
            获取网络目标类型。
            </summary>
        </member>
        <member name="P:Fantasy.ANetwork.NetworkProtocolType">
            <summary>
            获取网络协议类型。
            </summary>
        </member>
        <member name="P:Fantasy.ANetwork.NetworkMessageScheduler">
            <summary>
            获取或设置网络消息调度器。
            </summary>
        </member>
        <member name="P:Fantasy.ANetwork.ThreadSynchronizationContext">
            <summary>
            上下同步文本。
            </summary>
        </member>
        <member name="M:Fantasy.ANetwork.#ctor(Fantasy.Scene,Fantasy.NetworkType,Fantasy.NetworkProtocolType,Fantasy.NetworkTarget)">
            <summary>
            初始化网络基类的新实例。
            </summary>
            <param name="scene">当前网络所在的Scene。</param>
            <param name="networkType">网络类型。</param>
            <param name="networkProtocolType">网络协议类型。</param>
            <param name="networkTarget">网络目标类型。</param>
        </member>
        <member name="M:Fantasy.ANetwork.RemoveChannel(System.UInt32)">
            <summary>
            移除通道。
            </summary>
            <param name="channelId">通道 ID。</param>
        </member>
        <member name="M:Fantasy.ANetwork.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="F:Fantasy.ANetworkServerChannel.Id">
            <summary>
            获取通道的唯一标识 ID。
            </summary>
        </member>
        <member name="F:Fantasy.ANetworkServerChannel.RemoteEndPoint">
            <summary>
            获取通道的远程终端点。
            </summary>
        </member>
        <member name="P:Fantasy.ANetworkServerChannel.Scene">
            <summary>
            获取或设置通道所属的场景。
            </summary>
        </member>
        <member name="P:Fantasy.ANetworkServerChannel.Session">
            <summary>
            获取或设置通道所属的会话。
            </summary>
        </member>
        <member name="P:Fantasy.ANetworkServerChannel.IsDisposed">
            <summary>
            获取通道是否已经被释放。
            </summary>
        </member>
        <member name="P:Fantasy.ANetworkServerChannel.PacketParser">
            <summary>
            获取通道的数据包解析器。
            </summary>
        </member>
        <member name="F:Fantasy.ANetworkServerChannel.ChannelSynchronizationContext">
            <summary>
            通道关联的线程同步上下文。
            </summary>
        </member>
        <member name="T:Fantasy.KCPClientNetworkSendPending">
            <summary>
            KCP客户端等待连接状态的处理
            </summary>
        </member>
        <member name="T:Fantasy.KCPClientNetwork">
            <summary>
            KCP协议客户端网络类，用于管理KCP客户端网络连接。
            </summary>
        </member>
        <member name="M:Fantasy.KCPServerSocket.SendToRepeatChannelId(System.UInt32,System.Net.EndPoint)">
            <summary>
            发送指定通道的数据，以重复通道ID的方式。
            </summary>
            <param name="channelId">通道ID。</param>
            <param name="clientEndPoint">客户端终结点。</param>
        </member>
        <member name="T:Fantasy.KCPServerNetworkChannel">
            <summary>
            KCP 服务器网络通道，用于处理服务器与客户端之间的数据通信。
            </summary>
        </member>
        <member name="M:Fantasy.KCPServerNetworkChannel.#ctor(Fantasy.KCPServerNetwork,Fantasy.KCPServerSSocketAsyncEventArgs)">
            <summary>
            构造函数，创建 KCP 服务器网络通道实例。
            </summary>
            <param name="network"></param>
            <param name="kcpServerSSocketAsyncEventArgs"></param>
        </member>
        <member name="M:Fantasy.KCPServerNetworkChannel.Send(System.IO.MemoryStream)">
            <summary>
            发送数据到客户端。
            </summary>
            <param name="memoryStream">内存流</param>
        </member>
        <member name="M:Fantasy.KCPServerNetworkChannel.Send(System.UInt32,System.Int64,System.Int64,System.IO.MemoryStream,System.Object)">
            <summary>
            发送数据到客户端。
            </summary>
            <param name="rpcId"></param>
            <param name="routeTypeOpCode"></param>
            <param name="routeId"></param>
            <param name="memoryStream"></param>
            <param name="message"></param>
        </member>
        <member name="M:Fantasy.KCPServerNetworkChannel.Dispose">
            <summary>
            释放网络通道。
            </summary>
        </member>
        <member name="T:Fantasy.NetworkType">
            <summary>
            表示网络类型的枚举。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkType.None">
            <summary>
            未指定网络类型。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkType.Client">
            <summary>
            表示客户端网络类型。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkType.Server">
            <summary>
            表示服务器网络类型。
            </summary>
        </member>
        <member name="T:Fantasy.NetworkTarget">
            <summary>
            表示网络通信的目标类型的枚举。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkTarget.None">
            <summary>
            未指定网络通信目标。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkTarget.Outer">
            <summary>
            表示外部网络通信目标。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkTarget.Inner">
            <summary>
            表示内部网络通信目标。
            </summary>
        </member>
        <member name="T:Fantasy.NetworkProtocolType">
            <summary>
            表示网络通信协议类型的枚举。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkProtocolType.None">
            <summary>
            未指定协议类型。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkProtocolType.KCP">
            <summary>
            使用KCP（KCP协议）进行通信。
            </summary>
        </member>
        <member name="F:Fantasy.NetworkProtocolType.TCP">
            <summary>
            使用TCP（传输控制协议）进行通信。
            </summary>
        </member>
        <member name="T:Fantasy.MessageQueue">
            <summary>
            消息缓存信息结构。
            </summary>
        </member>
        <member name="F:Fantasy.MessageQueue.RpcId">
            <summary>
            获取或设置 RPC ID。
            </summary>
        </member>
        <member name="F:Fantasy.MessageQueue.RouteId">
            <summary>
            获取或设置路由 ID。
            </summary>
        </member>
        <member name="F:Fantasy.MessageQueue.RouteTypeOpCode">
            <summary>
            获取或设置路由类型与操作码。
            </summary>
        </member>
        <member name="F:Fantasy.MessageQueue.Message">
            <summary>
            获取或设置消息对象。
            </summary>
        </member>
        <member name="F:Fantasy.MessageQueue.MemoryStream">
            <summary>
            获取或设置内存流。
            </summary>
        </member>
        <member name="T:Fantasy.TCPClientNetwork">
            <summary>
            TCP客户端网络类，用于管理TCP客户端网络连接。
            </summary>
        </member>
        <member name="M:Fantasy.TCPClientNetwork.#ctor(Fantasy.Scene,Fantasy.NetworkTarget)">
            <summary>
            创建一个 TCP协议客户端网络实例。
            </summary>
            <param name="scene">所属场景。</param>
            <param name="networkTarget">网络目标。</param>
        </member>
        <member name="M:Fantasy.TCPClientNetwork.Connect(System.Net.IPEndPoint,System.Action,System.Action,System.Action,System.Int32)">
            <summary>
            连接到远程服务器。
            </summary>
            <param name="remoteEndPoint">远程服务器的终端点。</param>
            <param name="onConnectComplete">连接成功时的回调。</param>
            <param name="onConnectFail">连接失败时的回调。</param>
            <param name="onConnectDisconnect">连接断开时的回调。</param>
            <param name="connectTimeout">连接超时时间，单位：毫秒。</param>
            <returns>连接的通道ID。</returns>
        </member>
        <member name="M:Fantasy.TCPClientNetwork.OnNetworkConnectComplete(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            在网络连接成功时的回调方法。
            </summary>
            <param name="asyncEventArgs"></param>
        </member>
        <member name="M:Fantasy.TCPClientNetwork.RemoveChannel(System.UInt32)">
            <summary>
            从网络中移除指定通道。
            </summary>
            <param name="channelId">要移除的通道 ID。</param>
        </member>
        <member name="M:Fantasy.TCPClientNetwork.Dispose">
            <summary>
            释放资源并断开网络连接。
            </summary>
        </member>
        <member name="T:Fantasy.TCPServerNetwork">
            <summary>
            表示 TCP 协议服务端网络类。
            </summary>
        </member>
        <member name="M:Fantasy.TCPServerNetwork.AcceptAsync">
            <summary>
            异步接受客户端连接请求。
            </summary>
        </member>
        <member name="T:Fantasy.TCPServerNetworkChannel">
            <summary>
            TCP 服务器网络通道，用于处理服务器与客户端之间的数据通信。
            </summary>
        </member>
        <member name="M:Fantasy.TCPServerNetworkChannel.Send(System.IO.MemoryStream)">
            <summary>
            向通道发送内存流数据。
            </summary>
            <param name="memoryStream">待发送的内存流。</param>
        </member>
        <member name="M:Fantasy.TCPServerNetworkChannel.Receive">
            <summary>
            开始接收数据。
            </summary>
        </member>
        <member name="T:Fantasy.RouteComponent">
            <summary>
            自定义Route组件、如果要自定义Route协议必须使用这个组件
            </summary>
        </member>
        <member name="F:Fantasy.RouteComponent.RouteAddress">
            <summary>
            存储路由类型和路由ID的映射关系。
            </summary>
        </member>
        <member name="M:Fantasy.RouteComponent.AddAddress(System.Int64,System.Int64)">
            <summary>
            添加路由类型和路由ID的映射关系。
            </summary>
            <param name="routeType">路由类型。</param>
            <param name="routeId">路由ID。</param>
        </member>
        <member name="M:Fantasy.RouteComponent.RemoveAddress(System.Int64)">
            <summary>
            移除指定路由类型的映射关系。
            </summary>
            <param name="routeType">路由类型。</param>
        </member>
        <member name="M:Fantasy.RouteComponent.GetRouteId(System.Int64)">
            <summary>
            获取指定路由类型的路由ID。
            </summary>
            <param name="routeType">路由类型。</param>
            <returns>路由ID。</returns>
        </member>
        <member name="M:Fantasy.RouteComponent.TryGetRouteId(System.Int64,System.Int64@)">
            <summary>
            尝试获取指定路由类型的路由ID。
            </summary>
            <param name="routeType">路由类型。</param>
            <param name="routeId">输出的路由ID。</param>
            <returns>如果获取成功返回true，否则返回false。</returns>
        </member>
        <member name="M:Fantasy.RouteComponent.Dispose">
            <summary>
            释放组件资源，清空映射关系。
            </summary>
        </member>
        <member name="T:Fantasy.SessionIdleCheckerComponent">
            <summary>
            负责检查会话空闲超时的组件。
            </summary>
        </member>
        <member name="M:Fantasy.SessionIdleCheckerComponent.Dispose">
            <summary>
            重写 Dispose 方法以释放资源。
            </summary>
        </member>
        <member name="M:Fantasy.SessionIdleCheckerComponent.Start(System.Int32,System.Int32)">
            <summary>
            使用指定的间隔和空闲超时时间启动空闲检查功能。
            </summary>
            <param name="interval">以毫秒为单位的检查间隔。</param>
            <param name="timeOut">以毫秒为单位的空闲超时时间。</param>
        </member>
        <member name="M:Fantasy.SessionIdleCheckerComponent.Stop">
            <summary>
            停止空闲检查功能。
            </summary>
        </member>
        <member name="M:Fantasy.SessionIdleCheckerComponent.Check">
            <summary>
            执行空闲检查操作。
            </summary>
        </member>
        <member name="T:Fantasy.ServerInnerSession">
            <summary>
            网络服务器内部会话。
            </summary>
        </member>
        <member name="M:Fantasy.ServerInnerSession.Send(System.Object,System.UInt32,System.Int64)">
            <summary>
            发送消息到服务器内部。
            </summary>
            <param name="message">要发送的消息。</param>
            <param name="rpcId">RPC 标识符。</param>
            <param name="routeId">路由标识符。</param>
        </member>
        <member name="M:Fantasy.ServerInnerSession.Send(Fantasy.IRouteMessage,System.UInt32,System.Int64)">
            <summary>
            发送路由消息到服务器内部。
            </summary>
            <param name="routeMessage">要发送的路由消息。</param>
            <param name="rpcId">RPC 标识符。</param>
            <param name="routeId">路由标识符。</param>
        </member>
        <member name="M:Fantasy.ServerInnerSession.Send(System.IO.MemoryStream,System.UInt32,System.Int64,System.Int64)">
            <summary>
            发送内存流到服务器内部（不支持）。
            </summary>
            <param name="memoryStream">要发送的内存流。</param>
            <param name="rpcId">RPC 标识符。</param>
            <param name="routeTypeOpCode">路由类型和操作码。</param>
            <param name="routeId">路由标识符。</param>
        </member>
        <member name="M:Fantasy.ServerInnerSession.Call(Fantasy.IRequest,System.Int64)">
            <summary>
            调用请求并等待响应（不支持）。
            </summary>
            <param name="request">要调用的请求。</param>
            <param name="routeId">路由标识符。</param>
            <returns>一个代表异步操作的任务，返回响应。</returns>
        </member>
        <member name="T:Fantasy.Session">
            <summary>
            网络会话的基类，用于管理网络通信。
            </summary>
        </member>
        <member name="P:Fantasy.Session.Channel">
            <summary>
            获取或设置网络通道。
            </summary>
        </member>
        <member name="P:Fantasy.Session.RemoteEndPoint">
            <summary>
            连接目标的终结点信息。
            </summary>
        </member>
        <member name="P:Fantasy.Session.LastReceiveTime">
            <summary>
            获取最后一次接收数据的时间。
            </summary>
        </member>
        <member name="P:Fantasy.Session.NetworkMessageScheduler">
            <summary>
            获取用于网络消息调度的实例。
            </summary>
        </member>
        <member name="F:Fantasy.Session.RequestCallback">
            <summary>
            存储请求回调的字典。
            </summary>
        </member>
        <member name="E:Fantasy.Session.OnDispose">
            <summary>
            在网络连接释放时触发的事件。
            </summary>
        </member>
        <member name="M:Fantasy.Session.Create(Fantasy.ANetworkMessageScheduler,Fantasy.ANetworkServerChannel,Fantasy.NetworkTarget)">
            <summary>
            创建一个会话并添加到会话字典中。
            </summary>
            <param name="networkMessageScheduler">用于网络消息调度的实例。</param>
            <param name="channel">与会话关联的通道。</param>
            <param name="networkTarget">网络目标。</param>
        </member>
        <member name="M:Fantasy.Session.Create(Fantasy.AClientNetwork,System.Net.IPEndPoint)">
            <summary>
            创建一个与客户端网络相关的会话并添加到会话字典中。
            </summary>
            <param name="network">与会话关联的客户端网络。</param>
            <param name="remoteEndPoint">终结点信息</param>
            <returns>创建的会话实例。</returns>
        </member>
        <member name="M:Fantasy.Session.Create(Fantasy.ANetwork)">
            <summary>
            创建一个与服务器网络相关的会话并添加到会话字典中。
            </summary>
            <param name="network">与会话关联的服务器网络。</param>
            <returns>创建的会话实例。</returns>
        </member>
        <member name="M:Fantasy.Session.Dispose">
            <summary>
            释放会话所持有的资源。
            </summary>
        </member>
        <member name="M:Fantasy.Session.Send(System.Object,System.UInt32,System.Int64)">
            <summary>
            发送消息到会话。
            </summary>
            <param name="message">要发送的消息。</param>
            <param name="rpcId">RPC 标识符。</param>
            <param name="routeId">路由标识符。</param>
        </member>
        <member name="M:Fantasy.Session.Send(Fantasy.IRouteMessage,System.UInt32,System.Int64)">
            <summary>
            发送路由消息到会话。
            </summary>
            <param name="routeMessage">要发送的路由消息。</param>
            <param name="rpcId">RPC 标识符。</param>
            <param name="routeId">路由标识符。</param>
        </member>
        <member name="M:Fantasy.Session.Send(System.IO.MemoryStream,System.UInt32,System.Int64,System.Int64)">
            <summary>
            发送内存流到会话。
            </summary>
            <param name="memoryStream">要发送的内存流。</param>
            <param name="rpcId">RPC 标识符。</param>
            <param name="routeTypeOpCode">路由类型和操作码。</param>
            <param name="routeId">路由标识符。</param>
        </member>
        <member name="M:Fantasy.Session.Call(Fantasy.IRequest,System.Int64)">
            <summary>
            调用请求并等待响应。
            </summary>
            <param name="request">要调用的请求。</param>
            <param name="routeId">路由标识符。</param>
            <returns>一个代表异步操作的任务，返回响应。</returns>
        </member>
        <member name="M:Fantasy.Session.Receive(Fantasy.APackInfo)">
            <summary>
            接收到网络流数据。
            </summary>
            <param name="packInfo"></param>
        </member>
        <member name="T:Fantasy.MultiThreadPool">
            <summary>
            线程安全的静态通用对象池。
            </summary>
        </member>
        <member name="M:Fantasy.MultiThreadPool.Rent``1">
            <summary>
            从对象池中获取一个对象实例。如果池为空，则创建一个新的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.MultiThreadPool.Rent(System.Type)">
            <summary>
            从对象池中获取一个对象实例。如果池为空，则创建一个新的对象。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.MultiThreadPool.Return(System.Object)">
            <summary>
            将对象实例返回到对象池中。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Fantasy.MultiThreadPoolQueue">
            <summary>
            线程安全的对象池。
            </summary>
        </member>
        <member name="M:Fantasy.MultiThreadPoolQueue.#ctor">
            <summary>
            不允许无参数实例化
            </summary>
        </member>
        <member name="M:Fantasy.MultiThreadPoolQueue.#ctor(System.Type,System.Int32)">
            <summary>
            ConcurrentPool的构造函数
            </summary>
            <param name="objectType"></param>
            <param name="maxCapacity"></param>
        </member>
        <member name="M:Fantasy.MultiThreadPoolQueue.Rent">
            <summary>
            从对象池中获取一个对象实例。如果池为空，则创建一个新的对象。
            </summary>
            <returns>获取的对象实例。</returns>
        </member>
        <member name="M:Fantasy.MultiThreadPoolQueue.Return(System.Object)">
            <summary>
            将对象实例返回到对象池中。
            </summary>
        </member>
        <member name="T:Fantasy.IPool">
            <summary>
            表示一个对象池接口。
            </summary>
        </member>
        <member name="P:Fantasy.IPool.IsPool">
            <summary>
            是否为对象池。
            </summary>
        </member>
        <member name="T:Fantasy.SingleThreadPool">
            <summary>
            单线程对象池。
            </summary>
        </member>
        <member name="M:Fantasy.SingleThreadPool.Rent``1">
            <summary>
            从对象池中获取一个对象实例。如果池为空，则创建一个新的对象。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fantasy.SingleThreadPool.Rent(System.Type)">
            <summary>
            从对象池中获取一个对象实例。如果池为空，则创建一个新的对象。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.SingleThreadPool.Return(System.Object)">
            <summary>
            将对象实例返回到对象池中。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Fantasy.SingleThreadPool.Dispose">
            <summary>
            释放对象池。
            </summary>
        </member>
        <member name="T:Fantasy.SingleThreadPoolQueue">
            <summary>
            单线程对象池队列。
            </summary>
        </member>
        <member name="M:Fantasy.SingleThreadPoolQueue.#ctor(System.Type,System.Int32)">
            <summary>
            SingleThreadPoolQueue的构造函数。
            </summary>
            <param name="objectType"></param>
            <param name="maxCapacity"></param>
        </member>
        <member name="M:Fantasy.SingleThreadPoolQueue.Rent">
            <summary>
            从对象池中获取一个对象实例。如果池为空，则创建一个新的对象。
            </summary>
            <returns>获取的对象实例。</returns>
        </member>
        <member name="M:Fantasy.SingleThreadPoolQueue.Return(System.Object)">
            <summary>
             将对象实例返回到对象池中。   
            </summary>
            <param name="obj">要回收的对象。</param>
        </member>
        <member name="M:Fantasy.SingleThreadPoolQueue.Dispose">
            <summary>
            释放对象池。
            </summary>
        </member>
        <member name="T:Fantasy.ISingleton">
            <summary>
            定义一个单例接口，表示可以被初始化并在销毁时进行处理。
            </summary>
        </member>
        <member name="P:Fantasy.ISingleton.IsDisposed">
            <summary>
            获取或设置一个值，指示实例是否已被销毁。
            </summary>
        </member>
        <member name="M:Fantasy.ISingleton.Initialize">
            <summary>
            异步初始化单例实例的方法。
            </summary>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="T:Fantasy.Singleton`1">
            <summary>
            抽象的单例基类，继承自 <see cref="T:Fantasy.ISingleton"/> 接口。
            </summary>
            <typeparam name="T">单例类型。</typeparam>
        </member>
        <member name="P:Fantasy.Singleton`1.IsDisposed">
            <summary>
            获取或设置单例是否已被销毁。
            </summary>
        </member>
        <member name="P:Fantasy.Singleton`1.Instance">
            <summary>
            获取单例的实例。
            </summary>
        </member>
        <member name="M:Fantasy.Singleton`1.Register(Fantasy.ISingleton)">
            <summary>
            注册单例的方法。
            </summary>
            <param name="singleton">单例对象。</param>
        </member>
        <member name="M:Fantasy.Singleton`1.Initialize">
            <summary>
            初始化单例的方法。
            </summary>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="M:Fantasy.Singleton`1.Load(System.Int64)">
            <summary>
            在程序集加载时执行的方法。
            </summary>
            <param name="assemblyIdentity"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Fantasy.Singleton`1.ReLoad(System.Int64)">
            <summary>
            在程序集重新加载时执行的方法。
            </summary>
            <param name="assemblyIdentity"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Fantasy.Singleton`1.OnUnLoad(System.Int64)">
            <summary>
            在程序集卸载时执行的方法。
            </summary>
            <param name="assemblyIdentity"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Fantasy.Singleton`1.Dispose">
            <summary>
            释放单例的方法。
            </summary>
        </member>
        <member name="T:Fantasy.AssemblySingletonInfo">
            <summary>
            程序集单例信息。
            </summary>
        </member>
        <member name="T:Fantasy.SingletonSystem">
            <summary>
            单例管理系统，负责管理和调度实现 <see cref="T:Fantasy.ISingleton"/> 接口的单例对象。
            </summary>
        </member>
        <member name="T:Fantasy.ThreadSynchronizationContext">
            <summary>
            一个用于线程同步的上下文。
            </summary>
        </member>
        <member name="P:Fantasy.ThreadSynchronizationContext.Main">
            <summary>
            获取主线程的同步上下文实例。
            </summary>
        </member>
        <member name="M:Fantasy.ThreadSynchronizationContext.#ctor(System.Int64)">
            <summary>
            初始化 ThreadSynchronizationContext 类的新实例。
            </summary>
            <param name="id">上下文的唯一标识符。</param>
        </member>
        <member name="M:Fantasy.ThreadSynchronizationContext.Update">
            <summary>
            更新同步上下文中的操作。
            </summary>
        </member>
        <member name="M:Fantasy.ThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            将操作排队以在同步上下文中异步执行。
            </summary>
            <param name="callback">要执行的回调方法。</param>
            <param name="state">传递给回调方法的状态对象。</param>
        </member>
        <member name="M:Fantasy.ThreadSynchronizationContext.Post(System.Action)">
            <summary>
            将操作排队以在同步上下文中异步执行。
            </summary>
            <param name="action">要执行的操作。</param>
        </member>
        <member name="T:Fantasy.AsyncFTaskCompletedMethodBuilder">
            <summary>
            用于构建已完成的异步任务方法的构建器。
            </summary>
        </member>
        <member name="M:Fantasy.AsyncFTaskCompletedMethodBuilder.Create">
            <summary>
            创建一个新的已完成的异步任务构建器。
            </summary>
            <returns>已完成的异步任务构建器。</returns>
        </member>
        <member name="P:Fantasy.AsyncFTaskCompletedMethodBuilder.Task">
            <summary>
            获取表示已完成的异步任务。
            </summary>
        </member>
        <member name="M:Fantasy.AsyncFTaskCompletedMethodBuilder.SetException(System.Exception)">
            <summary>
            将已完成的异步任务标记为发生异常。
            </summary>
            <param name="exception">表示任务失败的异常信息。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskCompletedMethodBuilder.SetResult">
            <summary>
            将已完成的异步任务标记为已完成。
            </summary>
        </member>
        <member name="M:Fantasy.AsyncFTaskCompletedMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            在任务完成时异步等待操作完成，并在操作完成时继续异步执行。
            </summary>
            <typeparam name="TAwaiter">等待操作的awaiter类型。</typeparam>
            <typeparam name="TStateMachine">异步状态机的类型。</typeparam>
            <param name="awaiter">等待操作的awaiter实例的引用。</param>
            <param name="stateMachine">异步状态机实例的引用。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskCompletedMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            在任务完成时异步等待操作完成（不安全），并在操作完成时继续异步执行。
            </summary>
            <typeparam name="TAwaiter">等待操作的awaiter类型。</typeparam>
            <typeparam name="TStateMachine">异步状态机的类型。</typeparam>
            <param name="awaiter">等待操作的awaiter实例的引用。</param>
            <param name="stateMachine">异步状态机实例的引用。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskCompletedMethodBuilder.Start``1(``0@)">
            <summary>
            启动异步状态机以开始执行已完成的异步任务。
            </summary>
            <typeparam name="TStateMachine">异步状态机的类型。</typeparam>
            <param name="stateMachine">异步状态机实例的引用。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskCompletedMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            设置异步状态机的状态。
            </summary>
            <param name="stateMachine">异步状态机实例。</param>
        </member>
        <member name="T:Fantasy.AsyncFTaskMethodBuilder">
            <summary>
            用于异步任务方法的构建器。
            </summary>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder.Create">
            <summary>
            创建一个新的异步任务构建器。
            </summary>
            <returns>异步任务构建器。</returns>
        </member>
        <member name="P:Fantasy.AsyncFTaskMethodBuilder.Task">
            <summary>
            获取由该构建器创建的异步任务。
            </summary>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder.Start``1(``0@)">
            <summary>
            启动异步状态机以开始执行异步任务。
            </summary>
            <typeparam name="TStateMachine">异步状态机的类型。</typeparam>
            <param name="stateMachine">异步状态机实例的引用。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder.SetResult">
            <summary>
            将异步任务标记为已完成。
            </summary>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder.SetException(System.Exception)">
            <summary>
            将异步任务标记为已完成，但带有异常信息。
            </summary>
            <param name="exception">表示任务失败的异常信息。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            在任务完成时异步等待操作完成，并在操作完成时继续异步执行。
            </summary>
            <typeparam name="TAwaiter">等待操作的awaiter类型。</typeparam>
            <typeparam name="TStateMachine">异步状态机的类型。</typeparam>
            <param name="awaiter">等待操作的awaiter实例的引用。</param>
            <param name="stateMachine">异步状态机实例的引用。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            在任务完成时异步等待操作完成（不安全），并在操作完成时继续异步执行。
            </summary>
            <typeparam name="TAwaiter">等待操作的awaiter类型。</typeparam>
            <typeparam name="TStateMachine">异步状态机的类型。</typeparam>
            <param name="awaiter">等待操作的awaiter实例的引用。</param>
            <param name="stateMachine">异步状态机实例的引用。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            设置异步状态机的状态。
            </summary>
            <param name="stateMachine">异步状态机实例。</param>
        </member>
        <member name="T:Fantasy.AsyncFTaskMethodBuilder`1">
            <summary>
            表示用于构建泛型异步任务方法的构建器。
            </summary>
            <typeparam name="T">异步任务的结果类型。</typeparam>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder`1.Create">
            <summary>
            创建一个新的泛型异步任务构建器。
            </summary>
            <returns>泛型异步任务构建器。</returns>
        </member>
        <member name="P:Fantasy.AsyncFTaskMethodBuilder`1.Task">
            <summary>
            获取由该构建器创建的泛型异步任务。
            </summary>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder`1.Start``1(``0@)">
            <summary>
            启动异步状态机以开始执行泛型异步任务。
            </summary>
            <typeparam name="TStateMachine">异步状态机的类型。</typeparam>
            <param name="stateMachine">异步状态机实例的引用。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder`1.SetResult(`0)">
            <summary>
            将泛型异步任务标记为已完成，并设置结果值。
            </summary>
            <param name="value">泛型异步任务的结果值。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder`1.SetException(System.Exception)">
            <summary>
            将异步任务标记为已完成，但带有异常信息。
            </summary>
            <param name="exception">表示任务失败的异常信息。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            在任务完成时异步等待操作完成，并在操作完成时继续异步执行。
            </summary>
            <typeparam name="TAwaiter">等待操作的awaiter类型。</typeparam>
            <typeparam name="TStateMachine">异步状态机的类型。</typeparam>
            <param name="awaiter">等待操作的awaiter实例的引用。</param>
            <param name="stateMachine">异步状态机实例的引用。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            在任务完成时异步等待操作完成（不安全），并在操作完成时继续异步执行。
            </summary>
            <typeparam name="TAwaiter">等待操作的awaiter类型。</typeparam>
            <typeparam name="TStateMachine">异步状态机的类型。</typeparam>
            <param name="awaiter">等待操作的awaiter实例的引用。</param>
            <param name="stateMachine">异步状态机实例的引用。</param>
        </member>
        <member name="M:Fantasy.AsyncFTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            设置异步状态机的状态。
            </summary>
            <param name="stateMachine">异步状态机实例。</param>
        </member>
        <member name="T:Fantasy.FCancellationToken">
            <summary>
            表示一个自定义的取消标记，允许添加和移除取消动作，并可用于取消一组注册的动作。
            </summary>
        </member>
        <member name="P:Fantasy.FCancellationToken.IsPool">
            <summary>
            是否是池
            </summary>
        </member>
        <member name="P:Fantasy.FCancellationToken.IsCancel">
            <summary>
            获取一个值，指示取消标记是否已被取消。
            </summary>
        </member>
        <member name="M:Fantasy.FCancellationToken.Create">
            <summary>
            创建一个取消标记。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fantasy.FCancellationToken.Add(System.Action)">
            <summary>
            将一个动作添加到在取消时执行的动作列表中。
            </summary>
            <param name="action">要添加的动作。</param>
        </member>
        <member name="M:Fantasy.FCancellationToken.Remove(System.Action)">
            <summary>
            从取消标记中移除之前添加的动作。
            </summary>
            <param name="action">要移除的动作。</param>
        </member>
        <member name="M:Fantasy.FCancellationToken.Dispose">
            <summary>
            取消标记并执行所有已注册的取消动作。
            </summary>
        </member>
        <member name="T:Fantasy.STaskStatus">
            <summary>
            表示异步任务的状态。
            </summary>
        </member>
        <member name="F:Fantasy.STaskStatus.Pending">
            <summary>The operation has not yet completed.</summary>
        </member>
        <member name="F:Fantasy.STaskStatus.Succeeded">
            <summary>The operation completed successfully.</summary>
        </member>
        <member name="F:Fantasy.STaskStatus.Faulted">
            <summary>The operation completed with an error.</summary>
        </member>
        <member name="T:Fantasy.FTask">
            <summary>
            轻量级异步任务类。
            </summary>
            <summary>
            提供用于异步任务操作的静态方法和对象创建。
            </summary>
            <summary>
            提供用于异步任务操作的静态方法和对象创建。
            </summary>
            <summary>
            提供用于异步任务操作的静态方法。
            </summary>
        </member>
        <member name="P:Fantasy.FTask.IsCompleted">
            <summary>
            获取一个值，表示异步任务是否已经完成。
            </summary>
            <returns>如果异步任务已完成，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Fantasy.FTask.OnCompleted(System.Action)">
            <summary>
            在异步任务完成时执行指定的操作。
            </summary>
            <param name="continuation">完成时要执行的操作。</param>
        </member>
        <member name="M:Fantasy.FTask.GetAwaiter">
            <summary>
            获取用于等待异步任务完成的等待器。
            </summary>
            <returns>一个异步任务等待器。</returns>
        </member>
        <member name="M:Fantasy.FTask.InnerCoroutine">
            <summary>
            将当前任务用于异步协程的等待。
            </summary>
        </member>
        <member name="M:Fantasy.FTask.Coroutine">
            <summary>
            启动当前任务作为一个协程。
            </summary>
        </member>
        <member name="M:Fantasy.FTask.GetResult">
            <summary>
            获取异步任务的执行结果。
            </summary>
            <exception cref="T:System.NotSupportedException">不支持直接调用 GetResult。</exception>
        </member>
        <member name="M:Fantasy.FTask.Recycle">
            <summary>
            将异步任务对象进行回收，以供后续重用。
            </summary>
        </member>
        <member name="M:Fantasy.FTask.SetResult">
            <summary>
            设置异步任务的执行结果。
            </summary>
        </member>
        <member name="M:Fantasy.FTask.UnsafeOnCompleted(System.Action)">
            <summary>
            在任务未完成时，注册一个操作，以便在任务完成时执行。
            如果任务已经完成，操作将立即执行。
            </summary>
            <param name="continuation">要注册的操作。</param>
        </member>
        <member name="M:Fantasy.FTask.SetException(System.Exception)">
            <summary>
            设置任务为异常完成状态，并指定异常信息。
            如果任务已经完成，将引发异常。
            </summary>
            <param name="exception">要关联的异常信息。</param>
        </member>
        <member name="P:Fantasy.FTask.CompletedTask">
            <summary>
            获取一个已完成的异步任务实例。
            </summary>
        </member>
        <member name="M:Fantasy.FTask.Run(System.Func{Fantasy.FTask})">
            <summary>
            使用指定的工厂方法创建并运行一个异步任务。
            </summary>
            <param name="factory">用于创建异步任务的工厂方法。</param>
            <returns>创建并运行的异步任务。</returns>
        </member>
        <member name="M:Fantasy.FTask.Run``1(System.Func{Fantasy.FTask{``0}})">
            <summary>
            使用指定的工厂方法创建并运行一个带有结果的异步任务。
            </summary>
            <typeparam name="T">异步任务的结果类型。</typeparam>
            <param name="factory">用于创建异步任务的工厂方法。</param>
            <returns>创建并运行的异步任务。</returns>
        </member>
        <member name="M:Fantasy.FTask.FromResult``1(``0)">
            <summary>
            从指定的值创建一个已完成的异步任务。
            </summary>
            <typeparam name="T">异步任务的结果类型。</typeparam>
            <param name="value">异步任务的结果值。</param>
            <returns>已完成的异步任务。</returns>
        </member>
        <member name="P:Fantasy.FTask.IsPool">
            <summary>
            获取或设置是否从对象池中创建。
            </summary>
        </member>
        <member name="M:Fantasy.FTask.Create(System.Boolean)">
            <summary>
            创建一个新的异步任务。
            </summary>
            <param name="isFromPool">是否从对象池中创建。</param>
            <returns>新的异步任务实例。</returns>
        </member>
        <member name="M:Fantasy.FTask.WhenAll(System.Collections.Generic.List{Fantasy.FTask})">
            <summary>
            等待所有任务完成的异步方法。
            </summary>
            <param name="tasks">要等待的任务列表。</param>
        </member>
        <member name="M:Fantasy.FTask.Any(Fantasy.FTask[])">
            <summary>
            等待任意一个任务完成的异步方法。
            </summary>
            <param name="tasks">要等待的任务数组。</param>
        </member>
        <member name="T:Fantasy.FTask`1">
            <summary>
            表示一个轻量级的异步任务（Future Task），提供类似于 Task 的异步编程模型，但仅适用于某些简单的异步操作。
            </summary>
            <summary>
            提供用于异步任务操作的泛型静态方法和对象创建。
            </summary>
            <typeparam name="T">任务结果的类型。</typeparam>
            <summary>
            提供用于异步任务操作的静态方法，支持泛型参数。
            </summary>
        </member>
        <member name="P:Fantasy.FTask`1.IsCompleted">
            <summary>
            获取一个值，表示异步任务是否已经完成。
            </summary>
        </member>
        <member name="M:Fantasy.FTask`1.OnCompleted(System.Action)">
            <summary>
            在任务未完成时，注册一个操作，以便在任务完成时执行。
            如果任务已经完成，操作将立即执行。
            </summary>
            <param name="continuation">要注册的操作。</param>
        </member>
        <member name="M:Fantasy.FTask`1.GetAwaiter">
            <summary>
            获取一个等待任务完成的 awaiter。
            </summary>
            <returns>用于等待异步任务的 awaiter。</returns>
        </member>
        <member name="M:Fantasy.FTask`1.Coroutine">
            <summary>
            将任务转换为协程进行等待。
            </summary>
        </member>
        <member name="M:Fantasy.FTask`1.GetResult">
            <summary>
            获取异步任务的结果。
            </summary>
            <returns>异步任务的结果。</returns>
        </member>
        <member name="M:Fantasy.FTask`1.Recycle">
            <summary>
            回收任务对象，将其放回对象池。
            </summary>
        </member>
        <member name="M:Fantasy.FTask`1.SetResult(`0)">
            <summary>
            设置异步任务的成功结果。
            </summary>
            <param name="value">异步任务的结果值。</param>
        </member>
        <member name="M:Fantasy.FTask`1.UnsafeOnCompleted(System.Action)">
            <summary>
            在任务未完成时，注册一个操作，以便在任务完成时执行。
            如果任务已经完成，操作将立即执行。
            </summary>
            <param name="continuation">要注册的操作。</param>
        </member>
        <member name="M:Fantasy.FTask`1.SetException(System.Exception)">
            <summary>
            设置异步任务的异常结果。
            </summary>
            <param name="exception">要关联的异常信息。</param>
        </member>
        <member name="P:Fantasy.FTask`1.IsPool">
            <summary>
            获取或设置是否从对象池中创建。
            </summary>
        </member>
        <member name="M:Fantasy.FTask`1.Create(System.Boolean)">
            <summary>
            创建一个新的异步任务。
            </summary>
            <param name="isFromPool">是否从对象池中创建。</param>
            <returns>新的异步任务实例。</returns>
        </member>
        <member name="M:Fantasy.FTask`1.WhenAll(System.Collections.Generic.List{Fantasy.FTask{`0}})">
            <summary>
            等待所有任务完成的异步方法。
            </summary>
            <param name="tasks">要等待的任务列表。</param>
        </member>
        <member name="M:Fantasy.FTask`1.WhenAll(Fantasy.FTask{`0}[])">
            <summary>
            等待所有任务完成的异步方法。
            </summary>
            <param name="tasks">要等待的任务数组。</param>
        </member>
        <member name="M:Fantasy.FTask`1.WaitAny(Fantasy.FTask{`0}[])">
            <summary>
            等待任意一个任务完成的异步方法。
            </summary>
            <param name="tasks">要等待的任务数组。</param>
        </member>
        <member name="T:Fantasy.FTaskCompleted">
            <summary>
            已完成的异步任务结构。
            </summary>
        </member>
        <member name="M:Fantasy.FTaskCompleted.GetAwaiter">
            <summary>
            获取一个等待器以等待此已完成的异步任务。
            </summary>
            <returns>一个等待器。</returns>
        </member>
        <member name="P:Fantasy.FTaskCompleted.IsCompleted">
            <summary>
            获取一个值，表示异步任务是否已经完成。
            </summary>
        </member>
        <member name="M:Fantasy.FTaskCompleted.GetResult">
            <summary>
            获取异步任务的结果。
            </summary>
        </member>
        <member name="M:Fantasy.FTaskCompleted.OnCompleted(System.Action)">
            <summary>
            指定在异步操作完成时要执行的继续操作。
            </summary>
            <param name="continuation">要执行的继续操作。</param>
        </member>
        <member name="M:Fantasy.FTaskCompleted.UnsafeOnCompleted(System.Action)">
            <summary>
            指定在异步操作完成时要执行的不安全继续操作。
            </summary>
            <param name="continuation">要执行的不安全继续操作。</param>
        </member>
        <member name="T:Fantasy.TimerHandler`1">
            <summary>
            计时器抽象类，提供了一个基础框架，用于创建处理计时器事件的具体类。
            </summary>
            <typeparam name="T">事件的类型参数</typeparam>
        </member>
        <member name="T:Fantasy.TimerAction">
            <summary>
            计时器操作类，用于管理定时器相关信息。
            </summary>
        </member>
        <member name="F:Fantasy.TimerAction.StartTime">
            <summary>
            开始的事件
            </summary>
        </member>
        <member name="F:Fantasy.TimerAction.TriggerTime">
            <summary>
            触发时间。
            </summary>
        </member>
        <member name="F:Fantasy.TimerAction.Callback">
            <summary>
            回调对象。
            </summary>
        </member>
        <member name="F:Fantasy.TimerAction.TimerType">
            <summary>
            计时器类型。
            </summary>
        </member>
        <member name="T:Fantasy.TimerComponentUpdateSystem">
            <summary>
            时间调度组件的UpdateSystem
            </summary>
        </member>
        <member name="M:Fantasy.TimerComponentUpdateSystem.Update(Fantasy.TimerComponent)">
            <summary>
            Update方法
            </summary>
            <param name="self"></param>
        </member>
        <member name="T:Fantasy.TimerComponent">
            <summary>
            时间调度组件
            </summary>
        </member>
        <member name="F:Fantasy.TimerComponent.Core">
            <summary>
            使用系统时间创建的计时器核心。
            </summary>
        </member>
        <member name="T:Fantasy.TimerScheduler">
            <summary>
            计时器调度器类，用于管理计时器任务的调度。
            </summary>
        </member>
        <member name="M:Fantasy.TimerScheduler.#ctor(System.Func{System.Int64})">
            <summary>
            构造函数，初始化计时器核心。
            </summary>
            <param name="now">获取当前时间的委托。</param>
        </member>
        <member name="M:Fantasy.TimerScheduler.Update">
            <summary>
            更新计时器，检查并执行超时的计时器任务。
            </summary>
        </member>
        <member name="M:Fantasy.TimerScheduler.WaitAsync(System.Int64,Fantasy.FCancellationToken)">
            <summary>
            异步等待指定时间。
            </summary>
            <param name="time">等待的时间长度。</param>
            <param name="cancellationToken">可选的取消令牌。</param>
            <returns>等待是否成功。</returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.WaitTillAsync(System.Int64,Fantasy.FCancellationToken)">
            <summary>
            异步等待直到指定时间。
            </summary>
            <param name="tillTime">等待的目标时间。</param>
            <param name="cancellationToken">可选的取消令牌。</param>
            <returns>等待是否成功。</returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.WaitFrameAsync(Fantasy.FCancellationToken)">
            <summary>
            异步等待一帧时间。
            </summary>
            <returns>等待是否成功。</returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.OnceTimer(System.Int64,System.Action)">
            <summary>
            创建一个只执行一次的计时器，直到指定时间
            </summary>
            <param name="time">计时器执行的目标时间。</param>
            <param name="action">计时器回调方法。</param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.OnceTillTimer(System.Int64,System.Action)">
            <summary>
            创建一个只执行一次的计时器，直到指定时间。
            </summary>
            <param name="tillTime">计时器执行的目标时间。</param>
            <param name="action">计时器回调方法。</param>
            <returns>计时器的 ID。</returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.OnceTimer``1(System.Int64,``0)">
            <summary>
            创建一个只执行一次的计时器，用于发布指定类型的事件。
            </summary>
            <typeparam name="T">事件类型。</typeparam>
            <param name="time">计时器执行的延迟时间。</param>
            <param name="timerHandlerType">事件处理器类型。</param>
            <returns>计时器的 ID。</returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.OnceTillTimer``1(System.Int64,``0)">
            <summary>
            创建一个只执行一次的计时器，直到指定时间，用于发布指定类型的事件。
            </summary>
            <typeparam name="T">事件类型。</typeparam>
            <param name="tillTime">计时器执行的目标时间。</param>
            <param name="timerHandlerType">事件处理器类型。</param>
            <returns>计时器的 ID。</returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.FrameTimer(System.Action)">
            <summary>
            创建一个帧任务
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.RepeatedTimer(System.Int64,System.Action)">
            <summary>
            创建一个重复执行的计时器。
            </summary>
            <param name="time">计时器重复间隔的时间。</param>
            <param name="action">计时器回调方法。</param>
            <returns>计时器的 ID。</returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.RepeatedTimer``1(System.Int64,``0)">
            <summary>
            创建一个重复执行的计时器，用于发布指定类型的事件。
            </summary>
            <typeparam name="T">事件类型。</typeparam>
            <param name="time">计时器重复间隔的时间。</param>
            <param name="timerHandlerType">事件处理器类型。</param>
            <returns>计时器的 ID。</returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.Remove(System.Int64@)">
            <summary>
            移除指定 ID 的计时器。
            </summary>
            <param name="timerId"></param>
            <returns></returns>
        </member>
        <member name="M:Fantasy.TimerScheduler.Remove(System.Int64)">
            <summary>
            移除指定 ID 的计时器。
            </summary>
            <param name="timerId">计时器的 ID。</param>
        </member>
        <member name="T:Fantasy.TimerType">
            <summary>
            枚举对象TimerType
            </summary>
        </member>
        <member name="F:Fantasy.TimerType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Fantasy.TimerType.OnceWaitTimer">
            <summary>
            一次等待定时器
            </summary>
        </member>
        <member name="F:Fantasy.TimerType.OnceTimer">
            <summary>
            一次性定时器
            </summary>
        </member>
        <member name="F:Fantasy.TimerType.RepeatedTimer">
            <summary>
            重复定时器
            </summary>
        </member>
        <member name="T:KCP.Kcp">
            <summary>
                Kcp
            </summary>
        </member>
        <member name="F:KCP.Kcp._kcp">
            <summary>
                Kcp
            </summary>
        </member>
        <member name="F:KCP.Kcp._output">
            <summary>
                Output function
            </summary>
        </member>
        <member name="F:KCP.Kcp._buffer">
            <summary>
                Buffer
            </summary>
        </member>
        <member name="F:KCP.Kcp._disposed">
            <summary>
                Disposed
            </summary>
        </member>
        <member name="M:KCP.Kcp.#ctor(KCP.KcpCallback)">
            <summary>
                Structure
            </summary>
            <param name="output">Output</param>
        </member>
        <member name="M:KCP.Kcp.#ctor(System.UInt32,KCP.KcpCallback)">
            <summary>
                Structure
            </summary>
            <param name="conv">ConversationId</param>
            <param name="output">Output</param>
        </member>
        <member name="P:KCP.Kcp.IsSet">
            <summary>
                Set
            </summary>
        </member>
        <member name="P:KCP.Kcp.ConversationId">
            <summary>
                Conversation id
            </summary>
        </member>
        <member name="P:KCP.Kcp.MaximumTransmissionUnit">
            <summary>
                Maximum transmission unit
            </summary>
        </member>
        <member name="P:KCP.Kcp.MaximumSegmentSize">
            <summary>
                Maximum segment size
            </summary>
        </member>
        <member name="P:KCP.Kcp.State">
            <summary>
                Connection state
            </summary>
        </member>
        <member name="P:KCP.Kcp.SendUna">
            <summary>
                The sequence number of the first unacknowledged packet
            </summary>
        </member>
        <member name="P:KCP.Kcp.SendNext">
            <summary>
                The sequence number for the next packet to be sent
            </summary>
        </member>
        <member name="P:KCP.Kcp.ReceiveNext">
            <summary>
                The sequence number for the next packet expected to be received
            </summary>
        </member>
        <member name="P:KCP.Kcp.SlowStartThreshold">
            <summary>
                Slow start threshold for congestion control
            </summary>
        </member>
        <member name="P:KCP.Kcp.RxRttval">
            <summary>
                Round-trip time variance
            </summary>
        </member>
        <member name="P:KCP.Kcp.RxSrtt">
            <summary>
                Smoothed round-trip time
            </summary>
        </member>
        <member name="P:KCP.Kcp.RxRto">
            <summary>
                Retransmission timeout
            </summary>
        </member>
        <member name="P:KCP.Kcp.RxMinrto">
            <summary>
                Minimum retransmission timeout
            </summary>
        </member>
        <member name="P:KCP.Kcp.SendWindowSize">
            <summary>
                Send window size
            </summary>
        </member>
        <member name="P:KCP.Kcp.ReceiveWindowSize">
            <summary>
                Receive window size
            </summary>
        </member>
        <member name="P:KCP.Kcp.RemoteWindowSize">
            <summary>
                Remote window size
            </summary>
        </member>
        <member name="P:KCP.Kcp.CongestionWindowSize">
            <summary>
                Congestion window size
            </summary>
        </member>
        <member name="P:KCP.Kcp.Probe">
            <summary>
                Probe variable for fast recovery
            </summary>
        </member>
        <member name="P:KCP.Kcp.Current">
            <summary>
                Current timestamp
            </summary>
        </member>
        <member name="P:KCP.Kcp.Interval">
            <summary>
                Flush interval
            </summary>
        </member>
        <member name="P:KCP.Kcp.TimestampFlush">
            <summary>
                Timestamp for the next flush
            </summary>
        </member>
        <member name="P:KCP.Kcp.Transmissions">
            <summary>
                Number of retransmissions
            </summary>
        </member>
        <member name="P:KCP.Kcp.ReceiveBufferCount">
            <summary>
                Number of packets in the receive buffer
            </summary>
        </member>
        <member name="P:KCP.Kcp.ReceiveQueueCount">
            <summary>
                Number of packets in the receive queue
            </summary>
        </member>
        <member name="P:KCP.Kcp.WaitReceiveCount">
            <summary>
                Number of packets wait to receive
            </summary>
        </member>
        <member name="P:KCP.Kcp.SendBufferCount">
            <summary>
                Number of packets in the send buffer
            </summary>
        </member>
        <member name="P:KCP.Kcp.SendQueueCount">
            <summary>
                Number of packets in the send queue
            </summary>
        </member>
        <member name="P:KCP.Kcp.WaitSendCount">
            <summary>
                Number of packets wait to send
            </summary>
        </member>
        <member name="P:KCP.Kcp.NoDelay">
            <summary>
                Whether Nagle's algorithm is disabled
            </summary>
        </member>
        <member name="P:KCP.Kcp.Updated">
            <summary>
                Whether the KCP connection has been updated
            </summary>
        </member>
        <member name="P:KCP.Kcp.TimestampProbe">
            <summary>
                Timestamp for the next probe
            </summary>
        </member>
        <member name="P:KCP.Kcp.ProbeWait">
            <summary>
                Probe wait time
            </summary>
        </member>
        <member name="P:KCP.Kcp.Increment">
            <summary>
                Incremental increase
            </summary>
        </member>
        <member name="P:KCP.Kcp.AckList">
            <summary>
                Pointer to the acknowledge list
            </summary>
        </member>
        <member name="P:KCP.Kcp.AckCount">
            <summary>
                Count of acknowledges
            </summary>
        </member>
        <member name="P:KCP.Kcp.AckBlock">
            <summary>
                Number of acknowledge blocks
            </summary>
        </member>
        <member name="P:KCP.Kcp.Buffer">
            <summary>
                Buffer
            </summary>
        </member>
        <member name="P:KCP.Kcp.FastResend">
            <summary>
                Fast resend trigger count
            </summary>
        </member>
        <member name="P:KCP.Kcp.FastResendLimit">
            <summary>
                Fast resend limit
            </summary>
        </member>
        <member name="P:KCP.Kcp.NoCongestionWindow">
            <summary>
                Whether congestion control is disabled
            </summary>
        </member>
        <member name="P:KCP.Kcp.StreamMode">
            <summary>
                Whether stream mode is enabled
            </summary>
        </member>
        <member name="P:KCP.Kcp.Output">
            <summary>
                Output function pointer
            </summary>
        </member>
        <member name="M:KCP.Kcp.Dispose">
            <summary>
                Dispose
            </summary>
        </member>
        <member name="M:KCP.Kcp.SetOutput(KCP.KcpCallback)">
            <summary>
                Set output
            </summary>
            <param name="output">Output</param>
        </member>
        <member name="M:KCP.Kcp.Finalize">
            <summary>
                Destructure
            </summary>
        </member>
        <member name="M:KCP.Kcp.Send(System.Byte[])">
            <summary>
                Send
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Sent bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Send(System.Byte[],System.Int32)">
            <summary>
                Send
            </summary>
            <param name="buffer">Buffer</param>
            <param name="length">Length</param>
            <returns>Sent bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Send
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="length">Length</param>
            <returns>Sent bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Send(System.ReadOnlySpan{System.Byte})">
            <summary>
                Send
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Sent bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Send(System.ReadOnlyMemory{System.Byte})">
            <summary>
                Send
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Sent bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Send(System.ArraySegment{System.Byte})">
            <summary>
                Send
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Sent bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Send(System.Byte*,System.Int32)">
            <summary>
                Send
            </summary>
            <param name="buffer">Buffer</param>
            <param name="length">Length</param>
            <returns>Sent bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Send(System.Byte*,System.Int32,System.Int32)">
            <summary>
                Send
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="length">Length</param>
            <returns>Sent bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Input(System.Byte[])">
            <summary>
                Input
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Input bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Input(System.Byte[],System.Int32)">
            <summary>
                Input
            </summary>
            <param name="buffer">Buffer</param>
            <param name="length">Length</param>
            <returns>Input bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Input(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Input
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="length">Length</param>
            <returns>Input bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Input(System.ReadOnlySpan{System.Byte})">
            <summary>
                Input
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Input bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Input(System.ReadOnlyMemory{System.Byte})">
            <summary>
                Input
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Input bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Input(System.ArraySegment{System.Byte})">
            <summary>
                Input
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Input bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Input(System.Byte*,System.Int32)">
            <summary>
                Input
            </summary>
            <param name="buffer">Buffer</param>
            <param name="length">Length</param>
            <returns>Input bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Input(System.Byte*,System.Int32,System.Int32)">
            <summary>
                Input
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="length">Length</param>
            <returns>Input bytes</returns>
        </member>
        <member name="M:KCP.Kcp.PeekSize">
            <summary>
                Peek size
            </summary>
            <returns>Peeked size</returns>
        </member>
        <member name="M:KCP.Kcp.Receive(System.Byte[])">
            <summary>
                Receive
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Received bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Receive(System.Byte[],System.Int32)">
            <summary>
                Receive
            </summary>
            <param name="buffer">Buffer</param>
            <param name="length">Length</param>
            <returns>Received bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Receive
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="length">Length</param>
            <returns>Received bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Receive(System.Span{System.Byte})">
            <summary>
                Receive
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Received bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Receive(System.Memory{System.Byte})">
            <summary>
                Receive
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Received bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Receive(System.ArraySegment{System.Byte})">
            <summary>
                Receive
            </summary>
            <param name="buffer">Buffer</param>
            <returns>Received bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Receive(System.Byte*,System.Int32)">
            <summary>
                Receive
            </summary>
            <param name="buffer">Buffer</param>
            <param name="length">Length</param>
            <returns>Received bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Receive(System.Byte*,System.Int32,System.Int32)">
            <summary>
                Receive
            </summary>
            <param name="buffer">Buffer</param>
            <param name="offset">Offset</param>
            <param name="length">Length</param>
            <returns>Received bytes</returns>
        </member>
        <member name="M:KCP.Kcp.Update(System.UInt32)">
            <summary>
                Update
            </summary>
            <param name="current">Timestamp</param>
        </member>
        <member name="M:KCP.Kcp.Check(System.UInt32)">
            <summary>
                Check
            </summary>
            <param name="current">Timestamp</param>
            <returns>Next flush timestamp</returns>
        </member>
        <member name="M:KCP.Kcp.Flush">
            <summary>
                Flush
            </summary>
        </member>
        <member name="M:KCP.Kcp.SetMtu(System.Int32)">
            <summary>
                Set maximum transmission unit
            </summary>
            <param name="mtu">Maximum transmission unit</param>
            <returns>Set</returns>
        </member>
        <member name="M:KCP.Kcp.SetInterval(System.Int32)">
            <summary>
                Set flush interval
            </summary>
            <param name="interval">Flush interval</param>
        </member>
        <member name="M:KCP.Kcp.SetNoDelay(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Set no delay
            </summary>
            <param name="nodelay">Whether Nagle's algorithm is disabled</param>
            <param name="interval">Flush interval</param>
            <param name="resend">Fast resend trigger count</param>
            <param name="nc">No congestion window</param>
        </member>
        <member name="M:KCP.Kcp.SetWindowSize(System.Int32,System.Int32)">
            <summary>
                Set window size
            </summary>
            <param name="sndwnd">Send window size</param>
            <param name="rcvwnd">Receive window size</param>
        </member>
        <member name="M:KCP.Kcp.SetFastResendLimit(System.Int32)">
            <summary>
                Set fast resend limit
            </summary>
            <param name="fastlimit">Fast resend limit</param>
        </member>
        <member name="M:KCP.Kcp.SetStreamMode(System.Int32)">
            <summary>
                Set whether stream mode is enabled
            </summary>
            <param name="stream">Whether stream mode is enabled</param>
        </member>
        <member name="M:KCP.Kcp.SetMinrto(System.Int32)">
            <summary>
                Set minimum retransmission timeout
            </summary>
            <param name="minrto">Minimum retransmission timeout</param>
        </member>
    </members>
</doc>
